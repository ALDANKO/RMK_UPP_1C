////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем ТекущаяДЛЛ;
Перем ТекущаяСтрокаЗапросаВесов;
Перем ТекущийОбъектВесов;
Перем ТекущийПорт;
Перем КнопкаВесов Экспорт;
Перем ТекущийДокументВзвешивания;
Перем НомерКнопкиВесов Экспорт;
Перем НовСтрокаТЧ;

Перем мОбновлятьВладельца Экспорт;
// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

Перем мВидДоговора;
Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиДокументы;

Перем мРазрешитьНулевыеЦеныВОпте, мРазрешитьНулевыеЦеныВРознице;

// Хранит информацию о сумме без скидки документа.
Перем мРассчитыватьАвтоматическиеСкидки Экспорт;
Перем мМинимальныеЦены Экспорт;
Перем мСписокФильтров Экспорт;

// Хранит суммарное количество товаров в табличной части Товары
Перем мТекущееКоличествоТоваров;
Перем мТекущееКоличествоЗаказа;
Перем мТекущееКоличествоТары;

// Автоотметка СкладОредра без учета заполненности ТЧ.
Перем мАвтоОтметкаСклада;

Перем мФормаВводСерийныхНомеров, мТекущаяСтрокаТовары;

Перем мФормаСоставНабора, мТекущаяСтрокаНабор;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСделки, мСтароеЗначениеСклада;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мСерверТО;
Перем мТерминалы;

Перем мУчетнаяПолитика;


Перем мПересчитыватьСкидку;

// Признак перерасчета сумм НДС с учетом погрешностей округления
Перем мПерерасчетПроизведен; 

// Хранит схему налогообложения текущей организации 
Перем мТекущаяСхемаНалогообложения Экспорт; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииНоменклатурыТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Ввод состава набора
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииНоменклатурыТовары()

// Процедура выполняет необходимые действия при изменении количества в ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПриИзмененииКоличестваТовары(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//Сообщить("Кол"+СтрокаТабличнойЧасти.Количество);
    //***!!!
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	 //Сообщить("Кол 1 "+СтрокаТабличнойЧасти.Количество);

	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	 //Сообщить("Кол 2 "+СтрокаТабличнойЧасти.Количество);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
	//***!!!
	//Сообщить("Кол  3 "+СтрокаТабличнойЧасти.Количество);
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	//ЦенаМенеджера = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,,ЦенаРеализатора,Дата,СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	//ВалютаДокумента,1,1,0,);
	 
	Процент=Справочники.ТипыЦенНоменклатуры.НайтиПоКоду(ЦенаРеализатора.Код).ПроцентСкидкиНаценки;
	СтрокаТабличнойЧасти.СуммаМенеджера = СтрокаТабличнойЧасти.Сумма*(100+Процент)/100;
	//Сообщить("СуммаМенеджера "+СтрокаТабличнойЧасти.СуммаМенеджера);
	//Сообщить("Сумма "+СтрокаТабличнойЧасти.Сумма); 
	//Сообщить("Процент "+Процент); 
	//СтрокаТабличнойЧасти.СуммаМенеджера = ЦенаМенеджера*СтрокаТабличнойЧасти.Количество*(100-СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок)/100;
	//Сообщить("СуммаМенеджера "+СтрокаТабличнойЧасти.СуммаМенеджера); 
	//Сообщить("Сумма "+СтрокаТабличнойЧасти.Сумма); 
	//Если СтрокаТабличнойЧасти.СуммаМенеджера > СтрокаТабличнойЧасти.Сумма тогда
		 //СтрокаТабличнойЧасти.СуммаМенеджера=СтрокаТабличнойЧасти.Сумма;
	 //КонецЕсли;
	 
КонецПроцедуры // ПриИзмененииКоличестваТовары()

// Процедура выполняет необходимые действия перед удалением строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//  Отказ - флаг отказа.
//
Процедура ПередУдалениемТовары(Элемент, Отказ)

	 //запрет удаления строки табличной части для Экспедиции
	 //***!!!
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя()).Родитель.Код)="001" тогда
		Предупреждение("Вы не должны удалять из накладной. Запишите эту накладную!",10,"Внимание!");
    	ЭлементыФормы.Товары.СкопироватьСтроку();
		ЭлементыФормы.Товары.ЗакончитьРедактированиеСтроки(FALSE);
		ЭтотОбъект.Записать();
	КонецЕсли;
	//***!!!


	Если Элемент.ТекущиеДанные = мТекущаяСтрокаТовары И мФормаВводСерийныхНомеров.Открыта() Тогда
		мФормаВводСерийныхНомеров.Закрыть();
	КонецЕсли;

	Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
		мФормаСоставНабора.Закрыть();
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
		Поиск = Новый Структура();
		Поиск.Вставить("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		Строки = СерийныеНомера.НайтиСтроки(Поиск);
		Для Каждого СерийныйНомер Из Строки Цикл
			СерийныеНомера.Удалить(СерийныйНомер);
		КонецЦикла;
	КонецЕсли;

	УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПередУдалениемТовары()

// Процедура выполняет необходимые действия после удаления строки ТЧ "Товары".
//
// Параметры:
//  Элемент - ЭУ, для которого вызван обработчик.
//
Процедура ПослеУдаленияТовары(Элемент)

	УстановитьАвтоотметкуСклада();

	ПересчитатьАвтоматическиеСкидки();

	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;

КонецПроцедуры // ПослеУдаленияТовары()

// Процедура выполняет необходимые действия при изменении контрагента.
//
Процедура ПриИзмененииКонтрагента()

	// Выполняем общие действия для всех документов при изменении Контрагент.
	УправлениеВзаиморасчетами.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);
	// Могли поменять договор.
	ПриИзмененииДоговора();
	Если НЕ Контрагент.Пустая() тогда
		
		Если  Контрагент.ОсновнойМенеджерПокупателя<>Неопределено И Контрагент.ОсновнойМенеджерПокупателя.Ссылка<>справочники.Контрагенты.ПустаяСсылка()тогда
			Реализатор=Контрагент.ОсновнойМенеджерПокупателя.Ссылка; 
			Если  Контрагент.МенеджерыПокупателя.Количество() тогда
				СтрМен=Контрагент.МенеджерыПокупателя.Получить(0);
				ЦенаРеализатора=СтрМен.ЦенаМенеджера.Ссылка;
			Иначе
				ЦенаРеализатора=Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
			КонецЕсли;
		Иначе
				ЦенаРеализатора=Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		КонецЕсли;
		//Сообщить(" ЦенаРеализатора "+ЦенаРеализатора);
		ВидВзаиморасчетов=ДоговорКонтрагента.ВидВзаиморасчетов.Ссылка;
	КонецЕсли;
КонецПроцедуры // ПриИзмененииКонтрагента()

// Процедура выполняет необходимые действия при изменении дисконтной карты.
//
Процедура ПриИзмененииДисконтнойКарты()

	Если ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Если ЗначениеЗаполнено(ДисконтнаяКарта.ВладелецКарты)
		   И ДисконтнаяКарта.ВладелецКарты <> Контрагент Тогда
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Ответ = КодВозвратаДиалога.Да;
			Иначе
				Ответ = Вопрос("У выбранной дисконтной карты владелец " + СокрЛП(ДисконтнаяКарта.ВладелецКарты) + "."
				   + Символы.ПС + "Изменить контрагента в документе?", РежимДиалогаВопрос.ДаНет);
			КонецЕсли;

			Если Ответ = КодВозвратаДиалога.Да Тогда
				Контрагент = ДисконтнаяКарта.ВладелецКарты;
				ПриИзмененииКонтрагента();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // ПриИзмененииДисконтнойКарты()

// Функция выполняет пересчет автоматических скидок в документе.
//
// Возвращаемое значение:
//  Булево - Истина, если автоматические скидки были рассчитаны.
//
Функция ПересчитатьАвтоматическиеСкидки()

	Если РассчитыватьАвтоматическиеСкидки() Тогда
		ТекСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары) + Ценообразование.ПолучитьСуммуДокументаБезСкидки(Услуги);

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации"                      , Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента"                     , ТекСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта"                              , ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС"                       , УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС"                   , СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета"     , мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       мУчетнаяПолитика);

		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Услуги, СтруктураПараметров, мМинимальныеЦены, мСписокФильтров);

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПересчитатьАвтоматическиеСкидки()

// Процедура вызывается для обработки программного изменения строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", изменение которой нужно обработать.
//  ИзмененнаяКолонка - название колонки, обработчик изменения которой необходимо вызвать.
//
Процедура ИзменениеСтрокиПрограммное(СтрокаТабличнойЧасти, ИзмененнаяКолонка) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	Если ИзмененнаяКолонка = "Номенклатура" Тогда
		ПриИзмененииНоменклатурыТовары(ЭлементыФормы.Товары);
	ИначеЕсли ИзмененнаяКолонка = "Количество" Тогда
		ПриИзмененииКоличестваТовары(ЭлементыФормы.Товары);
	КонецЕсли;

КонецПроцедуры // ИзменениеСтрокиПрограммное()

// Процедура вызывается для обработки программного удалениия строки.
//
// Параметры
//  СтрокаТабличнойЧасти - строка ТЧ "Товары", которую нужно удалить.
//
Процедура УдалениеСтрокиПрограммное(СтрокаТабличнойЧасти) Экспорт

	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;

	ПередУдалениемТовары(ЭлементыФормы.Товары, Ложь);

	Товары.Удалить(СтрокаТабличнойЧасти);

	ПослеУдаленияТовары(ЭлементыФормы.Товары);

КонецПроцедуры // УдалениеСтрокиПрограммное()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	УправлениеВзаиморасчетами.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	Если ОтражатьВБухгалтерскомУчете Тогда

		Ответ = Вопрос(?(ОтражатьВБухгалтерскомУчете, "Установить", "Очистить") + 
						" реквизиты бухгалтерского и налогового учета" + 
						?(ОтражатьВБухгалтерскомУчете, " в соответствии со значениями по умолчанию?","?"), 
						РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета");

		Если Ответ = КодВозвратаДиалога.Да Тогда

			Если Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() > 0 Тогда
				ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
				ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
				ЗаполнитьСчетаУчетаВТабЧастиУслуги(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЕсли;

			Если ОтражатьВБухгалтерскомУчете Тогда
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
				Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
					СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
					СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
				Иначе
					СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
					СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
				КонецЕсли;
				
				СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
				СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;

			Иначе

				ПустСчетБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
				СчетУчетаРасчетовПоАвансам     	= ПустСчетБУ;
				СчетУчетаРасчетовСКонтрагентом 	= ПустСчетБУ;
				СчетУчетаРасчетовПоТаре        	= ПустСчетБУ;
				СчетУчетаРасчетовПоТареПоАвансам = ПустСчетБУ;
				
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				СтатьяВаловыхДоходов  = СчетаУчета.СтатьяВаловыхДоходов;
			Иначе
				СтатьяВаловыхДоходов  = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

	мВидДоговора          = ДоговорКонтрагента.ВидДоговора;
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект=ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, Неопределено, мКолонкиДокументы, ЭлементыФормы.Сделка);
	УстановитьВидимость();
	
КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	ВидСклада = Склад.ВидСклада;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	ИначеЕсли ВидСклада = Перечисления.ВидыСкладов.Розничный И мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()

	СуммаВзаиморасчетов = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + 
	                      Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
						  
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);
	КонецЕсли;

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть, Очистить = Истина)

	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка)
		  или Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = "Не выбран счет на оплату.
							  |Заполнение невозможно.";
	
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя + " не проведен.
							  |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары(Сделка);
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару(Сделка);
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги(Сделка);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда
		Если НЕ ПустойТипЦен Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;

		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
			СписокЗапросов.Добавить("ОстаткиИКачествоНоменклатуры",               "По остаткам и качеству номенклатуры ");
			Если НЕ ПустойТипЦен Тогда
				СписокЗапросов.Добавить("РасходОстаткиКачествоИЦеныНоменклатуры", "По остаткам, качеству и ценам номенклатуры");
			КонецЕсли;
		Иначе
			СписокЗапросов.Добавить("ОстаткиНоменклатуры",                "По остаткам номенклатуры");
			Если НЕ ПустойТипЦен Тогда
				СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги",        "По услугам предприятия");

		Если НЕ ПустойТипЦен Тогда
			СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	ОбработкаТабличныхЧастей.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	ЕстьСерия           = Истина;
	Валюта              = ВалютаДокумента;
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Качество            = ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия, Справочники.Качество.Новый, Неопределено);

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Команда           = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Услуги";
		Качество          = Неопределено;

	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"   , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"               , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"             , Качество);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"  , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"        , УсловиеПродаж);

	ОбработкаТабличныхЧастей.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен,
	                                      СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);

	ЗначениеВыбора.Свойство("Серия"   , Серия);
	ЗначениеВыбора.Свойство("Качество", Качество);

	ЕстьСкладВТабличнойЧасти = мУказаниеСкладовВТЧ;

	Если ТабличнаяЧасть = Услуги Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;	 
						 
							 
	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ВозвратнаяТара)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если ЗначениеЗаполнено(Качество) Тогда
			СтруктураОтбора.Вставить("Качество"         , Качество);
		КонецЕсли;
		Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
			СтруктураОтбора.Вставить("Цена", Цена);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти
	   И ТабличнаяЧасть <> Услуги
	   И ЗначениеЗаполнено(Склад) Тогда
		СтруктураОтбора.Вставить("Склад", Склад);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

			Если Не ПересчитатьАвтоматическиеСкидки() Тогда // рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			Если НЕ ЗначениеЗаполнено(Качество) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
 
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			СтрокаТабличнойЧасти.Склад = Склад;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");


			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение ТЧ СерийныеНомера при помощи сканера штрих-кодов
//
// Параметры
//  СерийныйНомер – СправочникСсылка.СерийныйНомер – серийный номер
//
// Возвращаемое значение:
//  булево        - признак успешного завершения подбора
//
Функция ОбработкаПодбораСерийногоНомера(СерийныйНомер) Экспорт
	
	Перем Поиск;
	Перем СтрокиТЧ;
	Перем МассивСерНомеров;
	Перем СерНомер;
	Перем Номенклатура;
	Перем Результат;
	
	Результат = Ложь;
	
	#Если Клиент Тогда 
		
	// Поиск по ТЧ "Товары"
	Поиск = Новый Структура();
	Поиск.Вставить("Номенклатура", СерийныйНомер.Владелец);
    СтрокиТЧ = Товары.НайтиСтроки(Поиск);
	Для Каждого Номенклатура Из СтрокиТЧ Цикл
		Поиск = Новый Структура();
		Поиск.Вставить("КлючСвязи", Номенклатура.КлючСвязи);
		МассивСерНомеров = СерийныеНомера.НайтиСтроки(Поиск);
		Для Каждого СерНомер Из МассивСерНомеров Цикл
			Если СерНомер.СерийныйНомер = СерийныйНомер Тогда
				Сообщить("Введённый серийный номер """ + СерийныйНомер.Код + """ уже присутствует в списке серийных номеров в строке №" + Номенклатура.НомерСтроки, СтатусСообщения.Информация);
				Результат = Истина;
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСерНомеров.Количество() < Номенклатура.Количество Тогда
			// Добавление серийного номера
			Если Номенклатура.КлючСвязи = 0 Тогда
				Номенклатура.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, 
				                                                ЭтотОбъект,
																"Товары",
																Истина);
			КонецЕсли;

			СерНомер = СерийныеНомера.Добавить();
			СерНомер.КлючСвязи = Номенклатура.КлючСвязи;
			СерНомер.СерийныйНомер = СерийныйНомер;
			
			Результат = Истина;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по ТЧ "СоставНабора"
	Поиск = Новый Структура();
	Поиск.Вставить("Номенклатура", СерийныйНомер.Владелец);
    СтрокиТЧ = СоставНабора.НайтиСтроки(Поиск);
	Для Каждого Номенклатура Из СтрокиТЧ Цикл
		Поиск = Новый Структура();
		Поиск.Вставить("КлючСвязи", Номенклатура.КлючСвязи);
		МассивСерНомеров = СерийныеНомераСоставНабора.НайтиСтроки(Поиск);
		Для Каждого СерНомер Из МассивСерНомеров Цикл
			Если СерНомер.СерийныйНомер = СерийныйНомер Тогда
				Сообщить("Введённый серийный номер """ + СерийныйНомер.Код + """ уже присутствует в списке серийных номеров набора", СтатусСообщения.Информация);
				Результат = Истина;
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСерНомеров.Количество() < Номенклатура.Количество Тогда
			// Добавление серийного номера
			Если Номенклатура.КлючСвязи = 0 Тогда
				Номенклатура.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, 
				                                                ЭтотОбъект,
																"СоставНабора",
																Истина);
			КонецЕсли;  

			СерНомер = СерийныеНомераСоставНабора.Добавить();
			СерНомер.КлючСвязи = Номенклатура.КлючСвязи;
			СерНомер.СерийныйНомер = СерийныйНомер;
			
			Результат = Истина;
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление нового товара
	Поиск = Новый Структура();
	Поиск.Вставить("Номенклатура", СерийныйНомер.Владелец);
	Поиск.Вставить("Качество", Справочники.Качество.ПустаяСсылка());
	Поиск.Вставить("ХарактеристикаНоменклатуры", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Поиск.Вставить("Качество", Справочники.Качество.Новый);
	Номенклатура = Товары.НайтиСтроки(Поиск);
	
	Если Номенклатура.Количество() > 0 Тогда
		Номенклатура = Номенклатура[0];
		Номенклатура.Количество = Номенклатура.Количество + 1;
	Иначе
		Номенклатура = Товары.Добавить();
		Номенклатура.Номенклатура = СерийныйНомер.Владелец;
		Номенклатура.Количество   = 1;
		Номенклатура.Качество     = Справочники.Качество.Новый;
	КонецЕсли;
	
	Если Номенклатура.КлючСвязи = 0 Тогда
		Номенклатура.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, 
													    ЭтотОбъект,
														"Товары",
														Истина);
	КонецЕсли;
	
	СерНомер = СерийныеНомера.Добавить();
	СерНомер.КлючСвязи = Номенклатура.КлючСвязи;
	СерНомер.СерийныйНомер = СерийныйНомер;
	
	Результат = Истина;
	
	#КонецЕсли

	Возврат Результат;
	
КонецФункции // ОбработкаПодбораСерийногоНомера()

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЕстьКолонкаЗаказ Тогда
		ТаблицаЗаказов = ТаблицаИсточник.Скопировать();
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		СписокЗаказов = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаЗаказов Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) Тогда
				СписокЗаказов.Добавить(Строка.ЗаказПокупателя.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокЗаказов.Количество() > 0 Тогда
			СписокЗаказов.Добавить(Сделка);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокЗаказов",   СписокЗаказов);
	Иначе
		Запрос.УстановитьПараметр("ЗаказПокупателя", Сделка);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента" 
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.СтавкаНДС                            КАК СтавкаНДС,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.СтавкаНДС,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки
		|";

		ТаблицаИсточник.Колонки.Добавить("СтавкаНДС");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	Пока НомерСтроки < ТаблицаИсточник.Количество() Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ЕстьКолонкаЗаказ И ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		ИначеЕсли ЕстьКолонкаЗаказ И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", Сделка);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл
			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда
				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда
					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;
					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;
						Если ТабличнаяЧасть = Товары Тогда

							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.УсловиеАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.УсловиеАвтоматическойСкидки;
							СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки = СтрокаТаблицыЦенСкидок.ЗначениеУсловияАвтоматическойСкидки;

						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];
				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Вставить(НомерСтроки + 1);

					// Скопируем строку
					Для Каждого КолонкаТаблицы Из ТаблицаИсточник.Колонки Цикл
						КопияСтроки[КолонкаТаблицы.Имя] = СтрокаТаблицы[КолонкаТаблицы.Имя];
					КонецЦикла;

					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары
					 Или ТабличнаяЧасть = Услуги Тогда
						СтрокаТаблицы.ПроцентСкидкиНаценки = СтрокаТаблицыЦенСкидок.ПроцентСкидкиНаценки;
						СтрокаТаблицы.СтавкаНДС            = СтрокаТаблицыЦенСкидок.СтавкаНДС;
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.ПроцентАвтоматическихСкидок = СтрокаТаблицыЦенСкидок.ПроцентАвтоматическихСкидок;
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);
						КонецЕсли;
					КонецЕсли;

					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обработанную таблицу
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОрганизацияЗаказа                   = Сделка.Организация;
		ДатаЗаказа                          = Сделка.Дата;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТаблицаПолучатель = ТабличнаяЧасть.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПолучатель);
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаАвтоматическихСкидок = ", ПроцентАвтоматическихСкидок, УсловиеАвтоматическойСкидки, ЗначениеУсловияАвтоматическойСкидки";
			СтрокаХарактеристика       = ", ХарактеристикаНоменклатуры";
			СтрокаЕдиницаИзмерения     = ", ЕдиницаИзмерения, Коэффициент";
		Иначе
			СтрокаАвтоматическихСкидок = "";
			СтрокаХарактеристика       = "";
			СтрокаЕдиницаИзмерения     = "";
		КонецЕсли;
		
		Если ЕстьКолонкаЗаказ Тогда
			СтрокаЗаказ = ", ЗаказПокупателя";
		Иначе
			СтрокаЗаказ = "";
		КонецЕсли;
		
		Если ТабличнаяЧасть <> Услуги Тогда
			СтрокаСпособСписания = ", СпособСписанияОстаткаТоваров";
		Иначе
			СтрокаСпособСписания = "";
		КонецЕсли;
		
		Если ТабличнаяЧасть <> Услуги И мУказаниеСкладовВТЧ Тогда
			СтрокаСклад = ", Склад";
		Иначе
			СтрокаСклад = "";
		КонецЕсли;
		
			СтрокаСерия = ", СерияНоменклатуры";
		
		Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда
			СтрокаПроцентСкидки = ", ПроцентСкидкиНаценки";
		Иначе
			СтрокаПроцентСкидки = "";
		КонецЕсли;
		
		ТаблицаПолучатель.Свернуть("Номенклатура" + СтрокаХарактеристика + СтрокаЗаказ + СтрокаСклад + СтрокаСерия + СтрокаПроцентСкидки + СтрокаАвтоматическихСкидок + СтрокаЕдиницаИзмерения + СтрокаСпособСписания + ", Цена", "Количество");
		ТабличнаяЧасть.Загрузить(ТаблицаПолучатель);
	Иначе
		ТабличнаяЧасть.Загрузить(ТаблицаИсточник);
	КонецЕсли;
		
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ТабличнаяЧасть = Товары Тогда
			
			Если ЕстьКолонкаЗаказ И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				ДокументЗаказ = СтрокаТабличнойЧасти.ЗаказПокупателя;
			Иначе
				ДокументЗаказ = Сделка;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;

			// Заполнение цены зависит от розничности операции.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
											ДокументЗаказ.ВалютаДокумента, ВалютаДокумента,
											УправлениеВзаиморасчетами.КурсДокумента(ДокументЗаказ, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
											УправлениеВзаиморасчетами.КратностьДокумента(ДокументЗаказ, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											ДокументЗаказ.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			СчетБУ  = СтрокаТабличнойЧасти.СчетДоходовБУ;
			СчетНУ  = СтрокаТабличнойЧасти.СчетДоходовНУ;

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			Если ЕстьКолонкаЗаказ И ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				ОрганизацияЗаказа                   = СтрокаТабличнойЧасти.ЗаказПокупателя.Организация;
				ДатаЗаказа                          = СтрокаТабличнойЧасти.ЗаказПокупателя.Дата;
			КонецЕсли;
			// Заполняем реквизиты табличной части.
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЕсли;
		
		Если ЕстьКолонкаЗаказ И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбработкаЗаполнения()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	//Сообщить("Кол 6 "+СтрокаТабличнойЧасти.Количество);// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	//Сообщить("Кол 7 "+СтрокаТабличнойЧасти.Количество);
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Удаление из меню лишних пунктов.
//
Процедура ОбновитьМенюКнопкиЗаполнить()

	Если мТерминалы.Количество() = 0 Тогда
		КнопкиПанелиТовары = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
		КнопкаИзТерминалаСбораДанных = КнопкиПанелиТовары.Найти("ИзТерминалаСбораДанных");
		Если КнопкаИзТерминалаСбораДанных <> Неопределено Тогда
			ИндексКнопкиИзТерминалаСбораДанных = КнопкиПанелиТовары.Индекс(КнопкаИзТерминалаСбораДанных);
			КнопкиПанелиТовары.Удалить(ИндексКнопкиИзТерминалаСбораДанных);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

//Проверяет необходимость рассчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()

	Если Не мРассчитыватьАвтоматическиеСкидки
	 Или Проведен
	 Или ((ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
	       Или ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю"))
	     И Не Сделка.Пустая()) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Очищает значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита, КромеУслуг = Ложь)
	
	// Очистим значения в строках
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	Если мИспользоватьТару Тогда
		Для Каждого Строка Из ВозвратнаяТара Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заменяет значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение, КромеУслуг = Ложь)
	
	// Заменим значения в строках
	Для Каждого Строка Из Товары Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
	Если мИспользоватьТару Тогда
		Для Каждого Строка Из ВозвратнаяТара Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет значение реквизита "Заказ покупателя" в табличных частях при изменении "Сделки".
//
Процедура ИзменитьЗаказВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() + Услуги.Количество() + ВозвратнаяТара.Количество()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если колонка заказ недоступна - очистим заказ в табличных частях и выходим
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента);
	
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
		Возврат;
	КонецЕсли;

	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Сделка) И НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если не "пустое значение" и не "заказ покупателя" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ТипЗнч(мСтароеЗначениеСделки) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка <> мСтароеЗначениеСделки Тогда // Изменен заказ в шапке
		
		// Получим список заказов из табличных частей документа
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "ЗаказПокупателя");
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Услуги, "ЗаказПокупателя", СписокЗаказов);
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "ЗаказПокупателя", СписокЗаказов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) Тогда
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокЗаказов.Количество() = 0 И ЗначениеЗаполнено(Сделка) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСделки = Документы.ЗаказПокупателя.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение заказа в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокЗаказов.НайтиПоЗначению(мСтароеЗначениеСделки) = Неопределено Тогда
			// В табличных частях есть строки со старым значением сделки
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				ТекстВопроса = "Очистить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение заказа");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("ЗаказПокупателя");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПокупателя", мСтароеЗначениеСделки, Сделка);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСделки = Сделка;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗаказВТабличнойЧасти()

// Изменяет значение реквизита "Склад" в табличных частях при изменении "Склада" в шапке.
//
Процедура ИзменитьСкладВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() + ВозвратнаяТара.Количество()) = 0 Тогда
		мСтароеЗначениеСклада = Склад;
		Возврат;
	КонецЕсли;
	
	Если НЕ мУказаниеСкладовВТЧ Тогда
		ОчиститьРеквизитВТабличныхЧастях("Склад", Истина);
		мСтароеЗначениеСклада = Склад;
	КонецЕсли;

	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСклада) И НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли;
	
	Если Склад <> мСтароеЗначениеСклада Тогда // Изменен склад в шапке
		
		// Получим список заказов из табличных частей документа
		СписокСкладов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "Склад");
		СписокСкладов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "Склад", СписокСкладов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСклада) Тогда
			мСтароеЗначениеСклада = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокСкладов.Количество() = 0 И ЗначениеЗаполнено(Склад) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСклада = Справочники.Склады.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение склада в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение склада");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("Склад", мСтароеЗначениеСклада, Склад, Истина);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокСкладов.НайтиПоЗначению(мСтароеЗначениеСклада) = Неопределено Тогда
			// В табличных частях есть строки со старым значением склада
			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				ТекстВопроса = "Очистить значение склада в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение склада");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("Склад", Истина);
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение склада в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение склада");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					// Заменим значения в строках на новое
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("Склад", мСтароеЗначениеСклада, Склад, Истина);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСклада = Склад;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьСкладВТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьМенюПроверить()

	Перем Кнопка;
	
	УстановитьДоступностьКнопкиПроверитьШтрихКоды();
	
	Кнопка = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если Кнопка.Кнопки.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность пункта "Штрих-коды" меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопкиПроверитьШтрихКоды()

	КнопкаПроверить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если мСерверТО.ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СканерШтрихКода,
	                                       Справочники.КассыККМ.ПустаяСсылка()).Количество() = 0 Тогда
		Кнопка = КнопкаПроверить.Кнопки.ШтрихКоды;
		КнопкаПроверить.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПроверитьШтрихКоды()

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
// Для оптового склада или услуг в рознице цена редактируется,
// Для товаров на розничном складе выбирается из списка наличия в регистре.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = мКолонкиТовары.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = Ложь;

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов И ОтражатьВУправленческомУчете;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	
	ЭлементыФормы.Сделка       .Доступность = ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
	ЭлементыФормы.НадписьСделка.Доступность = ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;

	// Видимость страници "Услуги"
	ЭтоКомиссия = (мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = НЕ ЭтоКомиссия;
	Внешнеэкономический = (ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	// Тары по внешнеэкономическому договору нет.
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = НЕ Внешнеэкономический;
	ВидимостьКолонкиПринятые = ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость     = Не ЭтоКомиссия; // Услуги на комиссию не отдаем.

	// Установка видимости колонок если отражаем в рег. учете.
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СчетУчетаБУ,         ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПринятыеСчетУчетаБУ, ПоказыватьВДокументахСчетаУчета И ВидимостьКолонкиПринятые И ОтражатьВБухгалтерскомУчете);

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПереданныеПринятыеБУ,    ПоказыватьВДокументахСчетаУчета И ВидимостьКолонкиПринятые И ОтражатьВБухгалтерскомУчете И ЭтоКомиссия);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПереданныеСобственныеБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И ЭтоКомиссия);

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СхемаРеализации, 	   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (НЕ ЭтоКомиссия));

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СчетУчетаБУ,     ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СхемаРеализации, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СхемаРеализации, 		   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.Подразделение.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделение.Видимость = ОтражатьВУправленческомУчете;
	
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость 			= ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (НЕ ЭтоКомиссия);
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость 	= ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (НЕ ЭтоКомиссия);
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость 				= ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (НЕ ЭтоКомиссия);
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость 		= ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (НЕ ЭтоКомиссия);
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.Видимость                 = ОтражатьВБухгалтерскомУчете И НЕ Внешнеэкономический;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре.Видимость          = ОтражатьВБухгалтерскомУчете И НЕ Внешнеэкономический;
	ЭлементыФормы.СчетУчетаРасчетовПоТареПоАвансам.Видимость        = ОтражатьВБухгалтерскомУчете И НЕ Внешнеэкономический;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТареПоАвансам.Видимость = ОтражатьВБухгалтерскомУчете И НЕ Внешнеэкономический;

	ВидимостьСпособаСписания = Ложь;
	Если НЕ ((ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование) ИЛИ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак) ИЛИ (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)) Тогда
		//видимость колонки ЗаказПокупателя определили ранее с помощью процедуры УстановитьВидимостьКолонкиЗаказ 
		ВидимостьКолонкиЗаказ = мКолонкиТовары.ЗаказПокупателя.Видимость;
		Если ВидимостьКолонкиЗаказ Тогда
			ВидимостьСпособаСписания = Истина;
		Иначе
			Если ЗначениеЗаполнено(Сделка) Тогда
				ВидимостьСпособаСписания = (Сделка.Метаданные().Имя = "ЗаказПокупателя");
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров, ВидимостьСпособаСписания);

	// Качество указывается только для брака
	ВидимостьКолонкиКачества = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Качество, ВидимостьКолонкиКачества);

	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	Флаг = ВозвратнаяТара.Количество() > 0 ИЛИ мИспользоватьТару;
	Флаг = Флаг И ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И НЕ Внешнеэкономический;
	
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.Видимость = Флаг;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре.Видимость = Флаг;
	ЭлементыФормы.СчетУчетаРасчетовПоТареПоАвансам.Видимость        = Флаг;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТареПоАвансам.Видимость = Флаг;

	ВидимостьРеквизитовНДС = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И НЕ ЭтоКомиссия И УчитыватьНДС И мТекущаяСхемаНалогообложения.НДС;
	ЭтоОборудование = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СчетУчетаНДС, ВидимостьРеквизитовНДС);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетУчетаНДС, ВидимостьРеквизитовНДС);
	
	ЭлементыФормы.СтатьяВаловыхДоходов.Видимость        = ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мТекущаяСхемаНалогообложения.НалогНаПрибыль;
	ЭлементыФормы.НадписьСтатьяВаловыхДоходов.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мТекущаяСхемаНалогообложения.НалогНаПрибыль;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ВидНалоговойДеятельности  , ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И (мТекущаяСхемаНалогообложения.НДС ИЛИ мТекущаяСхемаНалогообложения.НалогНаПрибыль));
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтатьяПриростаУбылиЗапасов, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мТекущаяСхемаНалогообложения.НалогНаПрибыль);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.УчитываетсяКакЗапасНУ     , ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мТекущаяСхемаНалогообложения.НалогНаПрибыль И ЭтоОборудование);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.ВидНалоговойДеятельности  , ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И (мТекущаяСхемаНалогообложения.НДС ИЛИ мТекущаяСхемаНалогообложения.НалогНаПрибыль));
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиВозвратнаяТара.СтатьяПриростаУбылиЗапасов, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мТекущаяСхемаНалогообложения.НалогНаПрибыль);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.ВидНалоговойДеятельности  , ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И (мТекущаяСхемаНалогообложения.НДС ИЛИ мТекущаяСхемаНалогообложения.НалогНаПрибыль));
	
	УстановитьАвтоОтметкуНезаполненногоДляСчетовУчетаРасчетовПоТаре();
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает видимость реквизитов, управления контролем взаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьКонтроляВзаиморасчетов()

	ФлагВидимости = УправлениеВзаиморасчетами.ЕстьРазрешениеПроводитьБезКонтроляВзаиморасчетов();

	ЭлементыФормы.РамкаКонтрольВзаиморасчетов.Видимость     = ФлагВидимости;
	ЭлементыФормы.ОтключитьКонтрольВзаиморасчетов.Видимость = ФлагВидимости;

КонецПроцедуры // УстановитьВидимостьКонтроляВзаиморасчетов()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
	(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для Склада
Процедура УстановитьАвтоотметкуСклада()

	Автоотметка = мАвтоОтметкаСклада 
	              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);

	ЭлементыФормы.Склад.АвтоотметкаНезаполненного = Автоотметка;
	
	Если ЭлементыФормы.Склад.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Склад) Тогда
		ЭлементыФормы.Склад.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает автоотметку незаполненного для счетов учета
// расчетов по таре
Процедура УстановитьАвтоОтметкуНезаполненногоДляСчетовУчетаРасчетовПоТаре()

	АвтоотметкаНезаполненного = (ВозвратнаяТара.Количество() > 0);

	ЭлементыФормы.СчетУчетаРасчетовПоТаре.АвтоОтметкаНезаполненного = АвтоотметкаНезаполненного;
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.ОтметкаНезаполненного     = АвтоотметкаНезаполненного И НЕ ЗначениеЗаполнено(СчетУчетаРасчетовПоТаре);
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.АвтоВыборНезаполненного   = АвтоотметкаНезаполненного;
	
КонецПроцедуры // УстановитьАвтоОтметкуНезаполненногоДляСчетовУчетаРасчетовПоТаре()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// Покажем цветом, что суммы еще могут изменится - пересчитаться при проведении/записи
	Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
		Если Модифицированность Тогда
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
		Иначе
			ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	Иначе	
		ЭлементыФормы.ВсегоНДС.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	КонецЕсли;
	
	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ЗаполнениеДокументов.ФорматСумм(Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")+Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ЗаполнениеДокументов.ФорматСумм(Товары.Итог("СуммаНДС")+Услуги.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + УправлениеВзаиморасчетами.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
						+ " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + УправлениеВзаиморасчетами.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		Если (АвторасчетНДС) И (НЕ мПерерасчетПроизведен) Тогда
			Если Модифицированность Тогда
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветРамки;
			Иначе
				ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
			КонецЕсли; 
		Иначе	
			ЭлементыФормы.Всего.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		КонецЕсли; 
	КонецЕсли;

    ПересчетСуммВзаиморасчетов();
	
КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
				Предупреждение("Документ ""Реализация товаров и услуг"" не оформляется на основании документа поступления объектов строительства.");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;

		// быть может, это ввод на основании заказа покупателя
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда

			Если ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда

				Предупреждение("Документ ""Реализация товаров и услуг"" не оформляется на основании заказа покупателя на переработку.");
				Отказ = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	//Видимость автоматических скидок.
	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(?(ЭтоНовый(),ТекущаяДата(),Дата), Отказ);
	Если мУчетнаяПолитика.ИспользоватьСкидкиПоКоличествуТовара
	 Или мУчетнаяПолитика.ИспользоватьСкидкиПоСуммеДокумента
	 Или мУчетнаяПолитика.ИспользоватьСкидкиПоВидуОплаты
	 Или мУчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;

	мКолонкиТовары.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	мТекПользователь=ИмяПользователя();
	//сообщить("Видимость 1 "+мКолонкиТовары.КолвоЗаказа.Видимость);
	//Если СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код)="" тогда
	//	 мКолонкиТовары.КолвоЗаказа.Видимость = Ложь;
	//	 //сообщить("Видимость 2 "+мКолонкиТовары.КолвоЗаказа.Видимость);
	// КонецЕсли;
	//Если СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код)="" тогда
	//	 мКолонкиТовары.КолвоЗаказа.Видимость = Ложь;
	//	 //сообщить("Видимость 2 "+мКолонкиТовары.КолвоЗаказа.Видимость);
	//КонецЕсли;
	// мКолонкиТовары.КолвоЗаказа.Видимость = Истина;
	//сообщить("Видимость 3 "+мКолонкиТовары.КолвоЗаказа.Видимость);
	//сообщить("Код "+СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код));
	мКолонкиУслуги.ПроцентАвтоматическихСкидок.Видимость = мРассчитыватьАвтоматическиеСкидки;
	ЭлементыФормы.ОсновнаяПанель.Страницы.АвтоматическиеСкидки.Видимость = мРассчитыватьАвтоматическиеСкидки;
    //ЭлементыФормы.ПолеДатыЗаявки=ТекущаяДата();
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	мСерверТО.ПодключитьКлиента(ЭтаФорма);
    мПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПриИзмененииСуммыПересчитыватьСкидку");

	Если ЭтоНовый() Тогда 

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета, "Продажа",ПараметрОбъектКопирования,ПараметрОснование);


		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		ЗаявкаДата=ТекущаяДата();
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
		СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
		СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
		СтатьяВаловыхДоходов             = СчетаУчета.СтатьяВаловыхДоходов;
		
	КонецЕсли;
    БухгалтерскийУчет.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	СтруктураКолонок.Вставить("Качество");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));


	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	//РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.Склад, "Склад",  мУказаниеСкладовВТЧ);

	//Запомним автоотметку поля шапки Склад
	мАвтоОтметкаСклада    = ЭлементыФормы.Склад.АвтоОтметкаНезаполненного;

	мВидДоговора                      = ДоговорКонтрагента.ВидДоговора;
	мПоДокументамРасчетов             = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, Неопределено, мКолонкиДокументы, ЭлементыФормы.Сделка);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьВидимостьКонтроляВзаиморасчетов();

	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ОбновитьМенюКнопкиЗаполнить();
	ПриИзмененииВидаСклада();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеПользователями.РазрешитьРедактированиеЦенВДокументах();

	мКолонкиТовары.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиТовары.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиВозвратнаяТара.Цена.ЭлементУправления.ТолькоПросмотр         = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиВозвратнаяТара.Сумма.ЭлементУправления.ТолькоПросмотр        = НЕ мМожноМенятьЦенуВДокументе;

	мКолонкиУслуги.Цена.ЭлементУправления.ТолькоПросмотр                 = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.Сумма.ЭлементУправления.ТолькоПросмотр                = НЕ мМожноМенятьЦенуВДокументе;
	мКолонкиУслуги.СуммаНДС.ЭлементУправления.ТолькоПросмотр             = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	мСклад = Склад;

	// Сохраним текущее значение сделки и склада
	мСтароеЗначениеСделки = Сделка;
	мСтароеЗначениеСклада = Склад;

	мМинимальныеЦены = Новый ТаблицаЗначений;
	мМинимальныеЦены.Колонки.Добавить("Номенклатура");
	мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
	мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
	мМинимальныеЦены.Колонки.Добавить("Цена");

	мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваПользователя(
					ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
					Неопределено);

	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельТовары);
	
	// проверка и показ заметок
	УправлениеКонтактами.ПроверитьЗаметкиПоДокументу(ЭтотОбъект);
	
	УстановитьДоступностьМенюПроверить();
	
	РаботаСДиалогами.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	РаботаСДиалогами.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	РаботаСДиалогами.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	//Если ЭтоНовый() Тогда
		ДействияФормыСбыт();  
	//КонецЕсли;
	
	ЭтотОбъект.РабочееМесто=ПараметрыСеанса.РабочееМесто.Ссылка;
	ЕстьПорты=Ложь;
	Если ПараметрыСеанса.РабочееМесто<>Справочники.РабочиеМеста.ПустаяСсылка() Тогда
		ЕстьПорты=ОпределитьНаличиеПортов(ПараметрыСеанса.РабочееМесто.Ссылка);
	КонецЕсли;
	ВесНаВесах=0;
	Элементыформы.Весы1.Доступность=Ложь;
	Если ЕстьПорты Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВидыОборудованияComПортов", Перечисления.ВидыОборудованияComПортов.Весы);
		НайденныеСтроки = ПараметрыСеанса.РабочееМесто.COMпорты.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			МояСтрока=НайденныеСтроки.Получить(0);
			ЭтотОбъект.Весы=МояСтрока.Название;
			ЭтотОбъект.COMПортВесов	=	МояСтрока.COMпорт;
			ТекущийПорт				=	МояСтрока.COMпорт;
			ТекущаяДЛЛ	  		  	  =	СокрЛП(МояСтрока.ВесовоеОборудование.СтрокаПутьDLL)+СокрЛП(МояСтрока.ВесовоеОборудование.DLL);
			ТекущийОбъектВесов	 	  =	МояСтрока.ВесовоеОборудование.Ссылка;
			ТекущаяСтрокаЗапросаВесов= МояСтрока.СтрокаОпроса;
			Если НайденныеСтроки.Количество()>1 Тогда
			  		Элементыформы.Весы1.Доступность=ИСТИНА;
			КонецЕсли;
		КонецЕсли;
		НомерОкнаВесов=0;
	КонецЕсли;
	//*********
	ЭлементыФормы.Товары.Колонки.СерияНоменклатуры.Видимость=Истина;
	ЭлементыФормы.Товары.Колонки.ХарактеристикаНоменклатуры.Видимость=ложь;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	мСерверТО.ОтключитьКлиента(ЭтаФорма);
//	ПодсчетИтоговыхКоличеств();
	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ЗаполнениеДокументов.ФорматСумм(ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование (", "Товары (");
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = ЗаголовокТовары + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.ДокументыРасчетовСКонтрагентом.Заголовок = "Предоплата (" + ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() + " поз.)";
	
	ЭлементыФормы.АдресДоставки.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);
	ЭлементыФормы.АдресДоставки1.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);

		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьТару Тогда
				ОбработкаЗаполнения(ВозвратнаяТара, ЗначениеВыбора.ВозвратнаяТара);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьУслуги Тогда
				ОбработкаЗаполнения(Услуги, ЗначениеВыбора.Услуги);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	//При проведении документа проверим возможность получения бонусов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Проведен Тогда
		ТолькоСерые = Неопределено;

		Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
			Если Не(ТолькоСерые И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "НеПредлагатьНеполныеСпецПредложения")) Тогда
				Ответ = Вопрос("В документе можно составить спец. предложения." + Символы.ПС + "Открыть форму подбора спец. предложений?", РежимДиалогаВопрос.ДаНет);

				Если Ответ = КодВозвратаДиалога.Да Тогда
					Ценообразование.РассчитатьНатуральныеСкидки("Товары", ЭтотОбъект, ЭтаФорма, Перечисления.ВидыСкидок.Оптовая);

					// Если пользователь отказался от выбора спец. предложения - вернемся к редактированию документа.
					Если Ценообразование.ЕстьСпецПредложения("Товары", ЭтотОбъект, ТолькоСерые, Перечисления.ВидыСкидок.Оптовая) Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		
		мОбновлятьВладельца = Истина;
		
	КонецЕсли;
	//ПодсчетИтоговыхКоличеств();
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Ценообразование.ПроверитьВозможностьЗаменыДисконтнойКарты(ЭтотОбъект, мУчетнаяПолитика);
	//ПодсчетИтоговыхКоличеств();
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	НовСтрокаТЧ=неопределено;
	Если Лев(Источник,8)="vk_rs232" И НомерОкнаВесов=4 И СокрЛП(Событие)<>"BarCodeValue" И
		ТекущийДокументВзвешивания=этотОбъект.Ссылка  
		//Лев(Источник,8)="vk_rs232" И НомерОкнаВесов=4 И ?(ПараметрыСеанса.РабочееМесто.Код="000000095" ИЛИ ПараметрыСеанса.РабочееМесто.Код="000000057",ИСТИНА,СокрЛП(Событие)<>"BarCodeValue") И
		//ТекущийДокументВзвешивания=этотОбъект.Ссылка  
		
		Тогда
		ВесНаВесах=РаботаСТорговымОборудованием.ПолучитьВесВнешнегоСобытия(ТекущийОбъектВесов,Источник,Данные);
		Если ВесНаВесах>0 Тогда
			Если КнопкаВесов=1 тогда
				СтрокаТабличнойЧасти.Количество  = ВесНаВесах-ЭлементыФормы.Тара.Значение;
				СтрокаТабличнойЧасти.Весы		 = ИСТИНА;
				СтрокаТабличнойЧасти.КоличествоПоВесам= ВесНаВесах;
				//СтрокаТабличнойЧасти.ДатаВремя	 = ТекущаяДата();
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
			ИначеЕсли КнопкаВесов=2 тогда
				СтрокаТабличнойЧасти.Количество  = СтрокаТабличнойЧасти.Количество	+	ВесНаВесах-ЭлементыФормы.Тара.Значение;
				СтрокаТабличнойЧасти.Весы		 = ИСТИНА;
				СтрокаТабличнойЧасти.КоличествоПоВесам= СтрокаТабличнойЧасти.КоличествоПоВесам+	ВесНаВесах;
				//СтрокаТабличнойЧасти.ДатаВремя	 = ТекущаяДата();
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
			ИначеЕсли КнопкаВесов=3 тогда
				СтрокаТабличнойЧасти.Количество	 = СтрокаТабличнойЧасти.Количество	-	(ВесНаВесах-ЭлементыФормы.Тара.Значение);
				СтрокаТабличнойЧасти.Весы		 = ИСТИНА;
				СтрокаТабличнойЧасти.КоличествоПоВесам= СтрокаТабличнойЧасти.КоличествоПоВесам-	ВесНаВесах;
				//СтрокаТабличнойЧасти.ДатаВремя	 = ТекущаяДата();
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
			Иначе
				//ничего не меняем
				Сообщить("Какая это кнопка весов?");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Лев(Источник,8)="vk_rs232" И 	?(ПараметрыСеанса.РабочееМесто.Код="000000095",ИСТИНА,СокрЛП(Событие)<>"BarCodeValue") 
		И ЛЕВ(СокрЛП(Данные),1)="R" Тогда //Данные	"R01W0002.2"	
		КнопкаВесов=1;
		ВзвешиваниеВоВнешнемСобытии(ТекущийОбъектВесов,Источник,Данные);
		
	ИначеЕсли Лев(Источник,8)="vk_rs232" И СокрЛП(Событие)="BarCodeValue" И ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя="Товары" И СтрДлина(Данные)=45 
		И ЭтаФорма.ДокументОбъект.Ссылка=этотОбъект.Ссылка  ТОгда	
		ОпределитьПартию(СокрЛП(Данные));
		ЭлементыФормы.Товары.ТекущаяСтрока=НовСтрокаТЧ;
//		Сообщить("ШКТовара "+Данные);
	КонецЕсли;
	КнопкаВесов=0;
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТабличнойЧасти<>Неопределено тогда
		ПриИзмененииКоличестваТовары(СтрокаТабличнойЧасти);
		ПриИзмененииНоменклатурыТовары(СтрокаТабличнойЧасти);
		ЭлементыФормы.Товары.ПроверитьСтроку(СтрокаТабличнойЧасти);
		ЭлементыФормы.Товары.ЗакончитьРедактированиеСтроки(СтрокаТабличнойЧасти);
	КонецЕсли;
	мСерверТО.ОбработатьВнешнееСобытие(Событие, Данные, ЭтаФорма);
КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.СчитывательМагнитныхКарт
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                мУказаниеСкладовВТЧ, ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СЧИТЫВАТЕЛЬ МАГНИТНЫХ КАРТ)

// Функция осуществляет обработку считывания информационной карты.
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Считанная ридером магнитная карта.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СМКИнформационнаяКарта(Карта, СМК) Экспорт

	Результат = Истина;

	Если РаботаСТорговымОборудованием.ПроверитьСообщитьЧтоКартаНеДисконтная(Карта) Тогда
		Возврат Результат;
	КонецЕсли;

	ДисконтнаяКарта = Карта;
	ПриИзмененииДисконтнойКарты();

	Возврат Результат;

КонецФункции // СМКИнформационнаяКарта()

// Функция осуществляет обработку считывания незарегистрированной магнитной карты.
//
// Параметры:
//  Код      - <Строка>
//           - Считанный код.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
//
Функция СМКНеизвестныйКод(Код, СМК) Экспорт

	Результат = Ложь;

	Возврат Результат;

КонецФункции // СМКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе с устройством
// для считывания магнитных карт.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  КодКарты - <Строка>
//           - Считанный код карты.
//
//  СМК      - <Строка>
//           - Идентификатор считывателя, с которым связано данное событие.
//
Процедура СМКОшибка(Ошибка, КодКарты, СМК) Экспорт

	Текст = РаботаСТорговымОборудованием.ПолучитьТекстОшибкиСМКТО(Ошибка, КодКарты);
	Предупреждение(Текст);

КонецПроцедуры // СМКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	РаботаСДиалогами.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров[Кнопка.Имя];
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
	
		// При виде операции оборудование вид договора должен быть с покупателем
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ПриИзмененииДоговора();
		КонецЕсли;
		
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, Неопределено, мКолонкиДокументы, ЭлементыФормы.Сделка);
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели

// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу(Кнопка)

	ЗаполнитьТабличнуюЧасть(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ЗаполнитьТоварыПоПоступлениюТоваровУпр(Поступление,"Оборудование");
	Иначе
		ЗаполнитьТоварыПоПоступлениюТоваровУпр(Поступление);
	КонецЕсли; 

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		РаботаСДиалогами.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	ПересчитатьАвтоматическиеСкидки();

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
		// Установим признак перерасчета сумм НДС
		мПерерасчетПроизведен = ИСТИНА;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки = РассчитыватьАвтоматическиеСкидки();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧастиТовары.мМинимальныеЦены           = мМинимальныеЦены;
	ФормаИзменениеТабличнойЧастиТовары.мСписокФильтров            = мСписокФильтров;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяСтрокаТовары = СтрокаТабличнойЧасти;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	мФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара" и выборе соответствующего подменю, 
// вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоЗаказу(Кнопка)

	ЗаполнитьТабличнуюЧасть(ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Возвратная тара", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПоступлению(Кнопка)
	
	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок = "Выберите документ поступления для заполнения документа реализации";
	ФормаПоступления.РежимВыбора = Истина;
	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	КонецЕсли;

	ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр(Поступление);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Обработка выполняется в транзакции. Она будет отменена, если заполнить не удалось
	НачатьТранзакцию();
	Отказ = Ложь;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Записать();
		НаборТоварыВРезервеНаСкладах = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыВРезервеНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыВРезервеНаСкладах.Записать();
		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Записать();
		НаборВзаиморасчетыСКонтрагентамиПоДокументамРасчетов = РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.СоздатьНаборЗаписей();
		НаборВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Отбор.Регистратор.Установить(Ссылка);
		НаборВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением(Отказ);

	// Если заполнить удалось, то запись документа с проведением

	НеПроведен = Ложь;
	Если НЕ Отказ Тогда
		Попытка
			Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
		Исключение
			НеПроведен = Истина;
		КонецПопытки;
	КонецЕсли;

	Если Отказ ИЛИ НеПроведен Тогда
		ОтменитьТранзакцию();
		Если НеПроведен Тогда
			Предупреждение("Операция не выполнена!");
		КонецЕсли;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли; 

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыДействиеСоздатьПакетДокументов(Кнопка)
	
	ФормаФормированияРеализаций = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма);
	ФормаФормированияРеализаций.Реализация = ЭтотОбъект;
	ФормаФормированияРеализаций.Открыть();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Открыть форму настройки ..." меню "Действия" командной панели формы,
// вызывает окрытие формы создания документов ПКО и счетов-фактур.
//
Процедура ДействияФормыДействиеСоздатьПакетДокументовСОткрытиемФормы(Кнопка)

	ФормаФормированияРеализаций = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма);
	ФормаФормированияРеализаций.Реализация = ЭтотОбъект;
	ФормаФормированияРеализаций.мПоказыватьФормуПринудительно = Истина;
	ФормаФормированияРеализаций.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	Перем ФормаОбработки;
	
	ФормаОбработки = Обработки.ПроверкаСерийныхНомеров.ПолучитьФорму(,ЭтаФорма,);
	Если ФормаОбработки = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось открыть форму проверки заполнения!");
	Иначе
		Если ФормаОбработки.Открыта() Тогда
			ФормаОбработки.Активизировать();
		Иначе
			ФормаОбработки.мПараметрыСвязиСтрокТЧ = мПараметрыСвязиСтрокТЧ;
			ФормаОбработки.мСклад = Склад;
			ФормаОбработки.ЗаполнитьТаблицу(ДокументОбъект);
			ФормаОбработки.Открыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	РаботаСДиалогами.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	ПересчитатьАвтоматическиеСкидки();
	
	мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);
	УстановитьВидимость();
	ЭтотОбъект.БазовыйМаршрут=УправлениеМаршрутами.ПолучитьБазовыйМаршрут(Контрагент,ВидАдреса,Дата);
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
    УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ОтражатьВНалоговомУчете = Ложь;
	Иначе
		ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	КонецЕсли;

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	Ответ = Вопрос(?(ОтражатьВБухгалтерскомУчете, "Установить", "Очистить") + 
					" реквизиты бухгалтерского и налогового учета" + 
					?(ОтражатьВБухгалтерскомУчете, " в соответствии со значениями по умолчанию?","?"), 
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета");

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() > 0 Тогда
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ЗаполнитьСчетаУчетаВТабЧастиУслуги(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		КонецЕсли;

		Если Элемент.Значение Тогда
			СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			
			Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			КонецЕсли;
			
			СчетУчетаРасчетовПоТаре          = СчетаУчета.СчетУчетаТарыПокупателя;
			СчетУчетаРасчетовПоТареПоАвансам = СчетаУчета.СчетАвансовПоТареПокупателя;
			
		Иначе

			ПустСчетБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаРасчетовПоАвансам     	= ПустСчетБУ;
			СчетУчетаРасчетовСКонтрагентом 	= ПустСчетБУ;
			СчетУчетаРасчетовПоТаре        	= ПустСчетБУ;
			СчетУчетаРасчетовПоТареПоАвансам = ПустСчетБУ;
		КонецЕсли;
		Если ОтражатьВНалоговомУчете Тогда
			СтатьяВаловыхДоходов	= СчетаУчета.СтатьяВаловыхДоходов;
		Иначе
			СтатьяВаловыхДоходов	= Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка(); 
		КонецЕсли;
	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ОтражатьВРегламентированномУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	Если Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() > 0 Тогда
		Ответ = Вопрос(?(ОтражатьВНалоговомУчете, "Установить", "Очистить") + 
						" реквизиты налогового учета" + 
						?(ОтражатьВНалоговомУчете, " в соответствии со значениями по умолчанию?","?"), 
						РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета");

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , Неопределено, ОтражатьВНалоговомУчете);
			ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", Неопределено, ОтражатьВНалоговомУчете);
			ЗаполнитьСчетаУчетаВТабЧастиУслуги(Неопределено, ОтражатьВНалоговомУчете);
			Если ОтражатьВНалоговомУчете Тогда
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
				СтатьяВаловыхДоходов	= СчетаУчета.СтатьяВаловыхДоходов;
			Иначе
				СтатьяВаловыхДоходов	= Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка(); 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		РаботаСДиалогами.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	РаботаСДиалогами.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	БухгалтерскийУчет.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
	
	мТекущаяСхемаНалогообложения = НалоговыйУчет.ПолучитьСхемуНалогообложения(Дата,Организация);
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	ПриИзмененииКонтрагента();
	ЭтотОбъект.БазовыйМаршрут=УправлениеМаршрутами.ПолучитьБазовыйМаршрут(Контрагент,ВидАдреса,Дата);    
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		
		// В этом случае еще не должно быть договоров "по заказам"
		СтруктураДополнительныхПараметров = Новый Структура();
		
		СписокПарам = Новый СписокЗначений;
		СписокПарам.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		СписокПарам.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ЗначениеОтбора", СписокПарам);
		СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
		
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
		
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                            СписокВидовДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров)
	Иначе
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Бартерный);
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        СписокВидовДоговоров, СтандартнаяОбработка);
	КонецЕсли;


КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСделки = Сделка;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		СтрокаТипа = "СчетНаОплатуПокупателю";
	Иначе
		СтрокаТипа = "ЗаказПокупателя";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента)
	   И ЗначениеЗаполнено(ДоговорКонтрагента.ВедениеВзаиморасчетов)
	   И ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
	   
		СтандартнаяОбработка = Ложь;
		
	   	СтруктураОтбора = Новый Структура;
	   	СтруктураОтбора.Вставить( "ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия);
	   	
		РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
							 "Приход", СтрокаТипа,СтруктураОтбора);		
	Иначе
	
		РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
							 "Приход", СтрокаТипа);
							 
	КонецЕсли;

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сделка
//
Процедура СделкаПриИзменении(Элемент)

	ПересчитатьАвтоматическиеСкидки();

	УстановитьВидимость();
	ИзменитьЗаказВТабличнойЧасти();
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
			БанковскийСчетОрганизации = Сделка.СтруктурнаяЕдиница;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода "Склад"
//
Процедура СкладПриИзменении(Элемент)

	ПриИзмененииВидаСклада();
	ИзменитьСкладВТабличнойЧасти();

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если Товары.Количество() + ВозвратнаяТара.Количество() + Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если мСклад.ВидСклада = Элемент.Значение.ВидСклада Тогда
		Возврат;
	КонецЕсли;

	Ответ = Вопрос(?(ОтражатьВБухгалтерскомУчете, "Установить", "Очистить") + 
					" реквизиты бухгалтерского и налогового учета" + 
					?(ОтражатьВБухгалтерскомУчете, " в соответствии со значениями по умолчанию?","?"), 
					РежимДиалогаВопрос.ДаНет, 
					, , 
					"Изменения реквизитов учета");

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

	мСклад = Склад;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДисконтнаяКарта".
//
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, СтандартнаяОбработка)

	УправлениеРозничнойТорговлей.НачалоВыбораИнформационнойКарты(Элемент, Перечисления.ТипыИнформационныхКарт.Дисконтная, СтандартнаяОбработка);

КонецПроцедуры // ДисконтнаяКартаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" реквизита "ДисконтнаяКарта".
//
Процедура ДисконтнаяКартаПриИзменении(Элемент)

	ПриИзмененииДисконтнойКарты();

КонецПроцедуры // ДисконтнаяКартаПриИзменении()

Процедура ГрузополучательПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = УправлениеВзаиморасчетами.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);
		АдресДоставки1 = УправлениеВзаиморасчетами.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);

	КонецЕсли;  
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" с фильтром по статьям
// декларации о прибыли
//
Процедура СтатьяВаловыхДоходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли,Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_РеализацияСырьяМатериалов);
	
КонецПроцедуры

Процедура СтатьяВаловыхДоходовАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.АвтоПодборТекстаСтатьяНалоговойДекларации(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора ,СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли,Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_РеализацияСырьяМатериалов);
	
КонецПроцедуры

Процедура СтатьяВаловыхДоходовОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОкончаниеВводаТекстаСтатьяНалоговойДекларации(Элемент, Текст, Значение, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли,Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_РеализацияСырьяМатериалов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, мСерверТО, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

	Если НоваяСтрока  Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
			СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    = Склад;
		КонецЕсли;
	КонецЕсли;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			// Ввод состава набора
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ПередУдалениемТовары(Элемент, Отказ);

КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части
// "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	ПослеУдаленияТовары(Элемент);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		УстановитьАвтоотметкуСклада();

		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ЗаполнениеДокументов.ФорматСумм(ТекСумма));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	РаботаСДиалогами.ПоказатьСуммуБезСкидок(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Цена, ДанныеСтроки.Количество);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// табличной части "Товары".
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры // ТоварыПриАктивизацииСтроки()

Процедура ТоварыПриИзмененииФлажка(Элемент, Колонка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если Колонка.Имя = "УчитываетсяКакЗапасНУ" Тогда
	
		СтатьяПоУмолчанию = Справочники.СтатьиНалоговыхДеклараций.НП_К1_1ОСкакЗапасы;
		
		НалоговыйУчет.ПроверитьСтатьюПриростаУбылиЗапасов(СтрокаТабличнойЧасти.СтатьяПриростаУбылиЗапасов,
		                                    СтрокаТабличнойЧасти.УчитываетсяКакЗапасНУ,
											Истина, Истина, СтатьяПоУмолчанию,
	                                        СтрокаТабличнойЧасти.Номенклатура, 
											Организация)
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТовары(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
    ПересчитатьАвтоматическиеСкидки();
	ПриИзмененииКоличестваТовары(Элемент);
    //ВсегоПоКолонкеКоличесво=Документ.Товары.Количество;
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура ТоварыПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"), РассчитыватьАвтоматическиеСкидки(),истина,мПересчитыватьСкидку,истина,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыПринятыеСчетУчетаБУНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Истина);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеСобственныеБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

 	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеПринятыеБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Истина);

КонецПроцедуры
// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "Приход", "ЗаказПокупателя" ,СтруктураОтбора);		
КонецПроцедуры

Процедура ТоварыСтатьяПриростаУбылиЗапасовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли, Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_СтатьиПриростаУбылиЗапасов);
	
КонецПроцедуры

Процедура ТоварыСтатьяПриростаУбылиЗапасовАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.АвтоПодборТекстаСтатьяНалоговойДекларации(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора ,СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли, Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_СтатьиПриростаУбылиЗапасов);
	
КонецПроцедуры

Процедура ТоварыСтатьяПриростаУбылиЗапасовОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОкончаниеВводаТекстаСтатьяНалоговойДекларации(Элемент, Текст, Значение, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли, Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_СтатьиПриростаУбылиЗапасов);
	
КонецПроцедуры

Процедура ТоварыСтатьяПриростаУбылиЗапасовПриИзменении(Элемент)
		
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	НалоговыйУчет.ПроверитьСтатьюПриростаУбылиЗапасов(СтрокаТабличнойЧасти.СтатьяПриростаУбылиЗапасов,
										СтрокаТабличнойЧасти.УчитываетсяКакЗапасНУ, Истина)
										
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Товары".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельТоварыДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Истина;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Истина;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.Склад = Склад;
	КонецЕсли;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьАвтоотметкуСклада();
	
	УстановитьАвтоОтметкуНезаполненногоДляСчетовУчетаРасчетовПоТаре();
	
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	
	УстановитьАвтоотметкуСклада();
	
	УстановитьАвтоОтметкуНезаполненногоДляСчетовУчетаРасчетовПоТаре();
	
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "Приход", "ЗаказПокупателя" ,СтруктураОтбора);		

КонецПроцедуры

Процедура ВозвратнаяТараСтатьяПриростаУбылиЗапасовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьяНалоговойДекларации(Элемент, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли, Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_СтатьиПриростаУбылиЗапасов);
	
КонецПроцедуры

Процедура ВозвратнаяТараСтатьяПриростаУбылиЗапасовАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.АвтоПодборТекстаСтатьяНалоговойДекларации(ЭтаФорма, Элемент, Текст, ТекстАвтоПодбора ,СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли, Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_СтатьиПриростаУбылиЗапасов);
	
КонецПроцедуры

Процедура ВозвратнаяТараСтатьяПриростаУбылиЗапасовОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОкончаниеВводаТекстаСтатьяНалоговойДекларации(Элемент, Текст, Значение, СтандартнаяОбработка, 
			Перечисления.ВидыНалоговыхДеклараций.ДекларацияОПрибыли, Справочники.НаборыСтатейНалоговыхДеклараций.ДекларацияОПрибыли_СтатьиПриростаУбылиЗапасов);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Возвратная тара".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельВозвратнаяТараДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Ложь;
			Форма.ПоказыватьТару   = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Ложь;
			Форма.ФлажокТара     = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура вызывается при нажатии кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказу(Кнопка)
	      
	ЗаполнитьТабличнуюЧасть(Услуги);

КонецПроцедуры  // КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПокупателя

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	
	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Товары".
//
Процедура УслугиПроцентРучнойСкидкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыПроцентРозничнойНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),,истина,мПересчитыватьСкидку,истина,"Услуги");
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры// УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "Приход", "ЗаказПокупателя" ,СтруктураОтбора);		
	
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;

	// Обнулим флаг при изменении табличной части
	мПерерасчетПроизведен = ЛОЖЬ;

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// выбор с фильтром по балансовым счетам
	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Услуги".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельУслугиДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары = Ложь;
			Форма.ПоказыватьУслуги = Истина;
			Форма.ПоказыватьТару   = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары   = Ложь;
			Форма.ФлажокУслуги   = Истина;
			Форма.ФлажокТара     = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ДоверенностьВыдана
//
Процедура ДоверенностьВыданаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.
	Список = Новый СписокЗначений();
	Список.Добавить(Контрагент.НаименованиеПолное);

	// Выбор из списка и обработка выбора.
	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.ДоверенностьВыдана);

	Если РезультатВыбора <> Неопределено Тогда
		ДоверенностьВыдана = РезультатВыбора.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Получил
//
Процедура ПолучилНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.
	Список = Новый СписокЗначений();
	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ПарКонтрагент", Контрагент);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КонтактныеЛица.Должность + "", "" + КонтактныеЛица.КонтактноеЛицо.Фамилия + "" "" + ПОДСТРОКА(КонтактныеЛица.КонтактноеЛицо.Имя, 1, 1) + ""."" + ПОДСТРОКА(КонтактныеЛица.КонтактноеЛицо.Отчество, 1, 1) + ""."" КАК ДолжностьФИО
	|ИЗ
	|	Справочник.КонтактныеЛицаКонтрагентов КАК КонтактныеЛица
	|ГДЕ
	|	КонтактныеЛица.Владелец = &ПарКонтрагент
	|УПОРЯДОЧИТЬ ПО
	|	ДолжностьФИО
	|";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.ДолжностьФИО);
	КонецЦикла;

	// Выбор из списка и обработка выбора.
	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.Получил);

	Если РезультатВыбора <> Неопределено Тогда
		Получил = РезультатВыбора.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

//***	УправлениеВзаиморасчетами.ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
//***
	УправлениеВзаиморасчетами.ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	АдресДоставки =УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);
	Запрос =  новый Запрос;
	Если СокрЛП(ЭтотОбъект.АдресДоставки) <> "" тогда
				МойАдрес=ЭтотОбъект.АдресДоставки;
				СтруктураАдреса =УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СокрЛП(ЭтотОбъект.АдресДоставки));
				
				МойАдрес=УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) ;
				Запрос.УстановитьПараметр("Адрес","%"+СокрЛП(МойАдрес)+"%");			
				Запрос.УстановитьПараметр("Объект",ЭтотОбъект.Контрагент);			
                Запрос.УстановитьПараметр("НаименованиеВида","%Адрес доставки%");			
				Запрос.Текст = "ВЫБРАТЬ
                               |    КонтактнаяИнформация.Объект,
                               |    КонтактнаяИнформация.Тип,
                               |    КонтактнаяИнформация.Вид.Наименование КАК Вид,
                               |    КонтактнаяИнформация.Представление,
                               |    КонтактнаяИнформация.Менеджер,
                               |    КонтактнаяИнформация.Вид КАК ВидАдреса
                               |ИЗ
                               |    РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
                               |ГДЕ
                               |    КонтактнаяИнформация.Представление ПОДОБНО &Адрес
                               |    И КонтактнаяИнформация.Объект = &Объект
                               |    И КонтактнаяИнформация.Вид.Наименование ПОДОБНО &НаименованиеВида";
				ВыборкаАдресов = Запрос.Выполнить();
				Если  ВыборкаАдресов.Пустой() тогда
					Сообщить("Нет в списке адресов доставки такого адреса! ");
				Иначе
					Адреса=ВыборкаАдресов.Выбрать();
					Адреса.Следующий(); 
					НомерАдреса="";
				 	НомерАдреса1=ПРАВ(СокрЛП(Адреса.Вид),3);
					Если Адреса.Менеджер<>Справочники.Контрагенты.ПустаяСсылка() тогда
						ЭтотОбъект.Реализатор=Адреса.Менеджер;
					КонецЕсли;
					Если Адреса.ВидАдреса<>Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() тогда
						ЭтотОбъект.ВидАдреса=Адреса.ВидАдреса;
					КонецЕсли;
					ЭтотОбъект.БазовыйМаршрут=УправлениеМаршрутами.ПолучитьБазовыйМаршрут(Контрагент,ВидАдреса,Дата);
					Для а = 1 По СтрДлина(НомерАдреса1) Цикл
							КодСимвола = КодСимвола(Сред(НомерАдреса1, а, 1));
							Если  (КодСимвола >= 48 И КодСимвола <= 57) Тогда
								//Сообщить(Сред(НомерАдреса1, а, 1));
								НомерАдреса=НомерАдреса+Сред(НомерАдреса1, а, 1);
							КонецЕсли; 
					КонецЦикла; 
					Если СокрЛП(НомерАдреса)="" тогда
							Предупреждение("Вид адреса не соответствует установленным правилам!",15);	
							ЭтотОбъект.АдресДоставки="";
					КонецЕсли;
				КонецЕсли;
	КонецЕсли;			
КонецПроцедуры

// Процедура - обработчик события "Открытие" элемента формы АдресДоставки
Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеВзаиморасчетами.РедактированиеАдресаДоставки(АдресДоставки, Элемент);
КонецПроцедуры

// Процедура - обработчик события "Обработка выбора" элемента формы АдресДоставки
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ВыбранноеЗначение);
	АдресДоставки1 = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы АдресДоставки
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставки = "";
	АдресДоставки1 = "";
	ДополнениеКАдресуДоставки = "";
КонецПроцедуры

Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");

КонецПроцедуры

Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ВозвратнаяТараПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара");
	
КонецПроцедуры

Процедура ВозвратнаяТараПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "ВозвратнаяТара", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	
КонецПроцедуры

Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеОтношениямиСПоставщикамиИПокупателями.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроизводством.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура открывате журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывате журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура - обработчик события "ПриСменеСтраницы" основной панели.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "АвтоматическиеСкидки" Тогда
		ТаблицаАвтоСкидок.Очистить();

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Товары, ТаблицаАвтоСкидок);
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Услуги, ТаблицаАвтоСкидок);

		КоличествоСтрок = ТаблицаАвтоСкидок.Количество() - 1;
		Для Тмп = 0 По КоличествоСтрок Цикл
			ТекСтрока = ТаблицаАвтоСкидок[КоличествоСтрок - Тмп];

			Если ТекСтрока.ПроцентАвтоматическихСкидок = 0 Тогда
				ТаблицаАвтоСкидок.Удалить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

// Процедура - обработчик события "ПослеУдаления" ТЧ "Услуги".
//
Процедура УслугиПослеУдаления(Элемент)

	ПересчитатьАвтоматическиеСкидки();

КонецПроцедуры // УслугиПослеУдаления()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ "Услуги".
//
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если Не ОтменаРедактирования Тогда
		ПересчитатьАвтоматическиеСкидки();
	КонецЕсли;

КонецПроцедуры // УслугиПриОкончанииРедактирования()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		мСерверТО.ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура - обработчик события "ПриВыводеСтроки" в ТЧ "Услуги".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиУслуги.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ЗаполнениеДокументов.ФорматСумм(ТекСумма));
	КонецЕсли;

КонецПроцедуры // УслугиПриВыводеСтроки()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные.Сделка,
	                          СтандартнаяОбработка, "","ЗаказПокупателя");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОформитьДокументы" в верхней командной панели.
//
Процедура ДействияФормыОформитьДокументы(Кнопка)

	ФормаФормированияПакетаДокументов = ПолучитьФорму("ФормаФормированияПакетаДокументов", ЭтаФорма);
	ФормаФормированияПакетаДокументов.Реализация = ЭтотОбъект;
	ФормаФормированияПакетаДокументов.Открыть();

КонецПроцедуры // ДействияФормыОформитьДокументы()

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

Процедура КонтрагентНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение.Пустая() Тогда
		СтандартнаяОбработка=Ложь;
		ФормаВыбора=Справочники.Контрагенты.ПолучитьФормуВыбора(,Элемент);
		ФормаВыбора.ВыборПокупателя=Истина;
		ФормаВыбора.Открыть();
	КонецЕсли;
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПриИзмененииТоварыВесы(Элемент)
	Взвесить();
КонецПроцедуры // ТоварыКоличествоПриИзменении()

Процедура ПодсчетИтоговыхКоличеств()
	//СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;	
	//ВсегоЗаказ=Товары.Итог("КоличествоЗаказа");
	//ПриЗакрытии  
	возврат;
	ВсегоЗаказ=0;  
	ВсегоСуммаЗаказ=0;  
	ВсегоТоваров=0;  
	ИтогСуммаМенеджера=0;
	
	ВсегоЗаказ=Товары.Итог("КоличествоЗаявки");
	ВсегоСуммаЗаказ=Товары.Итог("СуммаЗаказа");
	ВсегоТоваров=Товары.Итог("Количество");
	ИтогСуммаМенеджера=Товары.Итог("СуммаМенеджера");
	
Если ЭтотОбъект.Заблокирован() тогда
	    // Сообщить(" 1 ");
		 ЭтотОбъект.Разблокировать();
		 Если ЭтотОбъект.Модифицированность() тогда
			 ЭтотОбъект.ИтогоКоличествоЗаявки=ВсегоЗаказ;
			 ЭтотОбъект.ИтогоСуммаЗаявки=ВсегоСуммаЗаказ;
			 ЭтотОбъект.ИтогоКоличествоТовара=ВсегоТоваров;
			 //ЭтотОбъект.ИтогоКоличествоТары=ВсегоТара;
			 ЭтотОбъект.СуммаИтогМенеджера=ИтогСуммаМенеджера;
			Попытка
				//Сообщить(" 2 ");
				ЭтотОбъект.Записать();
			Исключение
    			Предупреждение("Невозможно записать итоговые данные по количествам в документ.");
			КонецПопытки;
		КонецЕсли;
Иначе
		 Если ЭтотОбъект.Модифицированность() тогда
			ЭтотОбъект.ИтогоКоличествоЗаявки=ВсегоЗаказ;
			ЭтотОбъект.ИтогоСуммаЗаявки=ВсегоСуммаЗаказ;
			ЭтотОбъект.ИтогоКоличествоТовара=ВсегоТоваров;			 
			//ЭтотОбъект.ИтогоКоличествоТары=ВсегоТара;
			ЭтотОбъект.СуммаИтогМенеджера=ИтогСуммаМенеджера;
			Попытка
				//Сообщить(" 3 ");
				ЭтотОбъект.Записать();
			Исключение
    			Предупреждение("Невозможно записать итоговые данные по количествам в документ.");
			КонецПопытки;
		Иначе
			//Сообщить(" 4 ");
			ЭтотОбъект.ИтогоКоличествоЗаявки=ВсегоЗаказ;
			ЭтотОбъект.ИтогоСуммаЗаявки=ВсегоСуммаЗаказ;
			ЭтотОбъект.ИтогоКоличествоТовара=ВсегоТоваров;
			//ЭтотОбъект.ИтогоКоличествоТары	=ВсегоТара;
			ЭтотОбъект.СуммаИтогМенеджера	=ИтогСуммаМенеджера;
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	//ЭлементыФормы.НадписьИтогоЗаказа.Заголовок= "Итого заказа:"+СокрЛП(ДокументОбъект.ИтогоКоличествоЗаявки)+" кг.  на "+ СокрЛП(ДокументОбъект.ИтогоСуммаЗаявки)+" грн.";

КонецПроцедуры

Процедура ОсновныеДействияФормыЗакончить(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДействияФормыСбыт()
	// Вставить содержимое обработчика.
	мТекПользователь=ИмяПользователя();
	//мКолонкиТовары.КолвоЗаказа.Видимость = Ложь;
	//мКолонкиТовары.Порции.Видимость = Ложь;
	Если СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код)="001" тогда
		 //мКолонкиТовары.КолвоЗаказа.Доступность= Ложь;
		 мКолонкиТовары.Цена.Доступность= Ложь;
		 мКолонкиТовары.Сумма.Доступность= Ложь;
		 мКолонкиТовары.СуммаНДС.Доступность =Ложь;
		 мКолонкиТовары.СтавкаНДС.Доступность =Ложь;
		 мКолонкиТовары.СуммаНДС.Доступность =Ложь;
		 //мКолонкиТовары.ЕдиницаИзмерения.Доступность =Ложь;
		 //мКолонкиТовары.ЕдиницаИзмеренияМест.Доступность =Ложь;
 		 мКолонкиТовары.Коэффициент.Доступность =Ложь;
		 мКолонкиТовары.ПроцентСкидкиНаценки.Доступность =Ложь;
		 мКолонкиТовары.ПроцентСкидкиНаценки.Видимость=Ложь;
		 //мКолонкиТовары.СуммаМенеджера.Видимость=Ложь;
		 мКолонкиТовары.СтавкаНДС.Видимость=Ложь;
		 мКолонкиТовары.СуммаНДС.Видимость=Ложь;
		 
		 //мКолонкиТовары.СуммаМенеджера.ПроцентАвтоматическихСкидок.Видимость=Ложь;
		 //сообщить("Видимость - должы быть "+мКолонкиТовары.КолвоЗаказа.Доступность);
	КонецЕсли;
	//Если СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код)="002" ИЛИ СокрЛП(мТекПользователь)=СокрЛП("Администратор")  ИЛИ СокрЛП(мТекПользователь)=СокрЛП("Denis")  ИЛИ СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код)="001"  тогда
		 //ПараметрыПользователя = новый Структура;
	//мКолонкиТовары.КолвоЗаказа.Видимость = Истина;
	//мКолонкиТовары.Порции.Видимость = Истина;
	СвойствоДата=СокрЛП("Дата отгрузки при оформлении заявке от покупателя");
	ОтборДата = Новый Структура; 
	ОтборДата.Вставить("Пользователь", Справочники.Пользователи.НайтиПоНаименованию(СокрЛП(мТекПользователь))); 
	ОтборДата.Вставить("Настройка", ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию(СокрЛП(СвойствоДата))); 
	РезультатДата= РегистрыСведений.НастройкиПользователей.Получить(ОтборДата); 
	
	Если ЭтоНовый() Тогда
		Дата=ТекущаяДата();
		ДатаНовая=ТекущаяДата();
		ДатаОтгрузки=ТекущаяДата();
		ДатаОтгрузки=РезультатДата.Значение; 
		//***!!!  
		ТекущееВремя=Формат(ТекущаяДата(),"ДЛФ=В");
		//***!!!
		//Сообщить("ДатаОтгрузки "+ ДатаОтгрузки);
		//Сообщить("ДатаНовая "+ ДатаНовая);
		Если  ДатаОтгрузки<>Дата(1, 1, 1)  И ДатаОтгрузки<>NULL И СокрЛП(ДатаОтгрузки)<>"" Тогда
			Если ДатаОтгрузки>ДатаНовая Тогда
				//***!!!
				Дата=Дата(Формат(Дата(ДатаОтгрузки),"ДФ=dd.MM.yyyy")+" "+Строка(ТекущееВремя));         
				//***!!! 	 
			 Иначе
				 Дата=ТекущаяДата();
			КонецЕсли;
		Иначе
			  Дата=ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	//ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоКоду("00000000135").
	//сообщить("Дата "+СокрЛП(Справочники.Пользователи.НайтиПоНаименованию(мТекПользователь).Родитель.Код));
	//сообщить("Дата "+Дата);
	//КонецЕсли;
	//до уточнения необходимости прятать
	//мКолонкиТовары.КолвоЗаказа.Видимость = Истина;
	//мКолонкиТовары.Порции.Видимость = Истина;
КонецПроцедуры

Процедура ТоварыКолвоЗаказаПриИзменении(Элемент)
	ТекущаяСтрокаТЧ=ЭлементыФормы.Товары.ТекущаяСтрока;
	ТекущаяСтрокаТЧ.СуммаЗаказа=ТекущаяСтрокаТЧ.КоличествоЗаявки*ТекущаяСтрокаТЧ.Цена;
КонецПроцедуры

Процедура ВесыПриИзменении(Элемент)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Название", СокрЛП(ЭтотОбъект.Весы));
	ПараметрыОтбора.Вставить("ВидыОборудованияComПортов", Перечисления.ВидыОборудованияComПортов.Весы);
	НайденныеСтроки = ПараметрыСеанса.РабочееМесто.COMпорты.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()>0  Тогда
		ЭтотОбъект.COMПортВесов	=	НайденныеСтроки[0].COMпорт;
		ТекущаяДЛЛ	  		 	=	СокрЛП(НайденныеСтроки[0].ВесовоеОборудование.СтрокаПутьDLL)+СокрЛП(НайденныеСтроки[0].ВесовоеОборудование.DLL);
		ТекущийОбъектВесов	 	=	НайденныеСтроки[0].ВесовоеОборудование.Ссылка;
		ТекущаяСтрокаЗапросаВесов= 	НайденныеСтроки[0].СтрокаОпроса;
		//Сообщить(ТекущаяДЛЛ+" "+ТекущийОбъектВесов+" "+ТекущаяСтрокаЗапросаВесов);
	КонецЕсли;
КонецПроцедуры

Процедура ВесыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СписокВесов = Новый СписокЗначений;
	Шаг=0;
	Пока Шаг<ПараметрыСеанса.РабочееМесто.COMпорты.Количество() Цикл
		Если ПараметрыСеанса.РабочееМесто.COMпорты[Шаг].ВидыОборудованияComПортов=Перечисления.ВидыОборудованияComПортов.Весы тогда
			СписокВесов.Добавить(ПараметрыСеанса.РабочееМесто.COMпорты[Шаг].Название);
		КонецЕсли;
		Шаг=Шаг+1;
	КонецЦикла;
	Элемент.СписокВыбора= СписокВесов;
КонецПроцедуры
    
Процедура ВесыПлюсНажатие(Элемент)
ВесНаВесах=0;
КнопкаВесов=2;
НомерОкнаВесов=4;
ТекущийДокументВзвешивания=этотОбъект.Ссылка;
ВесНаВесах=РаботаСТорговымОборудованием.ОпроситьВесы(ТекущийОбъектВесов,ТекущийПорт);
Если ВесНаВесах>0 тогда
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	//СтрокаТабличнойЧасти.ДатаВремя=ТекущаяДата();
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество+ВесНаВесах-ЭлементыФормы.Тара.Значение;
	СтрокаТабличнойЧасти.Весы=СтрокаТабличнойЧасти.Весы+ВесНаВесах;
	СтрокаТабличнойЧасти.КоличествоПоВесам=СтрокаТабличнойЧасти.КоличествоПоВесам+ВесНаВесах;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
КонецЕсли;

КонецПроцедуры

Процедура ВесыМинусНажатие(Элемент)
ВесНаВесах=0;
КнопкаВесов=3;
НомерОкнаВесов=4;
ТекущийДокументВзвешивания=этотОбъект.Ссылка;
ВесНаВесах=РаботаСТорговымОборудованием.ОпроситьВесы(ТекущийОбъектВесов,ТекущийПорт);
Если ВесНаВесах>0 тогда
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество=СтрокаТабличнойЧасти.Количество-(ВесНаВесах-ЭлементыФормы.Тара.Значение);
	СтрокаТабличнойЧасти.Весы=СтрокаТабличнойЧасти.Весы-ВесНаВесах;
	СтрокаТабличнойЧасти.КоличествоПоВесам=СтрокаТабличнойЧасти.КоличествоПоВесам-ВесНаВесах;
	//СтрокаТабличнойЧасти.ДатаВремя=ТекущаяДата();
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
КонецЕсли;
КонецПроцедуры

Процедура ВзвешиваниеВоВнешнемСобытии(ТекущийОбъектВесов,Источник,Данные)
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;	
		ВесНаВесах=РаботаСТорговымОборудованием.ПолучитьВесВнешнегоСобытия(ТекущийОбъектВесов,Источник,Данные);
		Если ВесНаВесах>0 Тогда
			Если КнопкаВесов=1 тогда
				СтрокаТабличнойЧасти.Количество  = ВесНаВесах-ЭлементыФормы.Тара.Значение;
				СтрокаТабличнойЧасти.Весы		 = ИСТИНА;
				СтрокаТабличнойЧасти.КоличествоПоВесам= ВесНаВесах;
				//СтрокаТабличнойЧасти.ДатаВремя	 = ТекущаяДата();
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
			Иначе
				//ничего не меняем
				Сообщить("Какая это кнопка весов?");
			КонецЕсли;
		КонецЕсли;
		ЭлементыФормы.Товары.ТекущаяСтрока=СтрокаТабличнойЧасти;
КонецПроцедуры

Процедура ОпределитьПартию(ШтрихКод)
	//ШтрихКод="010023130003381303230011681303231035510032500";
	Если  СтрДлина(ШтрихКод)=45 Тогда
		Партия	=	Лев(ШтрихКод,26);
		ТипДокумента	=Лев(Партия,2);
		КодКонтрагента	=Формат(Число(Сред(Партия,3,6)),"ЧЦ=9; ЧДЦ=0; ЧВН=; ЧГ=0");
		НомерДокумента	=Формат(Число(Сред(Партия,9,6)),"ЧЦ=11; ЧДЦ=0; ЧВН=; ЧГ=0");
		ДатаДокумента	=Дата(Сред(Партия,15,2),Сред(Партия,17,2),Сред(Партия,19,2));
		КодТовара=Формат(Число(Сред(Партия,21,6)),"ЧЦ=11; ЧДЦ=0; ЧВН=; ЧГ=0");
		ДВ=Дата(Сред(ШтрихКод,27,2),Сред(ШтрихКод,29,2),Сред(ШтрихКод,31,2),Сред(ШтрихКод,33,2),Сред(ШтрихКод,35,2),Сред(ШтрихКод,37,2));
		Вес=Число(Прав(ШтрихКод,7))/1000;
	Иначе
		Предупреждение("Штрих-код не соответствует стандарту"); 
		возврат;
	КонецЕсли; 
	СН=Справочники.СерииНоменклатуры.НайтиПоНаименованию(СокрЛП(Партия));
	Если  не СН = неопределено И СН<>Справочники.СерииНоменклатуры.ПустаяСсылка() Тогда
		НовСтрока=Товары.Добавить();
		НовСтрока.СерияНоменклатуры=СН;
		НовСтрока.Количество=Макс(0,Вес-ЭлементыФормы.ПолеВводаСуммаМенеджера.Значение);
		НовСтрока.СуммаЗаказа=ЭлементыФормы.ПолеВводаСуммаМенеджера;
		//НовСтрока.КоличествоСравнения=Вес-ЭтаФорма.ВесТары;//***КоличествоЗаказа
		НовСтрока.КоличествоЗаявки=Вес;
		НовСтрока.Номенклатура		= Справочники.Номенклатура.НайтиПоКоду(КодТовара);
		НовСтрока.ЕдиницаИзмерения	= Справочники.Номенклатура.НайтиПоКоду(КодТовара).ЕдиницаХраненияОстатков;
		НовСтрока.Качество			= Справочники.Качество.Новый;
		НовСтрока.Коэффициент		= 1;
	КонецЕсли; 
	ЭтотОбъект.Записать();
	НовСтрокаТЧ=НовСтрока;
	Если ЗначениеЗаполнено(ЭтотОбъект.Весы) тогда
		ПолучитьВесНовогоНаименования(НовСтрока);
	КонецЕсли;	
КонецПроцедуры

////***AL18.10.2011 10:53:44
Процедура Весы1Нажатие(Элемент)
	Взвесить();
КонецПроцедуры

Процедура Взвесить()
ВесНаВесах=0;
КнопкаВесов=1;
НомерОкнаВесов=4;
ТекущийДокументВзвешивания=этотОбъект.Ссылка;
ВесНаВесах=РаботаСТорговымОборудованием.ОпроситьВесы(ТекущийОбъектВесов,ТекущийПорт);
Если ВесНаВесах>0 тогда
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Количество=ВесНаВесах-СтрокаТабличнойЧасти.СуммаЗаказа - ЭлементыФормы.Тара.Значение ;
	СтрокаТабличнойЧасти.Весы=ВесНаВесах;
	СтрокаТабличнойЧасти.КоличествоПоВесам=ВесНаВесах;
	//СтрокаТабличнойЧасти.ДатаВремя=ТекущаяДата();
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
КонецЕсли;	
КонецПроцедуры

Процедура ПолучитьВесНовогоНаименования(НовСтрока)
ВесНаВесах=РаботаСТорговымОборудованием.ОпроситьВесы(ТекущийОбъектВесов,ТекущийПорт);
Если ВесНаВесах>0 тогда
	НовСтрока.Количество=ВесНаВесах-НовСтрока.СуммаЗаказа;
	НовСтрока.Весы=ВесНаВесах;
	НовСтрока.КоличествоПоВесам=ВесНаВесах;
	//НовСтрока.ДатаВремя=ТекущаяДата();
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НовСтрока, ДокументОбъект);
КонецЕсли;	
	
КонецПроцедуры	

Процедура ЯщикНажатие(Элемент)
	ДобавитьЯщик("00000001910");
КонецПроцедуры

Процедура ДобавитьЯщик(КодЯщика)
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", Справочники.Номенклатура.НайтиПоКоду(КодЯщика));
	НайденныеСтроки = ВозвратнаяТара.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество()>0 тогда
		ЭлементыФормы.ВозвратнаяТара.ТекущаяСтрока=НайденныеСтроки[0];
		МояСтрока=ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		МояСтрока.Количество=МояСтрока.Количество+?(ЭлементыФормы.ФлажокМинусТары.Значение=Ложь,1,-1);
		МояСтрока.Сумма=МояСтрока.Цена *МояСтрока.Количество;
	ИначеЕсли НайденныеСтроки.Количество()=0 И ЭлементыФормы.ФлажокМинусТары.Значение=Ложь тогда
		НовыйЯщик=ЭтотОбъект.ВозвратнаяТара.Добавить() ;
		НовыйЯщик.Количество=1;
		НовыйЯщик.Номенклатура=Справочники.Номенклатура.НайтиПоКоду(КодЯщика);
		НовыйЯщик.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		//НовыйЯщик.СтатьяПриростаУбылиЗапасов=Справочники.СтатьиНалоговыхДеклараций..;
		НовыйЯщик.СхемаРеализации=Справочники.СхемыРеализации.Товары;
		НовыйЯщик.СчетУчетаБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("281");
		НовыйЯщик.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(НовыйЯщик.Номенклатура, ,
		Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"), ДокументОбъект.Дата, НовыйЯщик.Номенклатура.ЕдиницаХраненияОстатков,
		ДокументОбъект.ВалютаДокумента,
		1,
		1, ,
		ДоговорКонтрагента,
		);
		НовыйЯщик.Сумма=НовыйЯщик.Цена *НовыйЯщик.Количество;
	КонецЕсли;
//*****	
	//НовыйЯщик=ЭтотОбъект.ВозвратнаяТара.Добавить() ;
	//НовыйЯщик.Количество=1;
	//
	//НовыйЯщик.СпособСписанияОстаткаТоваров=Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	////НовыйЯщик.СтатьяПриростаУбылиЗапасов=Справочники.СтатьиНалоговыхДеклараций..;
	//НовыйЯщик.СхемаРеализации=Справочники.СхемыРеализации.Товары;
	//НовыйЯщик.СчетУчетаБУ=ПланыСчетов.Хозрасчетный.НайтиПоКоду("281");
	//НовыйЯщик.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(НовыйЯщик.Номенклатура, ,
	//									Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001"), ДокументОбъект.Дата, НовыйЯщик.Номенклатура.ЕдиницаХраненияОстатков,
	//									ДокументОбъект.ВалютаДокумента,
	//									1,
	//									1, ,
	//									ДоговорКонтрагента,
	//									);
	//НовыйЯщик.Сумма=НовыйЯщик.Цена *НовыйЯщик.Количество;
КонецПроцедуры


	

//Процедура ЗаписатьСерию()
//	Если ЭтоНовый() тогда
//		ЭтотОбъект.Записать();
//	КонецЕсли;
//	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;                                                                                                                        //СтрокаТабличнойЧасти.ДатаВремя
//	СтрокаТабличнойЧасти.СерияНоменклатуры=УправлениеРаботойСоСтикером.СоздатьПартию("02",ЭтотОбъект.Склад.Код,ЭтотОбъект.Номер,ЭтотОбъект.Дата,СтрокаТабличнойЧасти.Номенклатура.Код,ТекущаяДата());
//КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбновлятьВладельца = Ложь;


мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги         = ЭлементыФормы.Услуги.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиДокументы      = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;

мРазрешитьНулевыеЦеныВОпте    = УправлениеПользователями.РазрешитьНулевыеЦеныВОпте();
мРазрешитьНулевыеЦеныВРознице = УправлениеПользователями.РазрешитьНулевыеЦеныВРознице();

мТекущееКоличествоТоваров = Товары.Итог("Количество");


мСерверТО                  = ПолучитьСерверТО();
мТерминалы                 = мСерверТО.ПолучитьСписокУстройств(
                                 Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных,
                                 Справочники.КассыККМ.ПустаяСсылка());

мКолонкиТовары.СпособСписанияОстаткаТоваров.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва);
мКолонкиТовары.СпособСписанияОстаткаТоваров.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СпособыСписанияОстаткаТоваров.СоСклада);

мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва);
мКолонкиВозвратнаяТара.СпособСписанияОстаткаТоваров.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СпособыСписанияОстаткаТоваров.СоСклада);

// Признак перерасчета сумм НДС с учетом ошибок округления
мПерерасчетПроизведен = ЛОЖЬ; 
