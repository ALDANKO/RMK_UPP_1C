Перем мУдалятьДвижения;
Перем СП_ТЗ;
Перем мИспользоватьТару Экспорт;
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мОткрыватьФормаЗаполненияПоЗаказу Экспорт;
Перем мПараметрыСвязиСтрокТЧ Экспорт;
Перем мЕстьКолонкаСерии;
Перем мСтруктураПараметровВзаиморасчетов Экспорт;
Перем мУказаниеСкладов ;
Перем мУказаниеСкладовВТЧ Экспорт;
Перем ПутьФайлаСкрипта Экспорт;
Перем ФайлСкрипта Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
#Если Клиент Тогда
// Функция формирует табличный документ с печатной формой заявки на отгрузку,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьЗаявки() Экспорт
	//ТекущаяСтрока = ЭлементыФормы.Список.ТекущиеДанные;
	//ЭтотОбъект = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Реализатор КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьСерия,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	////Определение контрагента для кода стикера Бизерба
	//КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ)<>"" тогда
		ЗапросКА = Новый Запрос;
		ЗапросКА.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыВесов.Контрагент КАК Контрагент,
		|	ШтрихкодыВесов.Владелец.Наименование КАК Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры КАК Упаковка,
		|	ШтрихкодыВесов.Порция КАК Порция,
		|	ШтрихкодыВесов.Код КАК КодPLU,
		|	ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ КАК ОКПО,
		|	ШтрихкодыВесов.Контрагент.ТорговаяМарка
		|ИЗ
		|	РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
		|ГДЕ
		|	ШтрихкодыВесов.Контрагент.ДляBizerba = ИСТИНА
		|	И ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ = &ОКПО
		|	И ШтрихкодыВесов.Владелец.Родитель.Код <> ""00000000742""
		//|	И ШтрихкодыВесов.Контрагент.ТорговаяМарка = &ТорговаяМарка
		|	И ВЫБОР
		|			КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|				ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.РМК)
		|						ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка <> ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодыВесов.Контрагент.Наименование,
		|	Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры,
		|	Порция";
		
		ЗапросКА.УстановитьПараметр("ОКПО", СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ));
		ЗапросКА.УстановитьПараметр("ТорговаяМарка", ЭтотОбъект.Контрагент.ТорговаяМарка);
		РезультатКА=ЗапросКА.Выполнить();
		Если не РезультатКА.Пустой() тогда
			ВыборкаДетальныеЗаписиКА=РезультатКА.Выбрать();
			ВыборкаДетальныеЗаписиКА.Следующий();
			КонтаргентДляБизерба=ВыборкаДетальныеЗаписиКА.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтаргентДляБизерба=неопределено тогда
		КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", КонтаргентДляБизерба);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслуг.Порции КАК Порции,
	|	РеализацияТоваровУслуг.Стикер КАК Стикер,
	|	ШтрихкодыВесов.Код КАК КодPLU,
	|	СУММА(РеализацияТоваровУслуг.КоличествоЗаявки) КАК КоличествоЗаявки,
	|	СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МестаХраненияНоменклатуры.МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное, МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное) КАК СТРОКА(150)) КАК Товар
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|		ПО РеализацияТоваровУслуг.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = МестаХраненияНоменклатуры.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = МестаХраненияНоменклатуры.Порции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
	|		ПО РеализацияТоваровУслуг.Номенклатура = ШтрихкодыВесов.Владелец
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = ШтрихкодыВесов.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = ШтрихкодыВесов.Порция
	|			И (ШтрихкодыВесов.Контрагент = &Контрагент)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И РеализацияТоваровУслуг.КоличествоЗаявки <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Порции,
	|	РеализацияТоваровУслуг.Стикер,
	|	МестаХраненияНоменклатуры.МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ШтрихкодыВесов.Код,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное, МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное) КАК СТРОКА(150))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияНоменклатуры.МестоХранения.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Заявка";
	ЭтотОбъект.ПараметрыПечати(ТабДокумент);
	Макет = ЭтотОбъект.ПолучитьМакет("Заявка");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ТекстЗаголовка = "Заявка № "+Формат(ЧИСЛО(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0")+" от "+Формат(ЭтотОбъект.ЗаявкаДата,"ДФ=dd.MM.yy")+ 
	" на "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy");
	ОбластьМакета.Параметры.ТорговаяМарка			=?(ЭтотОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС,"КС","");
	
	//	ОбластьМакета.Параметры.ТекстЗаголовка = "Заявка № "+СокрЛП(ЭтотОбъект.Номер)+" от " +ЭтотОбъект.ЗаявкаДата+" на "+ЭтотОбъект.Дата;
	//ОбластьМакета.Рисунки.D2.ГраницаСверху    =   Ложь;
	//ОбластьМакета.Рисунки.D2.ГраницаСнизу     =   Ложь;
	//ОбластьМакета.Рисунки.D2.ГраницаСправа    =   Ложь;
	//ОбластьМакета.Рисунки.D2.ГраницаСлева     =   Ложь;
	//ОбластьМакета.Рисунки.D2.Объект.ТипКода    =   1;
	//СтрШК="";
	//ШтрихКод=УправлениеРаботойСоСтикером.ПолучитьКонтрольноеЧислоШК13(СтрШК);
	//ОбластьМакета.Рисунки.D2.Объект.Сообщение =  ШтрихКод;
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЭтотОбъект.Реализатор<>Справочники.Контрагенты.ПустаяСсылка() тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭтотОбъект.Реализатор.Наименование;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика =" ";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ЭтотОбъект.Контрагент.Наименование +" "+ЭтотОбъект.АдресДоставки; 
	
	ОбластьМакета.Параметры.УсловиеСтикирования  = ?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка(),ЭтотОбъект.Контрагент.УсловиеСтикирования,"Стикер " +СокрЛП(КонтаргентДляБизерба.Наименование));
	
	ОбластьМакета.Параметры.Комментарий				= Шапка.Комментарий;
	ОбластьМакета.Параметры.БазовыйМаршрут          = ЭтотОбъект.БазовыйМаршрут.Наименование;
	//***ШК
	ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
	ОбластьМакета.Рисунки.D1.Объект.ТипКода   =   1;
	СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
	ШтрихКод=УправлениеРаботойСоСтикером.ПолучитьКонтрольноеЧислоШК13(СтрШК);
	ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	ВыводитьКоды = Ложь;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Упаковка= СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		ОбластьДанных.Параметры.Стикеры=?(ВыборкаСтрокТовары.Стикер=Истина,"б/стик.",ВыборкаСтрокТовары.КодPLU);
		ОбластьДанных.Параметры.Товар 	= СокрЛП(ВыборкаСтрокТовары.Номенклатура.Наименование);
		ЕдУпаковки=ПолучитьЕдиницуУпаковка(ВыборкаСтрокТовары.Номенклатура,ВыборкаСтрокТовары.Характеристика);
		ОбластьДанных.Параметры.Штук 	= ?(ЕдУпаковки=0,"",Формат(Окр(ВыборкаСтрокТовары.КоличествоЗаявки/ЕдУпаковки,0,2),"ЧДЦ=0; ЧГ=0"));
		ТабДокумент.Присоединить(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.КоличествоЗаявки;
	КонецЦикла;
	
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ВремяПечати	 = Формат(ТекущаяДата(),"ДЛФ=DT");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество = ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
	ТабДокумент.Вывести(ОбластьИтогоКоличество);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Исполнители");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;	
КонецФункции // ПечатьЗаявки()

// Функция формирует табличный документ с печатной формой заявки на отгрузку,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНедогрузов() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Реализатор КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьСерия,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	////Определение контрагента для кода стикера Бизерба
	//КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ)<>"" тогда
		ЗапросКА = Новый Запрос;
		ЗапросКА.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыВесов.Контрагент КАК Контрагент,
		|	ШтрихкодыВесов.Владелец.Наименование КАК Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры КАК Упаковка,
		|	ШтрихкодыВесов.Порция КАК Порция,
		|	ШтрихкодыВесов.Код КАК КодPLU,
		|	ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ КАК ОКПО,
		|	ШтрихкодыВесов.Контрагент.ТорговаяМарка
		|ИЗ
		|	РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
		|ГДЕ
		|	ШтрихкодыВесов.Контрагент.ДляBizerba = ИСТИНА
		|	И ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ = &ОКПО
		|	И ШтрихкодыВесов.Владелец.Родитель.Код <> ""00000000742""
		//|	И ШтрихкодыВесов.Контрагент.ТорговаяМарка = &ТорговаяМарка
		|	И ВЫБОР
		|			КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|				ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.РМК)
		|						ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка <> ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодыВесов.Контрагент.Наименование,
		|	Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры,
		|	Порция";
		
		ЗапросКА.УстановитьПараметр("ОКПО", СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ));
		ЗапросКА.УстановитьПараметр("ТорговаяМарка", ЭтотОбъект.Контрагент.ТорговаяМарка);
		РезультатКА=ЗапросКА.Выполнить();
		Если не РезультатКА.Пустой() тогда
			ВыборкаДетальныеЗаписиКА=РезультатКА.Выбрать();
			ВыборкаДетальныеЗаписиКА.Следующий();
			КонтаргентДляБизерба=ВыборкаДетальныеЗаписиКА.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтаргентДляБизерба=неопределено тогда
		КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", КонтаргентДляБизерба);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтрокиТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслуг.Порции КАК Порции,
	|	РеализацияТоваровУслуг.Стикер КАК Стикер,
	|	ШтрихкодыВесов.Код КАК КодPLU,
	|	СУММА(РеализацияТоваровУслуг.КоличествоЗаявки-РеализацияТоваровУслуг.Количество) КАК КоличествоЗаявки,
	|	СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МестаХраненияНоменклатуры.МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ВЫРАЗИТЬ(МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное КАК СТРОКА(150)) КАК Товар
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|		ПО РеализацияТоваровУслуг.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = МестаХраненияНоменклатуры.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = МестаХраненияНоменклатуры.Порции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
	|		ПО РеализацияТоваровУслуг.Номенклатура = ШтрихкодыВесов.Владелец
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = ШтрихкодыВесов.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = ШтрихкодыВесов.Порция
	|			И (ШтрихкодыВесов.Контрагент = &Контрагент)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И РеализацияТоваровУслуг.КоличествоЗаявки <> 0
	|	И РеализацияТоваровУслуг.КоличествоЗаявки > РеализацияТоваровУслуг.Количество
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Порции,
	|	РеализацияТоваровУслуг.Стикер,
	|	МестаХраненияНоменклатуры.МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ШтрихкодыВесов.Код,
	|	ВЫРАЗИТЬ(МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное КАК СТРОКА(150))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияНоменклатуры.МестоХранения.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Заявка";
	ЭтотОбъект.ПараметрыПечати(ТабДокумент);
	Макет = ЭтотОбъект.ПолучитьМакет("Заявка");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	//ОбластьМакета.Параметры.ТекстЗаголовка = "НЕДОГРУЗ заявки № "+СокрЛП(ЭтотОбъект.Номер)+" от " +ЭтотОбъект.ЗаявкаДата+" на "+ЭтотОбъект.Дата;
	ОбластьМакета.Параметры.ТекстЗаголовка = "НЕДОГРУЗ заявки №  "+Формат(ЧИСЛО(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0")+" от "+Формат(ЭтотОбъект.ЗаявкаДата,"ДФ=dd.MM.yy")+ 
	" на "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy");
	ОбластьМакета.Параметры.ТорговаяМарка			=?(ЭтотОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС,"КС","");
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЭтотОбъект.Реализатор<>Справочники.Контрагенты.ПустаяСсылка() тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭтотОбъект.Реализатор.Наименование;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика =" ";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ЭтотОбъект.Контрагент.Наименование +" "+ЭтотОбъект.АдресДоставки; 
	   //ОбластьМакета.Параметры.УсловиеСтикирования     = "Стикер " +?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка()," РМК",СокрЛП(КонтаргентДляБизерба.Наименование));
	   ОбластьМакета.Параметры.УсловиеСтикирования  = ?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка(),ЭтотОбъект.Контрагент.УсловиеСтикирования,"Стикер " +СокрЛП(КонтаргентДляБизерба.Наименование));
	   
//	ОбластьМакета.Параметры.ТорговаяМарка			=?(ЭтотОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС,"КС","");
	ОбластьМакета.Параметры.Комментарий				= Шапка.Комментарий;
	ОбластьМакета.Параметры.БазовыйМаршрут          =ЭтотОбъект.БазовыйМаршрут.Наименование;
	//***ШК
	ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
	ОбластьМакета.Рисунки.D1.Объект.ТипКода    =   1;
	СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
	ШтрихКод=УправлениеРаботойСоСтикером.ПолучитьКонтрольноеЧислоШК13(СтрШК);
	ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	ВыводитьКоды = Ложь;

	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаСтрокТовары.КоличествоЗаявки<0.250 тогда
			Сообщить("Вес недогруза меньше 0,250 кг. пропущено "+СокрЛП(ВыборкаСтрокТовары.Номенклатура.Наименование)+" "+СокрЛП(ВыборкаСтрокТовары.Характеристика), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;	

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных.Параметры.Упаковка= СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		ОбластьДанных.Параметры.Стикеры=?(ВыборкаСтрокТовары.Стикер=Истина,"б/стик.",ВыборкаСтрокТовары.КодPLU);
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрЛП(ВыборкаСтрокТовары.Номенклатура.Наименование);
		ЕдУпаковки=ПолучитьЕдиницуУпаковка(ВыборкаСтрокТовары.Номенклатура,ВыборкаСтрокТовары.Характеристика);
		ОбластьДанных.Параметры.Штук 	= ?(ЕдУпаковки=0,"",Формат(Окр(ВыборкаСтрокТовары.КоличествоЗаявки/ЕдУпаковки,0,2),"ЧДЦ=0; ЧГ=0"));
		ТабДокумент.Присоединить(ОбластьДанных);
		ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.КоличествоЗаявки;
	КонецЦикла;
	
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ВремяПечати	 = Формат(ТекущаяДата(),"ДЛФ=DT");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество = ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
	ТабДокумент.Вывести(ОбластьИтогоКоличество);
	ОбластьМакета = Макет.ПолучитьОбласть("Исполнители");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;
		
КонецФункции // ПечатьЗаявки()

// Функция формирует табличный документ с печатной формой декларации на отгрузку,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьДекларации () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
		//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	КоличествоЗаявки,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|		СУММА(КоличествоЗаявки)    КАК КоличествоЗаявки,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции
	|	) КАК ВложенныйЗапросПоТоварам	";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Декларация";
    
    ПараметрыПечати(ТабДокумент);
    
    Макет = ПолучитьМакет("Декларация");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДата="№  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ПредставлениеПоставщика=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование())+", м.Харкiв, вул. Роганська, 151.";
	ТабДокумент.Вывести(ОбластьМакета);
    ВыводитьКоды = Ложь;
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ТабДокумент.Присоединить(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьДанных.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар);
		ОбластьДанных.Параметры.ЕдИзм = ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		ОбластьДанных.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.ДатаИзготовления=Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
		ОбластьДанных.Параметры.ОптоваяЦена=ВыборкаСтрокТовары.Цена;
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
 
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	//ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя =Контрагент.Наименование; 
	ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
		
КонецФункции // ПечатьДекларации()

//печать декларациипроизводителя
Функция  ПечатьДекларацииПроизводителя() Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	Контрагент КАК Покупатель
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	//СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Упаковка,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя КАК УсловияХранения,
	|	ЗначенияСвойствОбъектов.Значение КАК Влажность,
	|	ЗначенияСвойствОбъектов1.Значение КАК ФормаВид,
	|	ЗначенияСвойствОбъектов2.Значение КАК ВДСЕЕ,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул  КАК Артикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыНоменклатуры КАК ТекстыНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ТекстыНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = ТекстыНоменклатуры.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Код = ""00000000019"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000032"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов2.Объект
	|			И (ЗначенияСвойствОбъектов2.Свойство.Код = ""00000000034"")
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|	И РеализацияТоваровУслугТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЗначенияСвойствОбъектов1.Значение,
	|	ЗначенияСвойствОбъектов2.Значение,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ЗапросТУ = Новый запрос;
//|	ЗначенияСвойствОбъектов.Значение КАК ДСТУ,	
	ЗапросТУ.Текст="ВЫБРАТЬ
				   |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ДСТУ,
	               |	ЗначенияСвойствОбъектов1.Значение КАК ВДСЕЕ,
	               |	РеализацияТоваровУслугТовары.Номенклатура
	               |ПОМЕСТИТЬ ТУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ЗначенияСвойствОбъектов.Свойство.Код = ""00000000033""
	               |	И ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000034""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ,
	               |	КОЛИЧЕСТВО(ТУ.Номенклатура) КАК Номенклатура
	               |ИЗ
	               |	ТУ КАК ТУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ";
	ЗапросТУ.УстановитьПараметр("ССылка",МойОбъект.Ссылка);
	ТЗНормДок = ЗапросТУ.Выполнить().Выгрузить();			   
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ДекларацииПроизводителя";
    
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    
    ПараметрыПечати(ТабДокумент);
    
    Макет = МойОбъект.ПолучитьМакет("ДекларацияПроизводителя");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

//найдем строку декларации
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СправочникВетеринарныхСвидетельств.Ссылка,
        |   СправочникВетеринарныхСвидетельств.Код,
        |   СправочникВетеринарныхСвидетельств.Наименование,
        |   СправочникВетеринарныхСвидетельств.Дата,
        |   СправочникВетеринарныхСвидетельств.Комментарий,
        |   СправочникВетеринарныхСвидетельств.НомерДекларацииВиробника
        |ИЗ
        |   Справочник.СправочникВетеринарныхСвидетельств КАК СправочникВетеринарныхСвидетельств
        |ГДЕ
        |   СправочникВетеринарныхСвидетельств.Дата = &Дата
        |   И СправочникВетеринарныхСвидетельств.ПометкаУдаления = ЛОЖЬ";

    Запрос.УстановитьПараметр("Дата", НачалоДня(ЭтотОбъект.Дата));
    РезультатСВС = Запрос.Выполнить();
    ВыборкаДЗ = РезультатСВС.Выбрать();
    СтрокаСвидетельств="";
    МойНомерДекларации="";
    Если не РезультатСВС.Пустой() тогда 
        ВыборкаДЗ.Следующий();
        МойНомерДекларации=ВыборкаДЗ.НомерДекларацииВиробника;
        СтрокаСвидетельств=ВыборкаДЗ.Наименование;
    КонецЕсли;
 
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    Если СокрЛП(СтрокаСвидетельств)="" тогда
        СтрЗаголовка="Декларація виробника №___________";
    Иначе    
        СтрЗаголовка        =СтрокаСвидетельств;
        СтрЗаголовка="Декларація виробника № "+СокрЛП(МойНомерДекларации);
    КонецЕсли;
    
    ОбластьМакета.Параметры.ЗаголовокДокумента = СтрЗаголовка;
	ОбластьМакета.Параметры.Покупатель = "Товароотримувач:  "+СокрЛП(МойОбъект.Контрагент.НаименованиеПолное);
	НомерНакладной=СокрЛП(МойОбъект.Номер);
	//***поиск номера накладной бухгалтерского учета
	
    //
    //Если МойОбъект.ОтражатьВБухгалтерскомУчете=Истина И СокрЛП(МойОбъект.Контрагент.КодПоЕДРПОУ)<>"" тогда
    //	Коннектор=Новый COMObject("V82.COMConnector");
    //	Импорт=Коннектор.Connect("Srvr=""1CSERVER""; Ref=""RMKBUHBASE""; SQLSrvr=""1CSERVER""; SQLDB= ""RMKBUHBASE""; Usr =""БелаяОтгрузка""; Pwd =""Роганский1978""");
    //	ИмпортПользователи = Импорт.Справочники.Пользователи;
    //	ИмпортКонтрагенты = Импорт.Справочники.Контрагенты;
    //	ИмпортКонтрагент=ИмпортКонтрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",МойОбъект.Контрагент.КодПоЕДРПОУ);
    //	Если  СокрЛП(ИмпортКонтрагент.Наименование)<>"" тогда
    //		ИмпортРеализация=Импорт.Документы.РеализацияТоваровУслуг;
    //		Выборка = ИмпортРеализация.Выбрать(НачалоДня(МойОбъект.Дата),КонецДня(МойОбъект.Дата));
    //		Пока Выборка.Следующий() Цикл
    //			Текст=Сред(СокрЛП(Выборка.Комментарий),14,11);
    //			//Сообщить(Текст);
    //			//Копия из УУ №00000045113,  от 01.06.2012 7:45:31
    //			Если СокрЛП(Текст)=СокрЛП(МойОбъект.Номер) тогда
    //				НомерНакладной=Выборка.Номер;
    //				//Сообщить("Вот Он "+НомерНакладной);
    //			КонецЕсли;   
    //			//Индекс=Индекс+1;
    //		КонецЦикла;
    //	КонецЕсли;
    //КонецЕсли;   
    ////***** конецй поиска номера гакладной БУ
	
	//ОбластьМакета.Параметры.ДатаПроизводстваНомерНАкладной = "Дата виробництва та  відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".  Накладна № "+Формат(Число(СокрЛП(МойОбъект.Номер)),"ЧГ=0")+"  від  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".";//+" 08:00:00 для реалізації";
	ОбластьМакета.Параметры.ДатаПроизводстваНомерНАкладной = "Дата виробництва та  відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".  Накладна № "+Формат(Число(СокрЛП(НомерНакладной)),"ЧГ=0")+"  від  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".";//+" 08:00:00 для реалізації";
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если  ТОвары.Количество()=0 тогда//***160919
		Сообщить("Нет товаров!");
		возврат ТабДокумент;
	КонецЕсли;
	
	//Определить это мясо или нет?
	ЭтоМясо=ТОвары[0].Номенклатура.Родитель.Код="00000009941";

	Если ЭтоМясо тогда
		ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицыМясо");
	Иначе 
		ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	КонецЕсли;
	
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	
	ВсегоСкидок    = 0;
	строкаНомер= 0;
	
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
        Если ЭтоМясо тогда
	    	ОбластьДанных=Макет.ПолучитьОбласть("СтрокаМясо");
		Иначе
			ОбластьДанных=Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		

		ОбластьДанных.Параметры.Номенклатура 	= ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.ТекстВидУпаковки= ВыборкаСтрокТовары.Упаковка;
		Если не ЭтоМясо тогда
			ОбластьДанных.Параметры.Влажность       = ВыборкаСтрокТовары.Влажность;	
			ОбластьДанных.Параметры.Форма			= ВыборкаСтрокТовары.ФормаВид;  
		КонецЕсли;	
		ОбластьДанных.Параметры.Условия			= ВыборкаСтрокТовары.УсловияХранения;	
		Шаг=0;
		Пока Шаг < ТЗНормДок.Количество() Цикл
			Если Врег(СокрЛП(ТЗНормДок[Шаг].ДСТУ))=Врег(СокрЛП(ВыборкаСтрокТовары.Артикул))
				И Врег(СокрЛП(ТЗНормДок[Шаг].ВДСЕЕ))=Врег(СокрЛП(ВыборкаСтрокТовары.ВДСЕЕ)) ТОГДА
				прервать;
			КонецЕсли;
			Шаг=Шаг+1;
		КонецЦикла;
		ОбластьДанных.Параметры.НомерСтроки =	Формат(строкаНомер+1,"ЧДЦ=0; ЧГ=0");
		ОбластьДанных.Параметры.СсылкаДСТУ	=	Формат(Шаг+1,"ЧДЦ=0; ЧГ=0");
		
		строкаНомер=строкаНомер+1;
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
	Если ЭтоМясо тогда
		ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицыМясо");
	Иначе
		ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы");
	КонецЕсли;	
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Заголовок2");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Шапка2");
	ТабДокумент.Вывести(ОбластьДанных);
	Шаг=0;
	ОбластьДанных=Макет.ПолучитьОбласть("Строка2");
	Пока Шаг < ТЗНормДок.Количество() Цикл
		ОбластьДанных.Параметры.НомерТУ=Шаг+1;
		ОбластьДанных.Параметры.ТекстДСТУ=ТЗНормДок[Шаг].ДСТУ;
		ОбластьДанных.Параметры.ТекстВДСЕЕ=ТЗНормДок[Шаг].ВДСЕЕ;
		ТабДокумент.Вывести(ОбластьДанных);
		Шаг=Шаг+1;
	КонецЦикла;

	ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы2");
	ТабДокумент.Вывести(ОбластьДанных);
	
	
	Если не ЭтоМясо тогда 
		ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
		Текст_ЭВ="";
		ЗапросЭВ = новый запрос;
		ЗапросЭВ.Текст="ВЫБРАТЬ
		               |	СправочникЭкспертноеВетеринарноеЗаключение.Дата КАК Дата,
		               |	СправочникЭкспертноеВетеринарноеЗаключение.Наименование,
		               |	СправочникЭкспертноеВетеринарноеЗаключение.Ссылка
		               |ИЗ
		               |	Справочник.СправочникЭкспертноеВетеринарноеЗаключение КАК СправочникЭкспертноеВетеринарноеЗаключение
		               |ГДЕ
		               |	СправочникЭкспертноеВетеринарноеЗаключение.ПометкаУдаления = ЛОЖЬ
		               |	И СправочникЭкспертноеВетеринарноеЗаключение.Дата <= &Дата
		               |	И СправочникЭкспертноеВетеринарноеЗаключение.ЭтоМясо = ЛОЖЬ
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ";
		
		ЗапросЭВ.УстановитьПараметр("Дата",КонецДня(МойОбъект.Дата));
		Рез_ЭВ= ЗапросЭВ.Выполнить().Выбрать();
		//Текст_ЭВ="";
		//Текст_ЭВ=РегистрыСведений.ЭкспертноеВетеринарноеЗаключение.
		Если Рез_ЭВ.Количество()>0 тогда 
			Рез_ЭВ.Следующий();
			Текст_ЭВ=Рез_ЭВ.ссылка;
		КонецЕсли;	
		ОбластьОсобыеОтметки.Параметры.ЭкспертВисновок=Текст_ЭВ;
		СтрокаВС="Серія ______№ _________________________від ____________"+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+" р.";
		ОбластьОсобыеОтметки.Параметры.СтрокаВС=?(СокрЛП(СтрокаСвидетельств)="",СтрокаВС,СокрЛП(СтрокаСвидетельств));
		ОбластьОсобыеОтметки.Параметры.Технолог=?(СокрЛП(ЭтотОбъект.Контрагент.Код)="000002616" ИЛИ 
		СокрЛП(ЭтотОбъект.Контрагент.Код)="000002617"
		ИЛИ ИСТИНА,"Ковтун О.I." ,"");
		
		//ОбластьОсобыеОтметки.Параметры.ВетВрач="Вет. врач "+СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
		
		ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	Иначе
		Ответ = Вопрос("Если в накладной МЯСО нажмите ДА, если КУРИЦА нажмите НЕТ!", РежимДиалогаВопрос.ДаНет); 
		ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметкиМясо");	
		Текст_ЭВ="";
		ДопЗапрос=?(Ответ = КодВозвратаДиалога.Да,"ЭтоМясо = ИСТИНА ","ЭтоКурица = ИСТИНА ");
		ЗапросЭВ = новый запрос;
		ЗапросЭВ.Текст="ВЫБРАТЬ
		|	СправочникЭкспертноеВетеринарноеЗаключение.Дата КАК Дата,
		|	СправочникЭкспертноеВетеринарноеЗаключение.Наименование,
		|	СправочникЭкспертноеВетеринарноеЗаключение.ссылка
		|ИЗ
		|	Справочник.СправочникЭкспертноеВетеринарноеЗаключение КАК СправочникЭкспертноеВетеринарноеЗаключение
		|ГДЕ
		|	СправочникЭкспертноеВетеринарноеЗаключение.ПометкаУдаления = ЛОЖЬ
		|	И СправочникЭкспертноеВетеринарноеЗаключение."+ДопЗапрос+"
		|	И СправочникЭкспертноеВетеринарноеЗаключение.Дата <= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
		
		ЗапросЭВ.УстановитьПараметр("Дата",КонецДня(МойОбъект.Дата));
		Рез_ЭВ= ЗапросЭВ.Выполнить().Выбрать();
		//Текст_ЭВ="";
		//Текст_ЭВ=РегистрыСведений.ЭкспертноеВетеринарноеЗаключение.
		Если Рез_ЭВ.Количество()>0 тогда 
			Рез_ЭВ.Следующий();
			Текст_ЭВ=Рез_ЭВ.ссылка;
		КонецЕсли;	
		ОбластьОсобыеОтметки.Параметры.ЭкспертВисновокМясо=Текст_ЭВ;
		СтрокаВС="Серія ______№ _________________________від ____________"+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+" р.";
		ОбластьОсобыеОтметки.Параметры.СтрокаВС=?(СокрЛП(СтрокаСвидетельств)="",СтрокаВС,СокрЛП(СтрокаСвидетельств));
		ОбластьОсобыеОтметки.Параметры.Технолог=?(СокрЛП(ЭтотОбъект.Контрагент.Код)="000002616" ИЛИ 
		СокрЛП(ЭтотОбъект.Контрагент.Код)="000002617"
		ИЛИ ИСТИНА,"Ковтун О.I." ,"");
		//ОбластьОсобыеОтметки.Параметры.ВетВрач="Вет. врач "+СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
		ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	КонецЕсли;	
		возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельства()

// Функция формирует табличный документ с печатной формой товарно-транспортьной накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьТТН () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции
	|	) КАК ВложенныйЗапросПоТоварам	";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ТТН";
	
	Макет = ПолучитьМакет("ТоварноТранспортнаяНакладная_1ТН");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Номер="№  "+СокрЛП(ЭтотОбъект.Номер);
	ОбластьМакета.Параметры.Дата=Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.ПредставлениеПоставщика=СокрЛП(ЭтотОбъект.Организация.НаименованиеПолное)+" ";
	ОбластьМакета.Параметры.ПредставлениеПокупателя =ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ОбластьМакета.Параметры.АдресДОставки=ЭтотОбъект.АдресДоставки;
	ТабДокумент.Вывести(ОбластьМакета);
 	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоСумма     = 0;
	ВсегоКоличество= 0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		
        //ВсегоКоличество= ВсегоКоличество+ ВыборкаСтрокТовары.количество;
        ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);        
        
		ВсегоСумма     = ВсегоСумма     + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС       + ВыборкаСтрокТовары.СуммаНДС ; 
	КонецЦикла;
	
	
	ОбластьДанных.Параметры.НомерСтроки =1;
	ОбластьДанных.Параметры.КодАртикул  ="";
	ОбластьДанных.Параметры.Товар		="Колбаснi вироби ";
	ОбластьДанных.Параметры.ЕдиницаЦены ="кг";
	ОбластьДанных.Параметры.Количество  =ВсегоКоличество;
	ОбластьДанных.Параметры.ЦенаБезНДС  = "";
	ОбластьДанных.Параметры.СуммаБезНДС =ВсегоСумма;
	ОбластьДанных.Параметры.БруттоТ     =ВсегоКоличество/1000;
    ТабДокумент.Вывести(ОбластьДанных);
	
 	ОбластьДанных = Макет.ПолучитьОбласть("Итого");
	ОбластьДанных.Параметры.ВсегоКол    =ВсегоКоличество;
	ОбластьДанных.Параметры.ВсегоСумма  =ВсегоСумма;
	ОбластьДанных.Параметры.ИтогБруттоТ =ВсегоКоличество/1000;
    ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьМакета= Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

	ОбластьМакета.Параметры.МасаБрутто1 =ВсегоКоличество/1000;
	ОбластьМакета.Параметры.МасаБрутто2 =ВсегоКоличество/1000;
	//ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
		
КонецФункции // ПечатьТТН()

Функция ПечатьДокумента()  Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	Номенклатура.Родитель.Наименование КАК Родитель,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(700)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|	ПроцентСкидкиНаВес,
	|	СкидкаНаВес
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		НомерСтроки КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		СУММА(Сумма)/СУММА(Количество) КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	    ПроцентСкидкиНаВес,
	|	    СкидкаНаВес,	
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент И РеализацияТоваровУслуг.Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		НомерСтроки,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|		ПроцентСкидкиНаВес, СкидкаНаВес
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Сумма/Количество КАК Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, Родитель, Товар
	|";
	
		//|	НомерТЧ, НомерСтрокиТЧ
		
		
		
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РеализацияТоваровУслуг.Номенклатура,
	               |	РеализацияТоваровУслуг.Номенклатура.Код КАК Код,
	               |	РеализацияТоваровУслуг.Номенклатура.Артикул КАК Артикул,
	               |	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	               |	СУММА(РеализацияТоваровУслуг.Сумма) КАК СУММА
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	               |ГДЕ
	               |	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РеализацияТоваровУслуг.Номенклатура,
	               |	РеализацияТоваровУслуг.Номенклатура.Код,
	               |	РеализацияТоваровУслуг.Номенклатура.Артикул
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	РеализацияТоваровУслуг.Номенклатура";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
     
    ПараметрыПечати(ТабДокумент); 
	//Макет = ПолучитьМакет("Накладная");
	Макет = ПолучитьМакет("НакладнаяРасходная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать)+"   ("+СокрЛП(Шапка.Покупатель.Код)+")";
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ЭтотОбъект.АдресДоставки;
	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать); //*** Ю.Ляшенко 11-12-2014
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
	ОбластьМакета.Параметры.Комментарий=Комментарий;
	ТабДокумент.Вывести(ОбластьМакета);	

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	Если ЕстьСкидки Тогда
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки+5;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки +5;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество =0; 
    ВсегоКолШт      =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				//ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		//ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		Если ЭтотОбъект.Контрагент.Родитель.Код="000001125" ИЛИ
			 	ЭтотОбъект.Контрагент.Родитель.Код="000001258" ИЛИ
					ЭтотОбъект.Контрагент.Родитель.Код="000001257" ИЛИ
						ЭтотОбъект.Контрагент.Родитель.Код="000001128" ИЛИ
							ЭтотОбъект.Контрагент.Родитель.Код="000001395" тогда  
			СтрокаПоходТорговойСети=" ("+ВыборкаСтрокТовары.ПроцентСкидкиНаВес+"%-"+ВыборкаСтрокТовары.СкидкаНаВес+" )";
		Иначе	
		    СтрокаПоходТорговойСети="";
		КонецЕсли;
		
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Родитель)+"-"+СокрП(ВыборкаСтрокТовары.Товар)+СтрокаПоходТорговойСети+
						?(РольДоступна("Филиал") или РольДоступна("ФилиалРуководитель") ,"("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+")","");
		ТабДокумент.Присоединить(ОбластьДанных);
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			Скидка = 0;
		Иначе
			Скидка = ВыборкаСтрокТовары.Сумма  / (100 - ВыборкаСтрокТовары.Скидка) * ВыборкаСтрокТовары.Скидка;
			//округлим скидку до двух знаков
			Скидка = ОбщегоНазначения.ОкруглитьСУчетомПогрешности(Скидка, 2);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьСкидок.Параметры.Скидка         = Скидка;
			ОбластьСкидок.Параметры.СуммаБезСкидки = ВыборкаСтрокТовары.Сумма + Скидка;
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		//ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
		//*** ВсегоКоличество=ВсегоКоличество+?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
        //***AL 27-08-2012
        //ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);
		//***
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
        
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ЗаполнениеДокументов.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар 	= СокрП(ВыборкаСтрокТара.Номенклатура);			
			ОбластьДанных.Параметры.Цена	= Формат(?(ВыборкаСтрокТара.Количество=0,0,ВыборкаСтрокТара.Сумма/ВыборкаСтрокТара.Количество),"ЧДЦ=2");
			ОбластьДанных.Параметры.Сумма= Формат(ВыборкаСтрокТара.Сумма,"ЧДЦ=2");			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ОбластьДанных .Параметры.ВсегоСуммаТары= ЗаполнениеДокументов.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		
		
		//ТабДокумент.Присоединить(ОбластьСуммы);	
		//ОбластьМакета = Макет.ПолучитьОбласть("ИтогоТара");
		//Сообщить(ВсегоКолТара);
		//ОбластьМакета.Параметры.ВсегоТары=ВсегоКолТара;
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+Формат(ВсегоКоличество,"ЧДЦ=3; ЧН=' '; ЧГ=0")+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести подписи
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Выписал=СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	ТабДокумент.Вывести(ОбластьМакета);	
	Если СуммаИтогМенеджера>0 тогда 
	//Вывести менеджера
		ОбластьМакета = Макет.ПолучитьОбласть("МенеджерПокупателя");
		ОбластьМакета.Параметры.НомерНакладной	= "№ "+СокрЛП(Номер)+" от "+Формат(Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ПокупательНакладной=Контрагент.Наименование;
		//ОбластьМакета.Параметры.Менеджер		=Реализатор.НаименованиеПолное;
		//Сообщить(Реализатор);
		//Сообщить(Реализатор.Наименование);
		//СокрЛП(Реализатор.Наименование)<>"" и
		ПустаяСсылкаКонтрагенты = Справочники.Контрагенты.ПустаяСсылка();
		если  Реализатор<>NULL 
				И Реализатор.Ссылка<>ПустаяСсылкаКонтрагенты
					И не РольДоступна("Филиал") И не РольДоступна("ФилиалРуководитель") тогда
		    ОбластьМакета.Параметры.Менеджер=Реализатор.Наименование;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СуммаСоСкидкой	=СуммаИтогМенеджера;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()

//печать качественного
Функция  ПечатьКачественногоСвидетельства() Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Реализатор КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры
	|	) КАК ВложенныйЗапросПоТоварам
    | ";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Качественное";
	ПараметрыПечати(ТабДокумент);
	Макет = МойОбъект.ПолучитьМакет("Качественное");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДок = "ПОСВІДЧЕННЯ ПРО ЯКІСТЬ №___________";
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(МойОбъект.Организация.НаименованиеПолное) + "   Адреса: 61172, м.Харків, вул. Роганська, 151.";
	ОбластьМакета.Параметры.Отправитель = СокрЛП(МойОбъект.Организация.НаименованиеПолное) +"   ( експлуатаційний дозвіл № 20 29 20 Mt)";
	ОбластьМакета.Параметры.ПредставлениеПокупателя = МойОбъект.Контрагент.Наименование ;
	ОбластьМакета.Параметры.ДатаДок = "Дата відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+"  вид і номер транспортного засобу ___________________ ";
	ОбластьМакета.Параметры.НомерДок2 = " Накладна (сертифікація) №  "+МойОбъект.Номер+" від "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+?(ЭтотОбъект.Контрагент.Код="000002720", " 10:00:00 "  ," 08:00:00 ") + " для реалізації";//Алексеенко А.А 06-02-2014
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
    ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
	    //чтение свойств номенклатуры
		ЗапросРегСвед = Новый Запрос("ВЫБРАТЬ
				| *
				| ИЗ
				| РегистрСведений.ЗначенияСвойствОбъектов
				| ГДЕ Объект=&ООО");

		ЗапросРегСвед.УстановитьПараметр("ООО",ВыборкаСтрокТовары.Номенклатура);
		РегСвед =ЗапросРегСвед.Выполнить().Выгрузить();

		
		
		Для Каждого Запись ИЗ РегСвед Цикл   
			//Предупреждение("Свойство "+Запись.Свойство+"   "+"Запись.Значение "+ Запись.Значение, 10);
			Если СокрЛП(Запись.Свойство)="Время хранения"  Тогда
				ВрХранения=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Температура хранения"   Тогда
				Темп=Запись.Значение;
			КонецЕсли;	
			Если СокрЛП(Запись.Свойство)="Оболочка"    Тогда
				Обол=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Упаковка"    Тогда
				Упак=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Влажность хранения" Тогда
				Влаж=Запись.Значение;
			КонецЕсли;		
		КонецЦикла;		
	
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.Артикул= ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.Влажность=Влаж;
		ОбластьДанных.Параметры.Температура=Темп;
		ОбластьДанных.Параметры.СрокГодности=ВрХранения;
		ОбластьДанных.Параметры.Количество=ВыборкаСтрокТовары.Количество;
		//ОбластьДанных.Параметры.ДатаИВремя = Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 ";
		ОбластьДанных.Параметры.ДатаИВремя = Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+?(ЭтотОбъект.Контрагент.Код="000002720", " 10:00:00 "  ," 08:00:00 ");//Алексеенко А.А 06-02-2014
		
		//ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Вывести(ОбластьДанных);
		
		//ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
        //ВсегоКоличество=ВсегоКоличество+?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
        ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);        
	КонецЦикла;
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество= ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
    ТабДокумент.Вывести(ОбластьИтогоКоличество);
	Областьстандартов = Макет.ПолучитьОбласть("Стандарты");
	ТабДокумент.Вывести(Областьстандартов);
    ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
	ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельства()

//печать качественного
Функция  ПечатьКачественногоСвидетельстваДонецк() Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Реализатор КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(МойОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(МойОбъект.Дата));
	Запрос.УстановитьПараметр("Регион", Справочники.РегионыРеализации.НайтиПоНаименованию("Донецкая область (АТО)"));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапросПоТоварам.Номенклатура,
	               |	ВЫРАЗИТЬ(ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК СТРОКА(100)) КАК Товар,
	               |	ВложенныйЗапросПоТоварам.Номенклатура.Код КАК Код,
	               |	ВложенныйЗапросПоТоварам.Номенклатура.Артикул КАК Артикул,
	               |	ВложенныйЗапросПоТоварам.Количество,
	               |	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	               |	ВложенныйЗапросПоТоварам.ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	               |	ВложенныйЗапросПоТоварам.ХарактеристикаНоменклатуры КАК Характеристика
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	               |		РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	               |		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |		СУММА(РеализацияТоваровУслуг.Количество) КАК Количество
	               |	ИЗ
	               |		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	               |	ГДЕ
	               |		РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	               |		И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	               |		И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	               |		И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		РеализацияТоваровУслуг.Номенклатура,
	               |		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	               |		РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	               |		РеализацияТоваровУслуг.ЕдиницаИзмеренияМест) КАК ВложенныйЗапросПоТоварам
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Товар";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Качественное";
	ПараметрыПечати(ТабДокумент);
	Макет = МойОбъект.ПолучитьМакет("Качественное");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДок = "ПОСВІДЧЕННЯ ПРО ЯКІСТЬ №___________";
	ОбластьМакета.Параметры.ПредставлениеПоставщика = СокрЛП(МойОбъект.Организация.НаименованиеПолное) + "   Адреса: 61172, м.Харків, вул. Роганська, 151.";
	ОбластьМакета.Параметры.Отправитель = СокрЛП(МойОбъект.Организация.НаименованиеПолное) +"   ( експлуатаційний дозвіл № 20 29 20 Mt)";
	ОбластьМакета.Параметры.ПредставлениеПокупателя = Справочники.Контрагенты.НайтиПоКоду("000003450"); //МойОбъект.Контрагент.Наименование ;
	ОбластьМакета.Параметры.ДатаДок = "Дата відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+"  вид і номер транспортного засобу ___________________ ";
	ОбластьМакета.Параметры.НомерДок2 = " Накладна (сертифікація) №  ____________________________ від "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00  для реалізації";
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
    ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ВыборкаСтрокТовары.Количество=0 тогда
			продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
	    //чтение свойств номенклатуры
		ЗапросРегСвед = Новый Запрос("ВЫБРАТЬ
				| *
				| ИЗ
				| РегистрСведений.ЗначенияСвойствОбъектов
				| ГДЕ Объект=&ООО");

		ЗапросРегСвед.УстановитьПараметр("ООО",ВыборкаСтрокТовары.Номенклатура);
		РегСвед =ЗапросРегСвед.Выполнить().Выгрузить();

		
		
		Для Каждого Запись ИЗ РегСвед Цикл   
			//Предупреждение("Свойство "+Запись.Свойство+"   "+"Запись.Значение "+ Запись.Значение, 10);
			Если СокрЛП(Запись.Свойство)="Время хранения"  Тогда
				ВрХранения=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Температура хранения"   Тогда
				Темп=Запись.Значение;
			КонецЕсли;	
			Если СокрЛП(Запись.Свойство)="Оболочка"    Тогда
				Обол=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Упаковка"    Тогда
				Упак=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Влажность хранения" Тогда
				Влаж=Запись.Значение;
			КонецЕсли;		
		КонецЦикла;		
	
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура;
		ОбластьДанных.Параметры.Артикул= ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.Влажность=Влаж;
		ОбластьДанных.Параметры.Температура=Темп;
		ОбластьДанных.Параметры.СрокГодности=ВрХранения;
		ОбластьДанных.Параметры.Количество=ВыборкаСтрокТовары.Количество;
		//ОбластьДанных.Параметры.ДатаИВремя = Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 ";
		ОбластьДанных.Параметры.ДатаИВремя = Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+?(ЭтотОбъект.Контрагент.Код="000002720", " 10:00:00 "  ," 08:00:00 ");//Алексеенко А.А 06-02-2014
		
		//ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Вывести(ОбластьДанных);
		
		//ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
        //ВсегоКоличество=ВсегоКоличество+?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);
        ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);        
	КонецЦикла;
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество= ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
    ТабДокумент.Вывести(ОбластьИтогоКоличество);
	Областьстандартов = Макет.ПолучитьОбласть("Стандарты");
	ТабДокумент.Вывести(Областьстандартов);
    ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
	ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельстваДонецк()

//печать менеджеру    
Функция ПечатьМенеджеру() Экспорт

	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	//#Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Родитель.Наименование КАК Родитель,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|	ПроцентСкидкиНаВес,
	|	СкидкаНаВес
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	    ПроцентСкидкиНаВес,
	|	    СкидкаНаВес,	
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|       ПроцентСкидкиНаВес,
	|	    СкидкаНаВес	
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	 Родитель, Номенклатура, Характеристика
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	
		Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	//ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяРасходнаяОсновныеЦены";
    
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    ПараметрыПечати(ТабДокумент);
    Макет = МойОбъект.ПолучитьМакет("НакладнаяРасходнаяОсновныеЦены");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "НАКЛАДНАЯ № "+СокрЛП(МойОбъект.Номер)+" от " +Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = МойОбъект.Контрагент.Наименование +" "+МойОбъект.АдресДоставки; 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
//	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	ВыводитьКоды = Ложь;
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	ВсегоКолШт      =0;
    ВсегоСумма=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		ОбластьДанных.Параметры.Упаковка= СокрЛП(ВыборкаСтрокТовары.Характеристика)+" ";
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		Если МойОбъект.Контрагент.Родитель.Код="000001125" ИЛИ
			 	МойОбъект.Контрагент.Родитель.Код="000001258" ИЛИ
					МойОбъект.Контрагент.Родитель.Код="000001257" ИЛИ
						МойОбъект.Контрагент.Родитель.Код="000001128" тогда  
			СтрокаПоходТорговойСети=" ("+ВыборкаСтрокТовары.ПроцентСкидкиНаВес+"%-"+ВыборкаСтрокТовары.СкидкаНаВес+" )";
		Иначе	
		    СтрокаПоходТорговойСети="";
		КонецЕсли;
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Родитель)+"-"+СокрП(ВыборкаСтрокТовары.Товар)+СтрокаПоходТорговойСети+
						?(РольДоступна("Филиал") или РольДоступна("ФилиалРуководитель") ,"("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+")","");
		
		ОбластьДанных.Параметры.Количество=ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.ЕдиницаИзмерения=ВыборкаСтрокТовары.ЕдиницаИзмерения;
        //*** "кг.";
		
		//Сообщить(ВыборкаСтрокТовары.Товар);
		НомСсылка = ВыборкаСтрокТовары.Номенклатура;
		//Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаСтрокТовары.Товар); 
		ТицЦенСсылка = МойОбъект.Контрагент.ЦенаДляПечати ;
		
		Если ТицЦенСсылка =Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() тогда
			 ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		КонецЕсли;

		//ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
    	Если СокрЛП(ВыборкаСтрокТовары.Характеристика)=""   тогда
			ХарНом=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			
			//Выбрать(<Родитель>, <Владелец>, <Отбор>, <Порядок>) 
			ОтборХарактеристики=Новый Структура;
			ОтборХарактеристики.Вставить("Наимнование", СокрЛП(ВыборкаСтрокТовары.Характеристика));
			//ОтборХарактеристики.Вставить("Активная", Истина);
			ХарНомВыборка =Справочники.ХарактеристикиНоменклатуры.Выбрать(,НомСсылка,);
			Пока ХарНомВыборка.Следующий() Цикл
				Если СокрЛП(ХарНомВыборка.Наименование)=СокрЛП(ВыборкаСтрокТовары.Характеристика) тогда
					 //Сообщить("ХарНомВыборка "+ХарНомВыборка.Ссылка);
					 ХарНом=ХарНомВыборка.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Найти код характеристики номенклатуры
		//Сообщить("ТицЦенСсылка "+ТицЦенСсылка);
		//СтруктураОтбор = Новый Структура;
		//СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		//СтруктураОтбор.Вставить("Номенклатура",НомСсылка);
		//СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарНом);
		//***АЛ 06-02-2014
		Если МойОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС И 
			(МойОбъект.Контрагент.Родитель.Код="000000001" ИЛИ МойОбъект.Контрагент.Родитель.Код="000000338") тогда
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Контрагент", МойОбъект.Контрагент);
			СтруктураОтбор.Вставить("Номенклатура",НомСсылка);
			СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарНом);
			ВыборкаД = РегистрыСведений.ЦеныМенеджера.ПолучитьПоследнее(КонецДня(МойОбъект.Дата),СтруктураОтбор);		
		Иначе
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
			СтруктураОтбор.Вставить("Номенклатура",НомСсылка);
			СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарНом);
			ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(МойОбъект.Дата,СтруктураОтбор);
		КонецЕсли;	
		//ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(МойОбъект.Дата,СтруктураОтбор);
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ОбластьДанных.Параметры.Цена=Цена;
		
		ОбластьДанных.Параметры.Сумма=ВыборкаСтрокТовары.Количество*Цена;
		ТабДокумент.Присоединить(ОбластьДанных);
		//ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
        //ВсегоКоличество=ВсегоКоличество+?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);		
		//*** AL  ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
		ВсегоСумма=ВсегоСумма+Окр(ВыборкаСтрокТовары.Количество*Цена,2,1);
	КонецЦикла;
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.Всего= ВсегоСумма;
	ТабДокумент.Вывести(ОбластьИтого);
	
	ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");
	ОбластьИтогоНДС.Параметры.ВсегоНДС= ВсегоСумма/6;
	ТабДокумент.Вывести(ОбластьИтогоНДС);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = ВсегоСумма;// + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	//*** ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," + "    в кiлькостi "+ВсегоКоличество+" кг." ;
 	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+ВсегоКоличество+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;

	
	
	
	
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + НСтр("ru='.  В т.ч. НДС: ';uk='.  У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма/6, Шапка.ВалютаДокумента, КодЯзыкаПечать);
										   
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
//****AL
	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки+10;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура);			
			ОбластьДанных.Параметры.Цена	= Формат(?(ВыборкаСтрокТара.Количество=0,0,ВыборкаСтрокТара.Сумма/ВыборкаСтрокТара.Количество),"ЧДЦ=2");
			ОбластьДанных.Параметры.Сумма= Формат(ВыборкаСтрокТара.Сумма,"ЧДЦ=2");
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ОбластьДанных .Параметры.ВсегоСуммаТары=ЗаполнениеДокументов.ФорматСумм(СуммаТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		 		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли; 	
	ОбластьМакета = Макет.ПолучитьОбласть("ОтгрузилПолучил");
	ОбластьМакета.Параметры.Выписал=глЗначениеПеременной("глТекущийПользователь");

	ТабДокумент.Вывести(ОбластьМакета);
	
	возврат ТабДокумент;
КонецФункции

//	Возврат ТабДокумент;
//		
//КонецФункции // ПечатьДокумента()
//	
// Функция формирует табличный документ с печатной формой акта об
// обказании услуг
//
// Возвращаемое значение:
//  Табличный документ - печатная форма акта
//
Функция ПечатьАктаОбОказанииУслуг(СуммыВРублях = Ложь)
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Контрагент.ЮрФизЛицо КАК ПокупательЮрФизЛицо,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	НомерСтроки 			КАК НомерСтрокиТЧ,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Номенклатура,
	|	" + СтрокаВыборкиПоляСодержания + " КАК Товар,
	|	Номенклатура.Код     	КАК Код,
	|	Номенклатура.Артикул 	КАК Артикул,
	|	Количество,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	NULL КАК Характеристика,
	|	NULL КАК Серия,
	|	NULL КАК Порции	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиТЧ
	|";
	ЗапросТовары = ЗапросУслуги.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Акт";
	Макет       = ПолучитьМакет("Акт");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку Акта
	
	СведенияОПоставщике 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе 	= УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	РуководителиОрганизации = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизации(Шапка.Организация, Шапка.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ДолжностьРуководителяПоставщика = РуководителиОрганизации.РуководительДолжность;
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РуководительПоставщика 			=  РуководителиОрганизации.Руководитель;
	ОбластьМакета.Параметры.ДолжностьРуководителяПокупателя = ?(Шапка.ПокупательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "Директор", "");
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='АКТ сдачи-приемки работ (оказания услуг)';uk='АКТ здачі-прийняття робіт (надання послуг)'",КодЯзыкаПечать) + Символы.ПС,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	// Начинаем формировать собственно текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаНачало");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПредставлениеПокупателя 		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// выводим сведения о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";	
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	// Заканчиваем формировать текст акта
	ОбластьМакета = Макет.ПолучитьОбласть("ТекстАктаКонец");
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим табличную часть
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
			
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;
	
	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;

	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		Если ВыводитьКоды Тогда
			Если Колонка = "Артикул" Тогда
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Артикул;
			Иначе
				ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
			КонецЕсли;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар) + ФормированиеПечатныхФорм.ПредставлениеСерий(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьДанных);

		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьСуммы.Параметры.Всего = ЗаполнениеДокументов.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.ВсегоНДС = ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Сумма = ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// Выводим Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");	
	СуммаКПрописиСНДС 	= Сумма + ?(Шапка.СуммаВключаетНДС, 	   0, СуммаНДС);
	СуммаКПрописиБезНДС = Сумма - ?(Шапка.СуммаВключаетНДС, СуммаНДС, 		 0);
	Если Шапка.УчитыватьНДС Тогда
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила без НДС ';uk='Загальна вартість робіт (послуг) без ПДВ склала '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', НДС ';uk=', ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 НСтр("ru=', общая стоимость работ (услуг) с НДС ';uk=', загальна вартість робіт (послуг) з ПДВ '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиСНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) +
												 ".";												 											 
 	Иначе
		ОбластьМакета.Параметры.СуммаПрописью  = НСтр("ru='Общая стоимость работ (услуг) составила ';uk='Загальна вартість робіт (послуг) склала '",КодЯзыкаПечать)	+ ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописиБезНДС, Шапка.ВалютаДокумента,КодЯзыкаПечать) + ".";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	// выводим подписи
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,НомерСчета,Банк,МФО,/,ЮридическийАдрес,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	  ОбластьМакета.Параметры.РеквизитыПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,/,КодПоЕДРПОУ,КодПоДРФО,Телефоны,/,ИНН,НомерСвидетельства,/,ЮридическийАдрес,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()
	
// Функция осуществляет запуск обработки формирующей печатную форму "Бланк товарного наполнения".
//
// Параметры:
//  НаПринтер - Булево. Если Истина, тогда печать выполняется непосредственно на принтер.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ПечатьБланк(НаПринтер)

	Обработки.ПечатьРаскладкиНоменклатурыПоМестамХранения.Создать().НапечататьИзДокумента(Ссылка, , , НаПринтер);

	Возврат Неопределено;

КонецФункции // ПечатьБланк()
	
// Процедура осуществляет печать документа. Можно направить печать на 
// экран или принтер, а также распечатать необходмое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
//
// Параметры:
//  НазваниеМакета - строка, название макета.
//
Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
		
	Если ЭтоНовый() Тогда
		Предупреждение("Документ можно распечатать только после его записи");
		Возврат;
	ИначеЕсли Не УправлениеПользователями.РазрешитьПечатьНепроведенныхДокументов(Проведен) Тогда
		Предупреждение("Недостаточно полномочий для печати непроведенного документа!");
		Возврат;
	КонецЕсли; 
		
	Если Не РаботаСДиалогами.ПроверитьМодифицированность(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
	// Получить экземпляр документа на печать
	Если ИмяМакета = "Накладная" Тогда
		ТабДокумент = ПечатьДокумента();
	ИначеЕсли ИмяМакета = "НакладнаяСоСкидкой" Тогда	
		ТабДокумент = ПечатьДокументаСоСкидкой();
	ИначеЕсли ИмяМакета = "Акт" Тогда
		ТабДокумент = ПечатьАктаОбОказанииУслуг(Ложь);
	ИначеЕсли ИмяМакета = "Заявка" Тогда
		ТабДокумент = ПечатьЗаявки();
		Если не ЭтотОбъект.Заблокирован() тогда
			ЭтотОбъект.Заявка=Истина;
			ЭтотОбъект.Записать();
		КонецЕсли;
	ИначеЕсли ИмяМакета = "ПечатьНедогрузовПоСекциям" Тогда
		ТабДокумент = ПечатьНедогрузовПоСекциям();
	ИначеЕсли ИмяМакета = "ЗаявкаПоСекциям" тогда 
		ТабДокумент = ПечатьЗаявкиПоСекциям();
		Если не ЭтотОбъект.Заблокирован() тогда
			ЭтотОбъект.Заявка=Истина;
			ЭтотОбъект.Записать();
		КонецЕсли;
	ИначеЕсли ИмяМакета = "Декларация" Тогда
		ТабДокумент = ПечатьДекларации();
	ИначеЕсли ИмяМакета = "ДекларацияПроизводителя" Тогда
		ТабДокумент = ПечатьДекларацииПроизводителя();
	ИначеЕсли ИмяМакета = "НакладнаяРасходнаяОсновныеЦены" Тогда
		ТабДокумент = ПечатьМенеджеру();
	ИначеЕсли ИмяМакета = "Качественное" Тогда
		ТабДокумент = ПечатьКачественногоСвидетельства();
	ИначеЕсли ИмяМакета = "ТоварноТранспортнаяНакладная_1ТН" Тогда
		ТабДокумент = ПечатьТТН();
	ИначеЕсли ИмяМакета = "ТранспортнаяНакладная" Тогда
		ТабДокумент = ПечатьТН();
    ИначеЕсли ИмяМакета = "НакладнаяПоддоныФоззи" Тогда    
        ТабДокумент = ПечатьНакладнойПоддоныФоззи();
	ИначеЕсли ИмяМакета = "Бланк" Тогда
		ТабДокумент = ПечатьБланк(НаПринтер);
	ИначеЕсли ИмяМакета = "ПроформаНаТару" 	Тогда
		ТабДокумент = ПечатьПроформаНаТаруТаможня();
	ИначеЕсли ИмяМакета = "УпаковочныйЛист" 	Тогда
		ТабДокумент = УпаковочныйЛистТаможня();
	ИначеЕсли ИмяМакета = "ПечатьКачественногоСвидетельстваДонецк" 	Тогда
		ТабДокумент = ПечатьКачественногоСвидетельстваДонецк();
	ИначеЕсли ИмяМакета = "НакладнаяДНР"	Тогда
		ТабДокумент = НакладнаяРасходнаяДНР();
	ИначеЕсли ИмяМакета = "ДекларацияДНР"	Тогда	
		ТабДокумент = ДекларацииПроизводителяДНР();
	ИначеЕсли ИмяМакета = "ПечатьНакладнойКК"	Тогда	
		//000003133
		ЕСЛИ ЭтотОбъект.Контрагент.Супервайзер.Код="000003133" И РольДоступна("Филиал") 
			И ПараметрыСеанса.РегионПользователя=Справочники.РегионыРеализации.НайтиПоНаименованию("Донецкая область (АТО)")
			тогда
			ТабДокумент = ПечатьНакладнойКК();
		Иначе
			ТабДокумент = ПечатьДокумента();
		КонецЕсли;	
	ИначеЕсли ИмяМакета = "ПечатьТТН2014"	Тогда	
			//000003133
			ТабДокумент = ПечатьТТН2014();
	ИначеЕсли ИмяМакета = "ТТН_Мариуполь"	Тогда	
			//000003133
			ТабДокумент = ТТН_Мариуполь()		
	ИначеЕсли ИмяМакета = "НакладнаяРасходнаяДНРКС"	Тогда	
			//000003133
			ТабДокумент = НакладнаяРасходнаяДНРКС();
	ИначеЕсли ИмяМакета = "НакладнаяРасходнаяДНРКК"	Тогда	
			ТабДокумент = НакладнаяРасходнаяДНРКК();
	ИначеЕсли ИмяМакета = "ДекларацияПроизводителяКК"	Тогда				
		ТабДокумент = ДекларацияПроизводителяДНР(Истина);
	ИначеЕсли ИмяМакета = "ДекларацияПроизводителяВысоцкий"	Тогда				
		ТабДокумент = ДекларацияПроизводителяДНР(Ложь);
	ИначеЕсли ИмяМакета = "КачественноеКК"	Тогда				
		ТабДокумент = КачественноеСвидетельствоДНР(Истина);
	ИначеЕсли ИмяМакета = "КачественноеВысоцкий"	Тогда				
		ТабДокумент = КачественноеСвидетельствоДНР(Ложь);
	ИначеЕсли ИмяМакета = "ТТН_Региона" Тогда	
		ТабДокумент = ПечатьТТН_Региона();
	ИначеЕсли ИмяМакета = "ЭтапыОтгрузки" Тогда
		ТабДокумент = ЭтапыОтгрузкиПечать();
	ИначеЕсли ИмяМакета = "ОперацииОтгрузки" Тогда
		ТабДокумент = ОперацииОтгрузкиПечать();
	ИначеЕсли ИмяМакета = "ТранспУпаковки" Тогда
		Обр   = Обработки.ТранспортныеУпаковки.Создать();
		Форма = Обр.ПолучитьФорму(,ЭтотОбъект,);
		Если Форма.Открыта() Тогда
			Форма.Активизировать();
		Иначе
			Форма.Открыть();
			Форма.ПервоначальноеЗаполнение(Ссылка);
		КонецЕсли;
			
	ИначеЕсли ИмяМакета = "СерийныеНомера" Тогда
			
		ТабДокумент = УчетСерийныхНомеров.ПечатьСерийныхНомеров(Ссылка, "Товары");
			
	ИначеЕсли ТипЗнч(ИмяМакета) = Тип("ДвоичныеДанные") Тогда
			
		ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Ссылка, ИмяМакета);
			
		Если ТабДокумент = Неопределено Тогда
			Возврат
		КонецЕсли; 
			
	КонецЕсли;
		
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект), Ссылка);
		
КонецПроцедуры // Печать
	
// Возвращает доступные варианты печати документа
//
// Вовращаемое значение:
//  Струткура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
		
	СтруктПечатныхФорм = Новый Структура;
	СтруктПечатныхФорм.Вставить( "Накладная",    	"Расходная накладная");
	Если не РольДоступна("Филиал") И не РольДоступна("ФилиалРуководитель") тогда
		СтруктПечатныхФорм.Вставить("Заявка",   "Заявка покупателя");
		СтруктПечатныхФорм.Вставить("ЗаявкаПоСекциям",   "Заявка по секциям");
		СтруктПечатныхФорм.Вставить("ПечатьНедогрузовПоСекциям",  "Недогруз по секциям");	
		СтруктПечатныхФорм.Вставить("Декларация",   "Декларация");		
		СтруктПечатныхФорм.Вставить("ДекларацияПроизводителя",   "Декларация производителя");		
		СтруктПечатныхФорм.Вставить("ТоварноТранспортнаяНакладная_1ТН",   "Товарно-транспортная накладная");
		СтруктПечатныхФорм.Вставить("ТранспортнаяНакладная",   "Транспортная накладная");	
    	СтруктПечатныхФорм.Вставить("НакладнаяПоддоныФоззи",   "Накладная на поддоны Фоззи");		
		СтруктПечатныхФорм.Вставить("НакладнаяСоСкидкой","Расходная накладная со скидкой");
	КонецЕсли;	
	СтруктПечатныхФорм.Вставить("Качественное",  					"Качественное");	
	СтруктПечатныхФорм.Вставить("НакладнаяРасходнаяОсновныеЦены",   "Накладная менеджеру");	

	//СтруктПечатныхФорм.Вставить( "ПроформаНаТару",  "Проформа на тару (таможня Крым)");    
	//СтруктПечатныхФорм.Вставить( "УпаковочныйЛист", "Упаковочный лист (таможня Крым)");	
	//СтруктПечатныхФорм.Вставить( "ПечатьКачественногоСвидетельстваДонецк", "Качественное (Итогом по АТО)");	
	//СтруктПечатныхФорм.Вставить( "НакладнаяДНР" , "Накладная  (Итогом по КК)");	
	//СтруктПечатныхФорм.Вставить( "ДекларацияДНР", "Декларация производителя (Итогом по КК)");	
	//СтруктПечатныхФорм.Вставить( "ПечатьНакладнойКК", "Накладная КК");	
	//СтруктПечатныхФорм.Вставить( "НакладнаяРасходнаяДНРКК", "Накладная РМК-КК (пакет 2) ");	
	//СтруктПечатныхФорм.Вставить( "НакладнаяРасходнаяДНРКС", "Накладная КС-Высоцкий (пакет 2)");	
	//СтруктПечатныхФорм.Вставить( "ПечатьТТН2014", "ТТН (Итогом по КК)");		
	
	//СтруктПечатныхФорм.Вставить( "ТТН_Мариуполь", "ТТН - для г.Мариуполь (ЧП Братишко)");
	
	//СтруктПечатныхФорм.Вставить( "ДекларацияПроизводителяКК", "Декларация КК (пакет 2) ");	
	//СтруктПечатныхФорм.Вставить( "ДекларацияПроизводителяВысоцкий", "Декларация КС-Высоцкий (пакет 2)");	
	   //СтруктПечатныхФорм.Вставить( "КачественноеКК", "Качественное КК (пакет 2) ");	
	//СтруктПечатныхФорм.Вставить( "КачественноеВысоцкий", "Качественное КС-Высоцкий (пакет 2)");	
	СтруктПечатныхФорм.Вставить( "ТТН_Региона", "ТТН Региона");	
	Если не РольДоступна("Филиал") И не РольДоступна("ФилиалРуководитель") тогда	
		СтруктПечатныхФорм.Вставить( "ЭтапыОтгрузки",          	"Этапы отгрузки");	
		СтруктПечатныхФорм.Вставить( "Акт",          	"Акт об оказании услуг");
		СтруктПечатныхФорм.Вставить( "Бланк",           "Бланк товарного наполнения (адресный склад)");
		СтруктПечатныхФорм.Вставить( "ТранспУпаковки",  "Штрихкоды транспортных упаковок");
		СтруктПечатныхФорм.Вставить("СерийныеНомера",   "Список серийных номеров");
		СтруктПечатныхФорм.Вставить( "ОперацииОтгрузки",		"Операции отгрузки");	
	КонецЕсли;
	Возврат СтруктПечатныхФорм;
		
КонецФункции // ПолучитьСтруктуруПечатныхФорм()
	
#КонецЕсли

// Проверяет необходимость расчета автоматических скидок
//
Функция РассчитыватьАвтоматическиеСкидки()
	
	ИспользованиеСкидок = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата);
	Если ИспользованиеСкидок.ИспользоватьСкидкиПоКоличествуТовара
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоСуммеДокумента
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоВидуОплаты
		Или ИспользованиеСкидок.ИспользоватьСкидкиПоДисконтнойКарте Тогда
		мРассчитыватьАвтоматическиеСкидки = Истина;
	Иначе
		мРассчитыватьАвтоматическиеСкидки = Ложь;
	КонецЕсли;
	
	Если НЕ мРассчитыватьАвтоматическиеСкидки
		Или Проведен Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет добавление возвратной тары из документа поступления товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание.
//
Процедура ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокПоступление) Экспорт

	ТабТара = ДокПоступление.ВозвратнаяТара.Выгрузить();
	ТабТара.ЗаполнитьЗначения(0, "Цена,Сумма");
	ТабТара.Колонки.Заказ.Имя = "ЗаказПокупателя";
	
	ВозвратнаяТара.Загрузить(ТабТара);
	Для Каждого СтрокаТара Из ВозвратнаяТара Цикл
		СтрокаТара.СпособСписанияОстаткаТоваров = ?(НЕ ЗначениеЗаполнено(СтрокаТара.ЗаказПокупателя),
			Перечисления.СпособыСписанияОстаткаТоваров.СоСклада,
			Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВозвратнуюТаруПоПоступлениюТоваровУпр()

// Процедура выполняет заполниение возвратной тары по поступлению Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(ДокументОснование, МассивЗаказов) Экспорт
	
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокТары = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара 
	|ГДЕ Ссылка = &ДокументСсылка";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Номенклатура КАК Номенклатура,
	|	Док.Склад        КАК Склад,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	ВЫБОР
	|		КОГДА ЛимитыТары.ЛимитПокупателю ЕСТЬ NULL  // Остатки тары у покупателя в регистре отрицательные
	|			ИЛИ (Док.Количество - ОстаткиТары.КоличествоОстаток) < (ЛимитыТары.ЛимитПокупателю) ТОГДА
	|			Док.Количество
	|		КОГДА ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток > 0 ТОГДА
	|			ЛимитыТары.ЛимитПокупателю + ОстаткиТары.КоличествоОстаток
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ КАК КоличествоТары, // минимум из указанного в документе, и которое можно отгрузить (лимит - уже отгружено)
	|	Остатки.КоличествоОстаток КАК ОстатокТары
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЛимитыВозвратнойТары.СрезПоследних(, 
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары +")  
	|	) КАК ЛимитыТары
	|ПО 
	|	ЛимитыТары.Номенклатура = Док.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыПереданные.Остатки(&ДатаОстатков,
	|	                ДоговорКонтрагента = &ДоговорКонтрагента
	|	              И Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|	              И СтатусПередачи = &СтатусПередачи 
	|	) КАК ОстаткиТары
	|ПО 
	|	ОстаткиТары.Номенклатура = Док.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|		Номенклатура В (" + ТекстЗапросаСписокТары + ") 
	|		// УСЛОВИЕ_СкладИзШапки
	|	    ) КАК Остатки
	|ПО
	|	Док.Номенклатура = Остатки.Номенклатура
	|	И Док.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|";
	
	Если МассивЗаказов <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "И Док.Заказ В(&МассивЗаказов)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Док.Заказ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// УСЛОВИЕ_СкладИзШапки", ?(мУказаниеСкладовВТЧ, "", "И Склад = &Склад"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента"   , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ПустойЗаказПокупателя", Неопределено);
	Запрос.УстановитьПараметр("ДокументСсылка"       , ДокументОснование);
	Запрос.УстановитьПараметр("Склад"                , Склад);
	Запрос.УстановитьПараметр("СтатусПередачи"       , Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("ДатаОстатков"		 , ЗаполнениеДокументов.ПолучитьДатуОстатков(ЭтотОбъект));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОстатокТары = ?(Выборка.ОстатокТары = NULL, 0, Выборка.ОстатокТары);
		Количество  = Мин(Выборка.КоличествоТары, ОстатокТары);
		
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВозвратнойТары = ВозвратнаяТара.Добавить();
		
		СтрокаВозвратнойТары.Номенклатура    = Выборка.Номенклатура;
		СтрокаВозвратнойТары.ЗаказПокупателя = Выборка.ЗаказПокупателя;
		СтрокаВозвратнойТары.Склад           = Выборка.Склад;
		СтрокаВозвратнойТары.Количество      = Количество;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаВозвратнойТары, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
		// Получим цену из регистра сведений ЦеныНоменклатуры
		Если НЕ ЗначениеЗаполнено(ТипЦен)
			или (НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов)) Тогда 
			СтрокаВозвратнойТары.Цена = 0;
		Иначе
			// из регистра
			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаВозвратнойТары.Номенклатура, , ТипЦен, Дата,
			СтрокаВозвратнойТары.Номенклатура.ЕдиницаХраненияОстатков, ДоговорКонтрагента.ВалютаВзаиморасчетов,
			КурсВзаиморасчетов, КратностьВзаиморасчетов, , ДоговорКонтрагента);
			
			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки бурутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаВозвратнойТары.Цена = 0;
			Иначе
				СтрокаВозвратнойТары.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС, Истина,
				Ценообразование.ПолучитьСтавкуНДС(СтрокаВозвратнойТары.Номенклатура.СтавкаНДС));
				ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаВозвратнойТары, ЭтотОбъект);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВозвратнуюТаруПоПоступлениюТоваров()

// Процедура выполняет заполниение табличной части по поступлению товаров.
// Заполним табличные части по документу основанию (Поступление товаров);
// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//
Процедура ЗаполнитьТоварыПоПоступлениюТоваровУпр(ДокументОснование,ИмяТЧ = "Товары", МассивЗаказов = Неопределено) Экспорт
	
	СкладыВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
	
	Если НЕ СкладыВТЧ И НЕ ЗначениеЗаполнено(Склад) Тогда
		Если ДокументОснование.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
			Склад = ДокументОснование.СкладОрдер.Склад;
		Иначе			
			Склад = ДокументОснование.СкладОрдер;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад"            , Склад);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Качество"         , Справочники.Качество.Новый);
	Запрос.УстановитьПараметр("ДатаОстатков"	 , ЗаполнениеДокументов.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ЕстьЗаказы = МассивЗаказов <> Неопределено;
	Если ЕстьЗаказы Тогда
		Запрос.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	                                                                  
	// Текст вложенного запроса, ограничивающего номенклатуру при получении остатков
	ТекстЗапросаСписокНоменклатуры = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Номенклатура 
	|ИЗ 
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " 
	|ГДЕ Ссылка = &ДокументОснование";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Номенклатура,
	|	Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Док.СтавкаНДС,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) < МАКСИМУМ(Остатки.КоличествоОстаток)
	|		ТОГДА
	|			СУММА(Док.Количество * Док.Коэффициент / Док.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент)
	|		ИНАЧЕ
	|			МАКСИМУМ(Остатки.КоличествоОстаток)
	|	КОНЕЦ КАК МинКоличествоВДокументеОстаток,
	|	%ПОЛЕ_Док_ЗаказПокупателя% КАК ЗаказПокупателя,
	|	Док.ХарактеристикаНоменклатуры,"
	+ ?(СкладыВТЧ, "
	|	Док.Склад, ", "") + "
	|	Док.СерияНоменклатуры
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг." + ИмяТЧ + " КАК Док
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков,
	|	                                           Номенклатура В (" + ТекстЗапросаСписокНоменклатуры + ") "
	+ ?(СкладыВТЧ, "", "
	|	                                           И Склад    = &Склад") + "
	|	                                           И Качество = &Качество
	|	                                           ) КАК Остатки
	|ПО
	|	Док.Номенклатура                 = Остатки.Номенклатура
	|	И Док.ХарактеристикаНоменклатуры = Остатки.ХарактеристикаНоменклатуры
	|	И Док.СерияНоменклатуры          = Остатки.СерияНоменклатуры "
	+ ?(СкладыВТЧ, "
	|	И Док.Склад          = Остатки.Склад", "") + "
	|
	|ГДЕ Док.Ссылка = &ДокументОснование 
	|	// УСЛОВИЕ_ПО_ЗАКАЗАМ
	|
	|СГРУППИРОВАТЬ ПО
	|	Док.Номенклатура,
	|	Док.СтавкаНДС,
	|	Док.ХарактеристикаНоменклатуры,
	|	// ГРУППИРОВКА_ПО_ЗАКАЗАМ
	|	Док.СерияНоменклатуры" 
	+ ?(СкладыВТЧ, ", 
	|	Док.Склад", "") + "
	|
	|УПОРЯДОЧИТЬ ПО НомерСтроки
	|";
	
	Если ЕстьЗаказы Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      " И Док.Заказ В(&МассивЗаказов) ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  " Док.Заказ, ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", " Док.Заказ ");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// УСЛОВИЕ_ПО_ЗАКАЗАМ",      "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "// ГРУППИРОВКА_ПО_ЗАКАЗАМ",  "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПОЛЕ_Док_ЗаказПокупателя%", "Неопределено");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		СписКоличество = Выборка.МинКоличествоВДокументеОстаток;
		
		Если НЕ ЗначениеЗаполнено(СписКоличество) ИЛИ СписКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Товары.Добавить();
		
		СтрокаТабличнойЧасти.Номенклатура               = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.СтавкаНДС                  = Выборка.СтавкаНДС;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Выборка.СерияНоменклатуры;
		СтрокаТабличнойЧасти.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		СтрокаТабличнойЧасти.Качество                   = Справочники.Качество.Новый;
		
		Если СкладыВТЧ Тогда
			СтрокаТабличнойЧасти.Склад = Выборка.Склад;
		Иначе
			СтрокаТабличнойЧасти.Склад = Склад;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
		СтрокаТабличнойЧасти.Количество = (СписКоличество * Выборка.КоэффициентЕдиницыХранения) / СтрокаТабличнойЧасти.Коэффициент;
		
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	
	// Расчет скидок
	Если РассчитыватьАвтоматическиеСкидки() Тогда
		мМинимальныеЦены = Новый ТаблицаЗначений;
		мМинимальныеЦены.Колонки.Добавить("Номенклатура");
		мМинимальныеЦены.Колонки.Добавить("ХарактеристикаНоменклатуры");
		мМинимальныеЦены.Колонки.Добавить("ЕдиницаИзмерения");
		мМинимальныеЦены.Колонки.Добавить("Цена");
		
		мСписокФильтров = УправлениеПользователями.ПолучитьЗначениеПраваПользователя(
		ПланыВидовХарактеристик.ПраваПользователей.НеОтпускатьТоварСЦенойНижеОпределенногоТипа,
		Неопределено);
		
		мСуммаДокументаБезСкидок = Ценообразование.ПолучитьСуммуДокументаБезСкидки(Товары);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ВидРеализации",                        Перечисления.ВидыСкидок.Оптовая);
		СтруктураПараметров.Вставить("СуммаДокумента",                       мСуммаДокументаБезСкидок);
		СтруктураПараметров.Вставить("Карта",                                ДисконтнаяКарта);
		СтруктураПараметров.Вставить("УчитыватьНДС",                         УчитыватьНДС);
		СтруктураПараметров.Вставить("СуммаВключаетНДС",                     СуммаВключаетНДС);
		СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета",       мВалютаРегламентированногоУчета);
		СтруктураПараметров.Вставить("УчетнаяПолитика",       РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата));
		ОбработкаТабличныхЧастей.РассчитатьСкидкиПриПродаже(ЭтотОбъект, Товары, СтруктураПараметров,  мМинимальныеЦены, мСписокФильтров);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТоварыПоПоступлениюТоваров()

// Заполняет склды в табличной части документа значением из шапки вызывается перед 
// записью и перед заполнением по кнопке "Заполнить и провести"
//
Процедура ЗаполнитьСкладыВТЧ()
	
	мКэшЗаказПокупателя = Новый Соответствие;
	ЗапросаСкладГруппа = Новый Запрос;
	ЗапросаСкладГруппа.Текст = "ВЫБРАТЬ СкладГруппа КАК СкладГруппа ИЗ Документ.ЗаказПокупателя ГДЕ Ссылка = &Ссылка";

	// Заполним реквизит склад в табличных частях "Товары" и "Возвратная тара"
	СкладИзШапки    =  Не мУказаниеСкладовВТЧ;
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	Для каждого СтрокаТЧ из Товары Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			СтрокаТЧ.Склад = Склад;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				СтрокаТЧ.Склад = Склад;
			Иначе
				СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
		//***160705
		Если СтрокаТЧ.УникальныйКодТовара="" тогда
			//ГСЧ = Новый ГенераторСлучайныхЧисел();
			КолСтрок=Ящики.Количество();
			//СтрокаТЧ.УникальныйКодТовара=Формат(Число(Формат(КолСтрок,"ЧН=0; ЧВН=; ЧГ=0")+Формат(ГСЧ.СлучайноеЧисло(30000, 90000),"ЧЦ=5; ЧН=0; ЧВН=; ЧГ=0")),"ЧЦ=10; ЧДЦ=0; ЧН=0; ЧВН=; ЧГ=0" );	
			СтрокаТЧ.УникальныйКодТовара=Формат(Число(Формат(КолСтрок,"ЧН=0; ЧВН=; ЧГ=0")+Формат(ПолучитьСлучайноеЧислоКодТовара(30000,90000),"ЧЦ=5; ЧН=0; ЧВН=; ЧГ=0")),"ЧЦ=10; ЧДЦ=0; ЧН=0; ЧВН=; ЧГ=0" );	
		КонецЕсли;//***160705
	КонецЦикла;
	Для каждого СтрокаТЧ из ВозвратнаяТара Цикл
		Если СкладИзШапки И НЕ ЕстьКолонкаЗаказ Тогда
			СтрокаТЧ.Склад = Склад;
		ИначеЕсли ЕстьКолонкаЗаказ И НЕ СкладИзШапки И НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧЗаказПокупателяСкладГруппа = мКэшЗаказПокупателя[СтрокаТЧ.ЗаказПокупателя];
			Если СтрокаТЧЗаказПокупателяСкладГруппа = Неопределено Тогда
				ЗапросаСкладГруппа.УстановитьПараметр("Ссылка", СтрокаТЧ.ЗаказПокупателя);
				Выборка = ЗапросаСкладГруппа.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЧЗаказПокупателяСкладГруппа = Выборка.СкладГруппа;
					мКэшЗаказПокупателя.Вставить(СтрокаТЧ.ЗаказПокупателя, Выборка.СкладГруппа);
				КонецЕсли;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя)
				ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧЗаказПокупателяСкладГруппа)
				ИЛИ ТипЗнч(СтрокаТЧЗаказПокупателяСкладГруппа) <> Тип("СправочникСсылка.Склады") Тогда
				СтрокаТЧ.Склад = Склад;
			Иначе
				СтрокаТЧ.Склад = СтрокаТЧЗаказПокупателяСкладГруппа;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьСкладыВТЧ()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Товары.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");
	
	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();
	
	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	СтруктДанныеСерНомера = УчетСерийныхНомеров.СформироватьИсходнуюТаблицуСерийныйНомеров(ТоварыТабличнойЧасти, СерийныеНомера);
	ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл
		
		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);
		флЗаполнятьИзРезервов = ложь;
		Если ИспользоватьУказаниеСерийНоменклатурыПриРезервировании И ИсходнаяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва  Тогда
			Если ИсходнаяСтрока.ЗаказПокупателя.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ЗаказПокупателя);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
		СтрокаСПустойСерией        = Неопределено;
		СтрокаМаксимальнойСуммы    = Неопределено;
		НепогашеннаяСумма          = ИсходнаяСтрока.Сумма;
		МаксимальнаяСумма          = 0;
		
		ЗаполненКлючСвязи = Ложь;
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;
			
			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			
			НоваяСтрока = Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;
			НоваяСтрока.Количество                          = СписанноеКоличество;
			УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, КоличествоОсталосьПогасить - СписанноеКоличество, НоваяСтрока, СписанноеКоличество);
			
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;
			
			ТекущаяСумма      = НоваяСтрока.Сумма;
			НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
			
			// Проверим текущую сумму на максимум.
			Если ТекущаяСумма > МаксимальнаяСумма Тогда
				МаксимальнаяСумма       = ТекущаяСумма;
				СтрокаМаксимальнойСуммы = НоваяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоОсталосьПогасить > 0 Тогда
			
			Если СтрокаСПустойСерией = Неопределено Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				
				УчетСерийныхНомеров.КорректироватьТабЧастьСерийныеНомера(СтруктДанныеСерНомера, ИсходнаяСтрока.НомерСтроки - 1, 0, НоваяСтрока, КоличествоОсталосьПогасить);
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
				
				ТекущаяСумма      = НоваяСтрока.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = НоваяСтрока;
				КонецЕсли;
				
			Иначе
				
				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;
				
				ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаСПустойСерией, ЭтотОбъект);
				
				ТекущаяСумма      = СтрокаСПустойСерией.Сумма;
				НепогашеннаяСумма = НепогашеннаяСумма - ТекущаяСумма;
				
				// Проверим текущую сумму на максимум.
				Если ТекущаяСумма > МаксимальнаяСумма Тогда
					МаксимальнаяСумма       = ТекущаяСумма;
					СтрокаМаксимальнойСуммы = СтрокаСПустойСерией;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		// Если что-то осталось, кидаем на строку с максимальной суммой.
		Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда
			СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ЭтотОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //ЗаполнитьПоСериям()

//Процедура выполняет заполнение табличной части неполученными ТМЦ (резервом) по заказу покупателя.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//  ДокументОснование - ссылка на документ основание (заказ покупателя).
//  ВариантВыводаФормыЗаполнения - значения настройки пользователя о выводе формы заполнения по заказу покупателя
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ТабличнаяЧасть, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстФильтраПоСкладам = "
	|(
	|	ВЫБРАТЬ
	|		ГруппыДоступности.Склад
	|	ИЗ
	|		РегистрСведений.СоставГруппДоступностиСкладов КАК ГруппыДоступности
	|	ГДЕ ГруппыДоступности.ГруппаДоступности = &ГруппаДоступностиСкладов)";
	Если ЗначениеЗаполнено(ДокументОснование.СкладГруппа)
		И ТипЗнч(ДокументОснование.СкладГруппа) = Тип("СправочникСсылка.ГруппыДоступностиСкладов") Тогда
		ГруппаДоступностиСкладов = ДокументОснование.СкладГруппа;
	Иначе
		ГруппаДоступностиСкладов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ГруппаДоступностиСкладов");
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, ХарактеристикаНоменклатуры, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.Товары
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура, ХарактеристикаНоменклатуры) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура И Остатки.ХарактеристикаНоменклатуры = ТЧЗаказа.ХарактеристикаНоменклатуры";
	Иначе
		ТекстЗапросаПоТЧЗаказа = "
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Номенклатура, минимум(НомерСтроки) КАК НомерСтроки
		|				ИЗ Документ.ЗаказПокупателя.ВозвратнаяТара
		|				ГДЕ Ссылка = &Сделка
		|				Сгруппировать по Номенклатура) КАК ТЧЗаказа
		|ПО Остатки.Номенклатура = ТЧЗаказа.Номенклатура";
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Договор",                  ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",                   Сделка);
	Запрос.УстановитьПараметр("Склад",                    Склад);
	Запрос.УстановитьПараметр("СтатусТары",               Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ГруппаДоступностиСкладов", ГруппаДоступностиСкладов);
	Запрос.УстановитьПараметр("ДатаОстатков", 			  ЗаполнениеДокументов.ПолучитьДатуОстатков(ЭтотОбъект));
	
	ПревышатьОстаткиОрганизации = УправлениеПользователями.РазрешеноПревышениеОстаткаТоваровОрганизации(Организация);
	ОбособленныйУчет = ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей И Константы.ИспользоватьУказаниеСерийНоменклатурыПриРезервировании.Получить();
	
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	Остатки.Номенклатура                 КАК Номенклатура,
	|	Остатки.ХарактеристикаНоменклатуры   КАК ХарактеристикаНоменклатуры,
	|	NULL                                 КАК СерияНоменклатуры,
	|	Остатки.ЕдиницаИзмерения             КАК ЕдиницаИзмерения,
	|	Остатки.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаХранения,
	|	Остатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
	|	Остатки.Цена                         КАК Цена,
	|	Остатки.ПроцентСкидкиНаценки         КАК ПроцентСкидкиНаценки,
	|	Остатки.ПроцентАвтоматическихСкидок  КАК ПроцентАвтоматическихСкидок,
	|	Остатки.УсловиеАвтоматическойСкидки  КАК УсловиеАвтоматическойСкидки,
	|	Остатки.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
	|	NULL                                 КАК Склад,
	|	NULL                                 КАК СортировкаПоСкладу,
	|	Остатки.СтавкаНДС                    КАК СтавкаНДС,
	|	Остатки.КоличествоОстаток            КАК КоличествоОстатокПоЗаказу,
	|	Остатки.СуммаВзаиморасчетовОстаток   КАК СуммаОстатокПоЗаказу,
	|	0                                    КАК ОстатокНаСкладе,
	|	0                                    КАК ОстатокРезерваПоСделке,
	|	0                                    КАК ОстатокРезерва,
	|	0                                    КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	ВЫБОР КОГДА ОстаткиОрганизации.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ОстаткиОрганизации.КоличествоОстаток КОНЕЦ КАК КоличествоОстатокОрганизации", "") + ",
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL ТОГДА 9999999 Иначе ТЧЗаказа.НомерСтроки КОНЕЦ КАК НомерСтрокиЗаказа
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + ") КАК Остатки
	|
	|" + ?(ТабличнаяЧасть = Товары, "ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&ДатаОстатков, 
	|										 Организация = &Организация
	|	                                            ) КАК ОстаткиОрганизации
	|ПО
	|	Остатки.Номенклатура = ОстаткиОрганизации.Номенклатура 
	|	И Остатки.ХарактеристикаНоменклатуры = ОстаткиОрганизации.ХарактеристикаНоменклатуры", "") + ТекстЗапросаПоТЧЗаказа+"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	ОстаткиНаСкладе.Номенклатура                                     КАК Номенклатура,
	|	ОстаткиНаСкладе.ХарактеристикаНоменклатуры                       КАК ХарактеристикаНоменклатуры,
	|	ОстаткиНаСкладе.СерияНоменклатуры                                КАК СерияНоменклатуры,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков             КАК ЕдиницаИзмерения,
	|	ОстаткиНаСкладе.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Коэффициент,
	|	NULL                                                             КАК ЕдиницаХранения,
	|	NULL                                                             КАК КоэффициентЕдиницыХранения,
	|	0                                                                КАК Цена,
	|	0                                                                КАК ПроцентСкидкиНаценки,
	|	0                                                                КАК ПроцентАвтоматическихСкидок,
	|	NULL                                                             КАК УсловиеАвтоматическойСкидки,
	|	NULL                                                             КАК ЗначениеУсловияАвтоматическойСкидки,
	|	ОстаткиНаСкладе.Склад                                            КАК Склад,
	|	ВЫБОР КОГДА ОстаткиНаСкладе.Склад = &Склад ТОГДА
	|	0
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                       КАК СортировкаПоСкладу,
	|	ОстаткиНаСкладе.Номенклатура.СтавкаНДС      КАК СтавкаНДС,
	|	0                                           КАК КоличествоОстатокПоЗаказу,
	|	0                                           КАК СуммаОстатокПоЗаказу,
	|	ОстаткиНаСкладе.КоличествоОстаток           КАК ОстатокНаСкладе,
	|   РезервыОстаткиПоСделке.КоличествоОстаток    КАК ОстатокРезерваПоСделке,
	|   РезервыОстатки.КоличествоОстаток            КАК ОстатокРезерва,
	|   КПередаче.КоличествоОстаток                 КАК ОстатокКПередаче" + ?(ТабличнаяЧасть = Товары, ",
	|	0                                           КАК КоличествоОстатокОрганизации", "") + ",
	|	ВЫБОР КОГДА ТЧЗаказа.НомерСтроки ЕСТЬ NULL ТОГДА 9999999 Иначе ТЧЗаказа.НомерСтроки КОНЕЦ КАК НомерСтрокиЗаказа
	|		
	|   ИЗ
	|   // остатки на складе
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&ДатаОстатков, Номенклатура В ( 
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ НОМЕНКЛАТУРА ИЗ
	|                   РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ДоговорКонтрагента = &Договор
	|                                                И ЗаказПокупателя = &Сделка
	|" + ?(ТабличнаяЧасть = Товары, "                И СтатусПартии <> &СтатусТары",  "                И СтатусПартии = &СтатусТары") + "))
	|                                               " 
	+ ?(мУказаниеСкладовВТЧ, ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "И Склад В " + ТекстФильтраПоСкладам), " 
	|	                                     И Склад = &Склад") + "
	|	                                            ) КАК ОстаткиНаСкладе
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "Склад В " + ТекстФильтраПоСкладам + " И "), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва = &Сделка
	|	                                            ) КАК РезервыОстаткиПоСделке
	|	ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстаткиПоСделке.Номенклатура
	|" + ?(ТабличнаяЧасть = Товары, "
	|   И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстаткиПоСделке.ХарактеристикаНоменклатуры ", "")
	+ ?(ТабличнаяЧасть = Товары И ОбособленныйУчет, "
	|   И ОстаткиНаСкладе.СерияНоменклатуры = РезервыОстаткиПоСделке.СерияНоменклатуры ", "")
	
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстаткиПоСделке.Склад", "") + " 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ // резервы
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "",  "Склад В " + ТекстФильтраПоСкладам + " И "), " 
	|	                                     Склад = &Склад И ") + "
	|	                                   ДокументРезерва <> &Сделка
	|	                                            ) КАК РезервыОстатки
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = РезервыОстатки.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = РезервыОстатки.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "
	|   И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = РезервыОстатки.ХарактеристикаНоменклатуры ", "") + "
	|ЛЕВОЕ СОЕДИНЕНИЕ // к передаче
	|	РегистрНакопления.ТоварыКПередачеСоСкладов.Остатки(&ДатаОстатков,"
	+ ?(мУказаниеСкладовВТЧ, ?(НЕ ЗначениеЗаполнено(ГруппаДоступностиСкладов), "", "Склад В " + ТекстФильтраПоСкладам), " 
	|	                                     Склад = &Склад") + "
	|	                                            ) КАК КПередаче
	|ПО
	|	ОстаткиНаСкладе.Номенклатура = КПередаче.Номенклатура"
	+ ?(мУказаниеСкладовВТЧ, "
	|	И ОстаткиНаСкладе.Склад      = КПередаче.Склад", "") + " 
	|" + ?(ТабличнаяЧасть = Товары, "И ОстаткиНаСкладе.ХарактеристикаНоменклатуры = КПередаче.ХарактеристикаНоменклатуры", "") 
	+ СтрЗаменить(ТекстЗапросаПоТЧЗаказа,"Остатки.","ОстаткиНаСкладе.");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица остатков по заказу по результатам запроса
	ТаблицаПоЗаказу = РезультатЗапроса.Выгрузить();
	ТаблицаПоЗаказу.Сортировать("НомерСтрокиЗаказа возр");
	
	Сч = 0;
	Пока Сч < ТаблицаПоЗаказу.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоЗаказу.Получить(Сч);
		Если СтрокаТаблицы.КоличествоОстатокПоЗаказу = 0 Тогда
			ТаблицаПоЗаказу.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	// Таблица остатков на складах, резервов и т. п.
	ТаблицаПоОстаткам = РезультатЗапроса.Выгрузить();
	Сч = 0;
	Пока Сч < ТаблицаПоОстаткам.Количество() Цикл
		СтрокаТаблицы = ТаблицаПоОстаткам.Получить(Сч);
		Если СтрокаТаблицы.ОстатокНаСкладе <= 0 Тогда
			ТаблицаПоОстаткам.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	ТаблицаПоОстаткам.Сортировать("СортировкаПоСкладу, ОстатокРезерваПоСделке УБЫВ");
	
	// Нам надо знать сколько на самом деле осталось конкретной номенклатуры 
	// с конкретной характеристикой	по данному заказу, поскольку в разрезе цен и скидок
	// остаки могут расходится
	ТаблицаБезЦен = ТаблицаПоЗаказу.Скопировать();
	Если ТабличнаяЧасть = Товары Тогда
		Если ПревышатьОстаткиОрганизации Тогда
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
		Иначе
			ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, КоличествоОстатокОрганизации","КоличествоОстатокПоЗаказу");
		КонецЕсли;
	Иначе
		ТаблицаБезЦен.Свернуть("Номенклатура, ХарактеристикаНоменклатуры","КоличествоОстатокПоЗаказу");
	КонецЕсли;
	
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентСкидкиНаценки", Метаданные(), ИмяТабличнойЧасти);
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПроцентАвтоматическихСкидок", Метаданные(), ИмяТабличнойЧасти);	
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаБезЦен Цикл
		
		Если ТабличнаяЧасть = Товары Тогда
			Если ПревышатьОстаткиОрганизации Тогда
				ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
			Иначе
				ОстатокКоличестваПоЗаказу = Мин(СтрокаТаблицы.КоличествоОстатокПоЗаказу, СтрокаТаблицы.КоличествоОстатокОрганизации);
			КонецЕсли;
		Иначе
			ОстатокКоличестваПоЗаказу = СтрокаТаблицы.КоличествоОстатокПоЗаказу;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		
		СтрокиЗаказа   = ТаблицаПоЗаказу.НайтиСтроки(СтруктураПоиска);
		СтрокиОстатков = ТаблицаПоОстаткам.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЗаказа Из СтрокиЗаказа Цикл
			
			Если ОстатокКоличестваПоЗаказу <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЗаказа.КоличествоОстатокПоЗаказу <= 0 Тогда
				Продолжить;
			Иначе
				ОстатокКоличестваПоСтрокеЗаказа = СтрокаЗаказа.КоличествоОстатокПоЗаказу;
			КонецЕсли;
			
			//  Делаем два прохода в первом списываем все резервы по сделке, во втором, если
			//  количество еще не выбрано, то добираем из свободных остатков.
			Для Сч = 1 По 2 Цикл
				
				Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
					
					Если ОстатокКоличестваПоСтрокеЗаказа <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрокаОстатков.ОстатокНаСкладе = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					РезервПоСделке           = ?(СтрокаОстатков.ОстатокРезерваПоСделке = NULL, 0, СтрокаОстатков.ОстатокРезерваПоСделке);
					РезервПоДругимСделкам    = ?(СтрокаОстатков.ОстатокРезерва         = NULL, 0, СтрокаОстатков.ОстатокРезерва);
					КПередаче                = ?(СтрокаОстатков.ОстатокКПередаче       = NULL, 0, СтрокаОстатков.ОстатокКПередаче);
					СвободныйОстатокНаСкладе = Макс(СтрокаОстатков.ОстатокНаСкладе - РезервПоДругимСделкам - КПередаче, 0);
					
					КоличествоКСписанию   = ?(Сч = 1, Мин(Макс(СтрокаОстатков.ОстатокНаСкладе-КПередаче,0), РезервПоСделке), Макс(СвободныйОстатокНаСкладе-РезервПоСделке,0));
					КоличествоКЗаполнению = Мин(КоличествоКСписанию, Мин(ОстатокКоличестваПоЗаказу,  ОстатокКоличестваПоСтрокеЗаказа));
					
					Если КоличествоКЗаполнению = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ОстатокКоличестваПоЗаказу       = ОстатокКоличестваПоЗаказу       - КоличествоКЗаполнению;
					ОстатокКоличестваПоСтрокеЗаказа = ОстатокКоличестваПоСтрокеЗаказа - КоличествоКЗаполнению;
					СтрокаОстатков.ОстатокНаСкладе  = СтрокаОстатков.ОстатокНаСкладе  - КоличествоКЗаполнению;
					
					СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
					
					СтрокаТабличнойЧасти.Номенклатура = СтрокаОстатков.Номенклатура;
					
					Если ТабличнаяЧасть = Товары Тогда
						
						СтрокаТабличнойЧасти.Количество       = ?(НЕ ЗначениеЗаполнено(СтрокаЗаказа.Коэффициент), 0,
						КоличествоКЗаполнению * СтрокаЗаказа.КоэффициентЕдиницыХранения / СтрокаЗаказа.Коэффициент);
						СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаЗаказа.ЕдиницаИзмерения;
						СтрокаТабличнойЧасти.Коэффициент      = СтрокаЗаказа.Коэффициент;
						
						ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						
						СтрокаТабличнойЧасти.СтавкаНДС                           = СтрокаЗаказа.СтавкаНДС;
						СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры          = СтрокаОстатков.ХарактеристикаНоменклатуры;
						Если РезервПоСделке > 0 Тогда
							СтрокаТабличнойЧасти.СерияНоменклатуры               = СтрокаОстатков.СерияНоменклатуры;
							СтрокаОстатков.ОстатокРезерваПоСделке                = СтрокаОстатков.ОстатокРезерваПоСделке - КоличествоКЗаполнению;
						КонецЕсли;
						СтрокаТабличнойЧасти.ПроцентСкидкиНаценки                = СтрокаЗаказа.ПроцентСкидкиНаценки;
						СтрокаТабличнойЧасти.ПроцентАвтоматическихСкидок         = СтрокаЗаказа.ПроцентАвтоматическихСкидок;
						СтрокаТабличнойЧасти.УсловиеАвтоматическойСкидки         = СтрокаЗаказа.УсловиеАвтоматическойСкидки;
						СтрокаТабличнойЧасти.ЗначениеУсловияАвтоматическойСкидки = СтрокаЗаказа.ЗначениеУсловияАвтоматическойСкидки;
						СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаЗаказа.Цена,
						Сделка.ВалютаДокумента, ВалютаДокумента,
						УправлениеВзаиморасчетами.КурсДокумента(Сделка, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
						УправлениеВзаиморасчетами.КратностьДокумента(Сделка, мВалютаРегламентированногоУчета), УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						Сделка.СуммаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						Ценообразование.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						
					Иначе
						
						СтрокаТабличнойЧасти.Количество = КоличествоКЗаполнению;
						СтрокаТабличнойЧасти.Цена       = СтрокаЗаказа.Цена;
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					Иначе
						ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
					КонецЕсли;
					
					Если ТабличнаяЧасть = Товары Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
						СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
					КонецЕсли;
					
					Если Сч = 1 Тогда
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
					Иначе
						СтрокаТабличнойЧасти.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
					КонецЕсли;
					
					СтрокаТабличнойЧасти.Склад           = СтрокаОстатков.Склад;
					СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
					
					Если ТабличнаяЧасть = Товары Тогда
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
					Иначе
						ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
					КонецЕсли;
					
				КонецЦикла; // По строкам остатков
			КонецЦикла;  // по проходам
		КонецЦикла; // по строкам заказа
	КонецЦикла;    // по строкам таблицы (без цен)
	
	// Заполнение табличной части СоставНабора
	Если ТабличнаяЧасть = Товары
		И ДокументОснование.СоставНабора.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПарДокумент", ДокументОснование);
		Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОстатков", ЗаполнениеДокументов.ПолучитьДатуОстатков(ЭтотОбъект));
		
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Док.Номенклатура,
		|	Док.ХарактеристикаНоменклатуры,
		|	Док.СерияНоменклатуры,
		|	Док.ЕдиницаИзмеренияМест,
		|	Док.ЕдиницаИзмерения,
		|	Док.Количество,
		|	Док.Коэффициент,
		|	Док.Цена,
		|	Док.СтавкаНДС,
		|	Док.ПроцентСкидкиНаценки,
		|	Док.ПроцентАвтоматическихСкидок,
		|	Док.УсловиеАвтоматическойСкидки,
		|	Док.ЗначениеУсловияАвтоматическойСкидки,
		|	Док.Сумма,
		|	Док.Ссылка.ВалютаДокумента         КАК ВалютаДокумента,
		|	Док.Ссылка.СуммаВключаетНДС        КАК СуммаВключаетНДС,
		|	Док.Ссылка.КратностьВзаиморасчетов КАК КратностьДокумента,
		|	Док.Ссылка.КурсВзаиморасчетов      КАК КурсДокумента,
		|	ВЫБОР 
		|		КОГДА Док.Размещение ССЫЛКА Справочник.Склады ТОГДА Док.Размещение
		|		КОГДА Док.Ссылка.СкладГруппа ССЫЛКА Справочник.Склады ТОГДА Док.Ссылка.СкладГруппа
		|		ИНАЧЕ &ПустойСклад
		|	КОНЕЦ                              КАК Склад,
		|	ВЫБОР 
		|		КОГДА Остатки.КоличествоОстаток ЕСТЬ NULL ТОГДА 0
		|		ИНАЧЕ Остатки.КоличествоОстаток
		|	КОНЕЦ                              КАК Остаток,
		|	Док.КлючСтроки
		|
		|ИЗ
		|	Документ.ЗаказПокупателя.Товары КАК Док
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков, ЗаказПокупателя = &ПарДокумент) КАК Остатки
		|		ПО Остатки.Номенклатура               = Док.Номенклатура
		|		 И Остатки.ХарактеристикаНоменклатуры = Док.ХарактеристикаНоменклатуры
		|
		|ГДЕ
		|	Док.Ссылка = &ПарДокумент
		|	И Док.Номенклатура.Комплект
		|";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавленКомплект = Ложь;
		Выборка          = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОстатокКоличестваПоЗаказу = Мин(Выборка.Количество, Выборка.Остаток);
			
			Если ОстатокКоличестваПоЗаказу = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			
			НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры                   = Выборка.СерияНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
			НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
			НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
			НоваяСтрока.Количество                          = ОстатокКоличестваПоЗаказу;
			НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
			НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
			НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
			НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
			НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
			
			НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
			Выборка.КурсДокумента, УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			Выборка.КратностьДокумента, УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
			Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
			Выборка.СуммаВключаетНДС,
			УчитыватьНДС,
			СуммаВключаетНДС,
			Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока,  ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);
			
			НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			НоваяСтрока.Качество                     = Справочники.Качество.Новый;
			НоваяСтрока.Склад                        = Выборка.Склад;
			НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
			ДобавленКомплект                         = Истина;
			
		КонецЦикла;
		
		Если ДобавленКомплект Тогда
			УправлениеЗапасами.ЗаполнитьСоставНабораПоОснованию(ЭтотОбъект, ДокументОснование, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателя()

// Процедура выполняет заполниение услуг неполученными услугами по заказу поставщику.
//
Процедура ЗаполнитьУслугиПоОстаткамУпр() Экспорт
	Курс = УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СтатусПартии", Перечисления.СтатусыПартийТоваров.Купленный);
	Запрос.УстановитьПараметр("Договор",      ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Сделка",       Сделка);
	Запрос.УстановитьПараметр("ДатаОстатков", ЗаполнениеДокументов.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Номенклатура         				КАК Номенклатура,
	|	МАКСИМУМ( ВЫБОР КОГДА Док.Содержание is null ТОГДА
	|		ДокКорректировка.Содержание
	|		ИНАЧЕ Док.Содержание КОНЕЦ
	|			)	КАК Содержание,
	|	Остатки.Цена                 				КАК Цена,
	|	Остатки.СтавкаНДС            				КАК СтавкаНДС,
	|	Остатки.ПроцентСкидкиНаценки 				КАК ПроцентСкидкиНаценки,
	|	Сумма(Остатки.КоличествоОстаток)      		КАК КоличествоПоЗаказу
	|ИЗ
	|	РегистрНакопления.ЗаказыПокупателей.Остатки(&ДатаОстатков,ЗаказПокупателя=&Сделка И Номенклатура.Услуга = истина) КАК Остатки
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, Минимум(ВЫРАЗИТЬ(Содержание КАК Строка(100))) КАК Содержание ИЗ
	|		Документ.ЗаказПокупателя.Услуги ГДЕ Ссылка=&Сделка 
	|		СГРУППИРОВАТЬ ПО Номенклатура
	|	) КАК Док
    |	ПО Док.Номенклатура = Остатки.Номенклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура, Минимум(ВЫРАЗИТЬ(Содержание КАК Строка(100))) КАК Содержание ИЗ
	|		Документ.КорректировкаЗаказаПокупателя.Услуги ГДЕ Ссылка.ЗаказПокупателя = &Сделка
	|		СГРУППИРОВАТЬ ПО Номенклатура
	|	) КАК ДокКорректировка
    |	ПО ДокКорректировка.Номенклатура = Остатки.Номенклатура

	|СГРУППИРОВАТЬ ПО
	|	Остатки.Номенклатура,
	|	Остатки.Цена,
	|	Остатки.ПроцентСкидкиНаценки,
	|	Остатки.СтавкаНДС
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаУслуг = Услуги.Добавить();
		СтрокаУслуг.Номенклатура         = Выборка.Номенклатура;
		СтрокаУслуг.Количество           = Выборка.КоличествоПоЗаказу;
		СтрокаУслуг.Содержание           = Выборка.Содержание;
		СтрокаУслуг.ПроцентСкидкиНаценки = Выборка.ПроцентСкидкиНаценки;
		СтрокаУслуг.Цена                 = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
		Сделка.ВалютаДокумента, ВалютаДокумента,
		УправлениеВзаиморасчетами.КурсДокумента(Сделка,     мВалютаРегламентированногоУчета),
		Курс,
		УправлениеВзаиморасчетами.КратностьДокумента(Сделка,     мВалютаРегламентированногоУчета),
		Кратность);
		
		СтрокаУслуг.СтавкаНДС = Выборка.СтавкаНДС;
		
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаУслуг, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаУслуг, ЭтотОбъект);
		
		СтрокаУслуг.ЗаказПокупателя = Сделка;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаУслуг, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете); 
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоОстаткам()

// Заполняет табличную часть при оперативном проведении
//
// Параметры:
//  Отказ - отказ от дальнейшего проведения.
//
Процедура ЗаполнитьТабличныеЧастиПередПроведением(Отказ, ЗаполнятьПредоплату = Истина) Экспорт
	
	ЗаполнитьСкладыВТЧ();
	
	// Сформируем массив номенклатуры по товарам и таре для фильтров запросов.
	КопияТовары = Товары.Выгрузить();
	КопияТовары.Свернуть("Номенклатура",);
	КопияВозвратнаяТара = ВозвратнаяТара.Выгрузить();
	КопияВозвратнаяТара.Свернуть("Номенклатура",);
	
	МассивНоменклатуры     = КопияТовары.ВыгрузитьКолонку("Номенклатура");
	МассивНоменклатурыТара = КопияВозвратнаяТара.ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементТара Из МассивНоменклатурыТара Цикл
		МассивНоменклатуры.Добавить(ЭлементТара);
	КонецЦикла;
	
	// Сформируем массив складов для фильтров запросов.
	СкладИзШапки    = Не мУказаниеСкладовВТЧ;
	
	Если СкладИзШапки Тогда
		МассивСклады = Новый Массив;
		МассивСклады.Добавить(Склад);
	Иначе
		КопияТоварыСклад = Товары.Выгрузить();
		КопияТоварыСклад.Свернуть("Склад",);
		КопияТараСклад = ВозвратнаяТара.Выгрузить();
		КопияТараСклад.Свернуть("Склад",);
		
		МассивСклады     = КопияТоварыСклад.ВыгрузитьКолонку("Склад");
		МассивТараСклады = КопияТараСклад.ВыгрузитьКолонку("Склад");
		Для Каждого ЭлементТара Из МассивТараСклады Цикл
			МассивСклады.Добавить(ЭлементТара);
		КонецЦикла;
		
		МассивСклады.Добавить(Склад);
		
		КолвоЭлементов = МассивСклады.Количество();
		
		Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
			ТекИндекс  = КолвоЭлементов - ОбратныйИндекс;
			ТекЭлемент = МассивСклады[ТекИндекс];
			
			Если НЕ ЗначениеЗаполнено(ТекЭлемент) Тогда
				МассивСклады.Удалить(ТекИндекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка",             Ссылка);
	Запрос.УстановитьПараметр("ЗаказПокупателя",    Сделка);
	Запрос.УстановитьПараметр("МассивСклады",       МассивСклады);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("ДатаОстатков", 		ЗаполнениеДокументов.ПолучитьДатуОстатков(ЭтотОбъект));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиТоваровВРезерве.Склад,
	|	ОстаткиТоваровВРезерве.Номенклатура,
	|	ОстаткиТоваровВРезерве.ХарактеристикаНоменклатуры,
	|	ОстаткиТоваровВРезерве.КоличествоОстаток           КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(&ДатаОстатков,ДокументРезерва = &ЗаказПокупателя
	|			 И Склад В (&МассивСклады)
	|			 И Номенклатура В (&МассивНоменклатуры)) КАК ОстаткиТоваровВРезерве";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ПустаяХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Сначала вычтем из найденных остатков количество, размещение по которому явно указан
	// способ списания "из резерва". Для этого последовательно обойдем табличные части 
	// Товары и Возвратная тара.
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		// Сначала вычтем из найденных остатков количество, по которому явно указан
		// способ списания "из резерва". Для этого последовательно обойдем табличные части 
		// Товары и Возвратная тара.
		Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			
			// Сначала обходим все строки, у которых уже установлен способ списание "из резерва",
			// если способ списание "со склада" или не установлен - пропускаем строку
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров)
				ИЛИ СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице. Пересчитаем количество в ТЧ в единицы хранения.
			КоличествоОсталосьПогасить = СтрокаТЧ.Количество;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить/Строка.Количество;
				Иначе
					// Это ошибка: списываемое количество не должно быть больше остатка.
					// Такой документ не проведется оперативно.
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество        = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - СписанноеКоличество;
				Строка.Количество          = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				// Значит в документе неверно задан способ списания. Заполнять не будем
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним массив, хранящий две таблицы значений, в которых задано распределение по
	// способу списания для товаров и возвратной тары
	МассивТаблицСтрок = Новый Массив(2);
	
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТаблицаТЧ = ТабличнаяЧасть.Выгрузить();
		ТаблицаТЧ.Колонки.Добавить("КоличествоЕдиницХранения");
		
		МассивТаблицСтрок[Сч] = ТабличнаяЧасть.Выгрузить();
		МассивТаблицСтрок[Сч].Очистить();
		МассивТаблицСтрок[Сч].Колонки.Добавить("ИндексИсходнойСтроки");
		
		Для Каждого СтрокаТЧ Из ТаблицаТЧ Цикл
			
			Если СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				Продолжить;
			КонецЕсли;
			
			// Пересчитаем в единицы хранения
			СтрокаТЧ.КоличествоЕдиницХранения = СтрокаТЧ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", СтрокаТЧ.Номенклатура);
			Если ЭтоТовары Тогда
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);
			Иначе
				СтруктураПоиска.Вставить("ХарактеристикаНоменклатуры", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			Если СкладИзШапки Тогда
				СтруктураПоиска.Вставить("Склад", Склад);
			Иначе
				СтруктураПоиска.Вставить("Склад", ?(НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад), Склад, СтрокаТЧ.Склад));
			КонецЕсли;
			
			НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
			
			// Погашаем количество в таблице
			КоличествоОсталосьПогасить = СтрокаТЧ.КоличествоЕдиницХранения;
			СуммаОсталосьПогасить      = СтрокаТЧ.Сумма;
			
			// Погашаем количество в таблице, записывая способ списания
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Количество >= КоличествоОсталосьПогасить Тогда
					КоэффСписания = КоличествоОсталосьПогасить / Строка.Количество;
				Иначе
					КоэффСписания = 1;
				КонецЕсли;
				
				СписанноеКоличество = Окр(Строка.Количество * КоэффСписания, 3, РежимОкругления.Окр15как20);
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = СписанноеКоличество;
				
				КоэффПогашения                           = СписанноеКоличество / КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                        = Окр(СуммаОсталосьПогасить * КоэффПогашения, 2 ,1);
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
				КоличествоОсталосьПогасить               = КоличествоОсталосьПогасить - СписанноеКоличество;
				СуммаОсталосьПогасить                    = СуммаОсталосьПогасить - НоваяСтрока.Сумма;
				
				
				// Уменьшаем количество в исходной строке
				СтрокаТЧ.Количество = СтрокаТЧ.КоличествоЕдиницХранения - СписанноеКоличество;
				
				// Уменьшаем количество в строке остатков
				Строка.Количество   = Строка.Количество - СписанноеКоличество;
				
			КонецЦикла;
			
			Если КоличествоОсталосьПогасить > 0 Тогда
				
				// Добавляем строку с данными о размещенном количестве
				НоваяСтрока                      = МассивТаблицСтрок[Сч].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
				НоваяСтрока.ИндексИсходнойСтроки = ТаблицаТЧ.Индекс(СтрокаТЧ);
				НоваяСтрока.Количество           = КоличествоОсталосьПогасить;
				НоваяСтрока.Сумма                = Окр(СуммаОсталосьПогасить, 2, 1);
				
				НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Изменяем табличную часть
	Для Сч = 0 По 1 Цикл
		
		Если Сч = 0 Тогда
			ТабличнаяЧасть = Товары;
			ЭтоТовары      = Истина;
		Иначе
			ТабличнаяЧасть = ВозвратнаяТара;
			ЭтоТовары      = Ложь;
		КонецЕсли;
		
		ТекИндексИсходнойСтроки = Неопределено;
		Для Каждого Строка Из МассивТаблицСтрок[Сч] Цикл
			
			// Если строка с таким индексом уже обрабатывалась, то добавляем новую
			Если ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки Тогда
				
				Стр                              = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
				РедактируемаяСтрока              = ТабличнаяЧасть.Добавить();
				РедактируемаяСтрока.Номенклатура = Стр.Номенклатура;
				
				Если ЭтоТовары Тогда
					РедактируемаяСтрока.ХарактеристикаНоменклатуры = Стр.ХарактеристикаНоменклатуры;
					РедактируемаяСтрока.СтавкаНДС                  = Стр.СтавкаНДС;
					РедактируемаяСтрока.ПроцентСкидкиНаценки       = Стр.ПроцентСкидкиНаценки;
					РедактируемаяСтрока.ПроцентАвтоматическихСкидок= Стр.ПроцентАвтоматическихСкидок;
					РедактируемаяСтрока.УсловиеАвтоматическойСкидки         = Стр.УсловиеАвтоматическойСкидки;
					РедактируемаяСтрока.ЗначениеУсловияАвтоматическойСкидки = Стр.ЗначениеУсловияАвтоматическойСкидки;
				КонецЕсли;
			Иначе
				РедактируемаяСтрока = ТабличнаяЧасть[Строка.ИндексИсходнойСтроки];
			КонецЕсли;
			
			РедактируемаяСтрока.СпособСписанияОстаткаТоваров = Строка.СпособСписанияОстаткаТоваров;
			РедактируемаяСтрока.Склад                        = Строка.Склад;
			РедактируемаяСтрока.ЗаказПокупателя              = Строка.ЗаказПокупателя;
			
			Если РедактируемаяСтрока.Количество = Строка.Количество Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РедактируемаяСтрока, Строка);			
			
			Если ЭтоТовары Тогда
				
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(РедактируемаяСтрока, ЭтотОбъект);
			Иначе
				РедактируемаяСтрока.Цена  = ?(РедактируемаяСтрока.Количество <> 0, РедактируемаяСтрока.Сумма/РедактируемаяСтрока.Количество, 0);
			КонецЕсли;
			
			ТекИндексИсходнойСтроки = Строка.ИндексИсходнойСтроки;
			
		КонецЦикла;
	КонецЦикла;
	
	Если мЕстьКолонкаСерии Тогда
		ЗаполнитьПоСериям();
	КонецЕсли;
	
	Если ЗаполнятьПредоплату Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличныеЧастиПередПроведением()

// Заполняет счета БУ в строке табличной части
//
Процедура ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ) Экспорт
	
	МетаданныеДокумента = Метаданные();
	СчетаРозницы = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
	
	Если ЗаполнятьБУ Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			Если СчетаРозницы Тогда
				СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаРозницы;
			Иначе
				СтрокаТЧ.СчетУчетаБУ = СчетаУчета.СчетУчетаБУ;
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			Если (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия
			   И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
				СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Иначе
				СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетНДСРеализации;
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПринятыеСчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПринятыеСчетУчетаБУ = СчетаУчета.СчетУчетаДоп;
		КонецЕсли;
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСобственныеБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.ПереданныеСобственныеБУ = СчетаУчета.СчетПередачиБУ;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеПринятыеБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
				СтрокаТЧ.ПереданныеПринятыеБУ    = СчетаУчета.СчетПередачиЗабБУ
			КонецЕсли;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СхемаРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СхемаРеализации = СчетаУчета.СхемаРеализации;
		КонецЕсли;
		
	Иначе
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДС", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПринятыеСчетУчетаБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПринятыеСчетУчетаБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеСобственныеБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеСобственныеБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПереданныеПринятыеБУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ПереданныеПринятыеБУ    = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СхемаРеализации", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СхемаРеализации = Справочники.СхемыРеализации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет счета НУ в строке табличной части
//
Процедура ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ) Экспорт
	
	МетаданныеДокумента = Метаданные();
	СчетаРозницы = (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный);
	
	
	Если ЗаполнятьНУ Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтатьяПриростаУбылиЗапасов", МетаданныеДокумента, ИмяТабЧасти) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
				СтрокаТЧ.СтатьяПриростаУбылиЗапасов  = СчетаУчета.СтатьяПриростаУбылиЗапасов;
			Иначе
				Если СчетаРозницы Тогда
					СтрокаТЧ.СтатьяПриростаУбылиЗапасов = СчетаУчета.СтатьяПриростаУбылиЗапасовВРознице;
				Иначе
					СтрокаТЧ.СтатьяПриростаУбылиЗапасов = СчетаУчета.СтатьяПриростаУбылиЗапасов;
				КонецЕсли;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("УчитываетсяКакЗапасНУ", МетаданныеДокумента, ИмяТабЧасти) Тогда
					НалоговыйУчет.ПроверитьСтатьюПриростаУбылиЗапасов(СтрокаТЧ.СтатьяПриростаУбылиЗапасов,
					                                    СтрокаТЧ.УчитываетсяКакЗапасНУ, Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтатьяПриростаУбылиЗапасов", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.СтатьяПриростаУбылиЗапасов  = Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//
Процедура ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	Если ЗаполнятьНУ = Истина Тогда
		// Установим значения по умолчанию
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ВидНалоговойДеятельности", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ВидНалоговойДеятельности = СчетаУчета.ВидНалоговойДеятельности;
		КонецЕсли;

	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ВидНалоговойДеятельности", МетаданныеДокумента, ИмяТабЧасти) Тогда
			СтрокаТЧ.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;
			
КонецПроцедуры

// Заполняет счета БУ и НУ в строке табличной части
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	Если ЗаполнятьБУ<>неопределено Тогда
		ЗаполнитьСчетаБУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ);
	КонецЕсли;
	Если ЗаполнятьНУ<>неопределено Тогда
		ЗаполнитьСчетаНУРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьНУ);
	КонецЕсли;
	Если ЗаполнятьБУ<>неопределено ИЛИ ЗаполнятьНУ<>неопределено Тогда
 		ЗаполнитьРеквизитыНалоговогоУчетаНДСРегл(СтрокаТЧ, ИмяТабЧасти, СчетаУчета, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЕсли;
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета БУ и НУ в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, ИмяТабЧасти, ЗаполнятьБУ, ЗаполнятьНУ);
	КонецЦикла;
	
КонецПроцедуры // обЗаполнитьСчетаУчетаВТабЧасти()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьТовары(ДокументОснование = Неопределено) Экспорт
	Курс = УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуТовары.ЕдиницаИзмерения,
	|	СчетНаОплатуТовары.ЕдиницаИзмеренияМест,
	|	СчетНаОплатуТовары.Количество,
	|	СчетНаОплатуТовары.КоличествоМест,
	|	СчетНаОплатуТовары.Коэффициент,
	|	СчетНаОплатуТовары.Номенклатура,
	|	СчетНаОплатуТовары.ХарактеристикаНоменклатуры,
	|	СчетНаОплатуТовары.Цена,
	|	СчетНаОплатуТовары.ПроцентСкидкиНаценки,
	|	СчетНаОплатуТовары.ПроцентАвтоматическихСкидок,
	|	СчетНаОплатуТовары.УсловиеАвтоматическойСкидки,
	|	СчетНаОплатуТовары.ЗначениеУсловияАвтоматическойСкидки,
	//|	СчетНаОплатуТовары.ЗаказПокупателя,
	|	СчетНаОплатуТовары.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуТовары.Ссылка.ВалютаДокумента = СчетНаОплатуТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуТовары.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуТовары.Сумма,
	|	СчетНаОплатуТовары.СтавкаНДС,
	|	СчетНаОплатуТовары.СуммаНДС,
	|	СчетНаОплатуТовары.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуТовары.Ссылка.УчитыватьНДС          КАК УчитыватьНДС,
	|	СчетНаОплатуТовары.КлючСтроки,
	|	СчетНаОплатуТовары.Порции";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.ЗаказПокупателя.Товары КАК СчетНаОплатуТовары
	|
	|ГДЕ
	|	СчетНаОплатуТовары.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуТовары.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура                        = Выборка.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры          = Выборка.ХарактеристикаНоменклатуры;
		НоваяСтрока.ЕдиницаИзмерения                    = Выборка.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест                = Выборка.ЕдиницаИзмеренияМест;
		НоваяСтрока.Коэффициент                         = Выборка.Коэффициент;
		НоваяСтрока.КоличествоЗаявки					= Выборка.Количество;
		НоваяСтрока.КоличествоМест                      = Выборка.КоличествоМест;
		НоваяСтрока.ПроцентСкидкиНаценки                = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ПроцентАвтоматическихСкидок         = Выборка.ПроцентАвтоматическихСкидок;
		НоваяСтрока.УсловиеАвтоматическойСкидки         = Выборка.УсловиеАвтоматическойСкидки;
		НоваяСтрока.ЗначениеУсловияАвтоматическойСкидки = Выборка.ЗначениеУсловияАвтоматическойСкидки;
		//***НоваяСтрока.ЗаказПокупателя                     = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад 								= ДокументОснование.СкладГруппа;//*** Склад
		НоваяСтрока.СтавкаНДС                           = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		//НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		//ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		//Выборка.КурсДокумента, Курс,
		//Выборка.КратностьДокумента, Кратность),
		//Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		//Выборка.СуммаВключаетНДС,
		//УчитыватьНДС,
		//СуммаВключаетНДС,
		//Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Товары");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.Качество                     = Справочники.Качество.Новый;
		НоваяСтрока.КлючСтроки                   = Выборка.КлючСтроки;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЦикла;
	
	Если ДокументОснование.СоставНабора.Количество() > 0 Тогда
		СоставНабора.Загрузить(ДокументОснование.СоставНабора.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры // СкопироватьТовары()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьВозвратнуюТару(ДокументОснование = Неопределено) Экспорт
	Курс = УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуВозвратнаяТара.Количество,
	|	СчетНаОплатуВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуВозвратнаяТара.Сумма,
	|	СчетНаОплатуВозвратнаяТара.Цена,
	|	СчетНаОплатуВозвратнаяТара.ЗаказПокупателя,
	|	СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента	КАК ВалютаДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуВозвратнаяТара.Ссылка.ВалютаДокумента = СчетНаОплатуВозвратнаяТара.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуВозвратнаяТара.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуВозвратнаяТара
	|
	|ГДЕ
	|	СчетНаОплатуВозвратнаяТара.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуВозвратнаяТара.НомерСтроки";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ВозвратнаяТара.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Количество   = Выборка.Количество;
		НоваяСтрока.Цена  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(НоваяСтрока, ЭтотОбъект);
		НоваяСтрока.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		НоваяСтрока.ЗаказПокупателя              = Выборка.ЗаказПокупателя;
		НоваяСтрока.Склад                        = ДокументОснование.Склад;
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьВозвратнуюТару()

// Здесь надо написать текст - описание процедуры
//
// Параметры:
//  Нет.
//
Процедура СкопироватьУслуги(ДокументОснование = Неопределено) Экспорт
	Курс = УправлениеВзаиморасчетами.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	Кратность = УправлениеВзаиморасчетами.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ДокументОснование = Сделка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", ДокументОснование);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуУслуги.Содержание,
	|	СчетНаОплатуУслуги.Количество,
	|	СчетНаОплатуУслуги.Номенклатура,
	|	СчетНаОплатуУслуги.Цена,
	|	СчетНаОплатуУслуги.ПроцентСкидкиНаценки,
	|	СчетНаОплатуУслуги.ЗаказПокупателя,
	|	СчетНаОплатуУслуги.Ссылка.ВалютаДокумента КАК ВалютаДокумента,";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + "
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КурсВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КурсДокумента,
	|	ВЫБОР КОГДА СчетНаОплатуУслуги.Ссылка.ВалютаДокумента = СчетНаОплатуУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов ТОГДА
	|		СчетНаОплатуУслуги.Ссылка.КратностьВзаиморасчетов
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ                                           КАК КратностьДокумента,
	|	СчетНаОплатуУслуги.Сумма,
	|	СчетНаОплатуУслуги.СтавкаНДС,
	|	СчетНаОплатуУслуги.СуммаНДС,
	|	СчетНаОплатуУслуги.Ссылка.СуммаВключаетНДС      КАК СуммаВключаетНДС,
	|	СчетНаОплатуУслуги.Ссылка.УчитыватьНДС          КАК УчитыватьНДС";
	
	Запрос.Текст = Запрос.Текст + Символы.ПС + 
	"ИЗ
	|	Документ.СчетНаОплатуПокупателю.Услуги КАК СчетНаОплатуУслуги
	|
	|ГДЕ
	|	СчетНаОплатуУслуги.Ссылка = &Счет
	|УПОРЯДОЧИТЬ ПО СчетНаОплатуУслуги.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
	ЕстьРеквизитПроцентСкидкиНаценки = Истина;
	ПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ПриИзмененииСуммыПересчитыватьСкидку");
	ЕстьРеквизитПроцентАвтоматическихСкидок = Истина;	
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура               = Выборка.Номенклатура;
		НоваяСтрока.Содержание                 = Выборка.Содержание;
		НоваяСтрока.Количество                 = Выборка.Количество;
		НоваяСтрока.ПроцентСкидкиНаценки       = Выборка.ПроцентСкидкиНаценки;
		НоваяСтрока.ЗаказПокупателя            = Выборка.ЗаказПокупателя;
		
		НоваяСтрока.СтавкаНДС                  = Выборка.СтавкаНДС;
		
		НоваяСтрока.Цена  = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Цена, Выборка.ВалютаДокумента, ВалютаДокумента, Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность);
		НоваяСтрока.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
		ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, Выборка.ВалютаДокумента, ВалютаДокумента,
		Выборка.КурсДокумента, Курс,
		Выборка.КратностьДокумента, Кратность),
		Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
		Выборка.СуммаВключаетНДС,
		УчитыватьНДС,
		СуммаВключаетНДС,
		Ценообразование.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, ТекПользователь,,ЕстьРеквизитПроцентСкидкиНаценки,ПересчитыватьСкидку,ЕстьРеквизитПроцентАвтоматическихСкидок,"Услуги");
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(НоваяСтрока, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьУслуги()

Процедура ОбработкаЗаполненияРегл(Основание)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовСКонтрагентом		= СчетаУчета.СчетРасчетовПокупателя;
		СчетУчетаРасчетовПоАвансам			= СчетаУчета.СчетАвансовПокупателя;
		СчетУчетаРасчетовПоТаре				= СчетаУчета.СчетУчетаТарыПокупателя;
		СчетУчетаРасчетовПоТареПоАвансам	= СчетаУчета.СчетАвансовПоТареПокупателя;
		СтатьяВаловыхДоходов				= СчетаУчета.СтатьяВаловыхДоходов;
		
		ЗаполнитьСчетаУчетаВТабЧасти(Товары        , "Товары"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(Услуги        , "Услуги"        , ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления) Экспорт
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы для налогового учета
	ТаблицаТоваров.Колонки.Добавить("СуммаВД"                , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));	
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;
		
		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсВалютыДокумента, 
												СтруктураШапкиДокумента.КурсВалютыРегламентированногоУчета,
												СтруктураШапкиДокумента.КратностьВалютыДокумента,
												СтруктураШапкиДокумента.КратностьВалютыРегламентированногоУчета,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл  = Ценообразование.РассчитатьСуммуНДСсУчетомПогрешности(СтрокаТаблицы.СуммаСНДСРегл,
												СтруктураШапкиДокумента.УчитыватьНДС,
												Истина,
												СтрокаТаблицы.СтавкаНДС,
												ПогрешностиОкругления);
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал = СтрокаТаблицы.СуммаСНДСВал;
		// Определим значение НДС в проводках
		Если СтруктураШапкиДокумента.УчитыватьНДС = Ложь Тогда
			// в документе НДС не указывается
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
		Иначе
			СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
			СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
		КонецЕсли;
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал = СтрокаТаблицы.ПроводкиСуммаСНДСВал - СтрокаТаблицы.ПроводкиСуммаНДСВал;
													
		// Рассчитаем суммы налогового учета
		СтрокаТаблицы.СуммаВД = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл;
	
	КонецЦикла;
КонецПроцедуры

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

// Заполняет таблицу скидок для проведения.
//
// Параметры: 
//  ТаблицаТоваров          - таблица значений по товарам,
//  ТаблицаУслуг            - таблица значений по скидкам,
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблица значений.
//
Функция ПодготовитьТаблицуСкидок(ТаблицаТоваров, ТаблицаПоУслугам, СтруктураШапкиДокумента)
	
	МетаданныеДокумента = Метаданные();
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Номенклатура");
	ТаблицаДвижений.Колонки.Добавить("ХарактеристикаНоменклатуры");
	ТаблицаДвижений.Колонки.Добавить("УсловиеСкидки");
	ТаблицаДвижений.Колонки.Добавить("ЗначениеУсловияСкидки");
	ТаблицаДвижений.Колонки.Добавить("СуммаСкидки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СуммаБезСкидки = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоВЕдиницахДокумента, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			//			СтрокаДвижений.Качество = СтрокаТаблицы.Качество;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.ХарактеристикаНоменклатуры = СтрокаТаблицы.ХарактеристикаНоменклатуры;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
		
		//Натуральные скидки.
		Если СтрокаТаблицы.Комплект Тогда
			Если Ценообразование.ЭтоСпецПредложение(СтруктураШапкиДокумента.Дата,
				СтрокаТаблицы.Номенклатура,
				СтрокаТаблицы.ХарактеристикаНоменклатуры,
				Ценообразование.ПолучитьМассивПолучателейСкидки(Перечисления.ВидыСкидок.Оптовая, ЭтотОбъект)) Тогда
				Комплектующие = СоставНабора.НайтиСтроки(Новый Структура("КлючСтроки", СтрокаТаблицы.КлючСтроки));
				
				СтоимостьКомплектующих = 0;
				СоответствиеКомплектующих = Новый Соответствие;
				
				Для Каждого Комплектующая Из Комплектующие Цикл
					Цена = Комплектующая.Цена;
					
					СтоимостьКомплектующей = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Цена * СтрокаТаблицы.КоличествоДок * Комплектующая.Количество,
					ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					СтоимостьКомплектующих = СтоимостьКомплектующих + СтоимостьКомплектующей;
					СоответствиеКомплектующих.Вставить(Комплектующая, СтоимостьКомплектующей);
				КонецЦикла;
				
				СуммаСкидки = СтоимостьКомплектующих - ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма,
				ВалютаДокумента, СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
				СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
				СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
				
				Для Каждого Комплектующая Из СоответствиеКомплектующих Цикл
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.Номенклатура = Комплектующая.Ключ.Номенклатура;
					СтрокаДвижений.ХарактеристикаНоменклатуры = Комплектующая.Ключ.ХарактеристикаНоменклатуры;
					СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.СпецПредложение;
					СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.Номенклатура;
					СтрокаДвижений.СуммаСкидки = Комплектующая.Значение / СтоимостьКомплектующих * СуммаСкидки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл
		СуммаБезСкидки = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Окр(СтрокаТаблицы.Цена * СтрокаТаблицы.Количество, 2), ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СуммаСоСкидками = СуммаБезСкидки;
		СкидкиЕсть = Ложь;
		
		//Автоматические скидки.
		Если СтрокаТаблицы.ПроцентАвтоматическихСкидок <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = СтрокаТаблицы.УсловиеАвтоматическойСкидки;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ЗначениеУсловияАвтоматическойСкидки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентАвтоматическихСкидок, 2);
			
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		//Ручные скидки.
		Если СтрокаТаблицы.ПроцентСкидкиНаценки <> 0 Тогда
			СтрокаДвижений = ТаблицаДвижений.Добавить();
			СтрокаДвижений.Номенклатура = СтрокаТаблицы.Номенклатура;
			СтрокаДвижений.УсловиеСкидки = Перечисления.УсловияСкидкиНаценки.РучнаяСкидка;
			СтрокаДвижений.ЗначениеУсловияСкидки = СтрокаТаблицы.ПроцентСкидкиНаценки;
			СтрокаДвижений.СуммаСкидки = Окр(СуммаБезСкидки / 100 * СтрокаТаблицы.ПроцентСкидкиНаценки, 2);
			СуммаСоСкидками = СуммаСоСкидками - СтрокаДвижений.СуммаСкидки;
			СкидкиЕсть = Истина;
		КонецЕсли;
		
		СуммаСоСкидкамиРеально = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		Разница = СуммаСоСкидкамиРеально - СуммаСоСкидками;
		
		Если Разница <> 0
			И СкидкиЕсть Тогда
			СтрокаДвижений.СуммаСкидки = СтрокаДвижений.СуммаСкидки + Разница;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции // ПодготовитьТаблицуСкидок()

Процедура ПодготовитьТаблицуТоваровУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	ТаблицаТоваров.Колонки.Добавить("СуммаПродажная", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТоваров, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТоваров.ВыгрузитьКолонку("Склад"),
		ТаблицаТоваров.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТоваров, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС".
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"          , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСДок"       , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"             , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Количество) Тогда
			СтрокаТаблицы.Количество = 0;
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.КоличествоДок;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СтоимостьБезСкидок = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаУпр;
		
		СтрокаТаблицы.СуммаСНДСДок = СтрокаТаблицы.СуммаДок + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТоваровУпр()

Процедура ПодготовитьТаблицуТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	
	// Определим вид деятельности НДС
	ДопПараметрыОпределенияВДНДС = Новый Структура("БартерИЭкспорт");
	Если  (СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета) 
	    И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный) Тогда
		// Бартер и экспорт
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Истина;
	Иначе
		ДопПараметрыОпределенияВДНДС.БартерИЭкспорт = Ложь;
	КонецЕсли; 
	
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.ВидДеятельностиНДС = НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС, ДопПараметрыОпределенияВДНДС);
	КонецЦикла;
	
	// переопределим счет НУ по флажку УчитываетсяКакЗапасНУ
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
			Если СтрокаТаблицы.УчитываетсяКакЗапасНУ = Истина Тогда
				СтрокаТаблицы.СчетУчетаНУ = ПланыСчетов.Налоговый.Запасы;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТоваровРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТоварам - результат запроса по табличной части "Товары",
//  СтруктураШапкиДокумента   - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуУслуг(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТоваров = РезультатЗапросаПоТоварам.Выгрузить();
	
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - 
		?(УчитыватьНДС И СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
		
	КонецЦикла;
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
	ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТоваров;
	
КонецФункции // ПодготовитьТаблицуТоваров()

Процедура ПодготовитьТаблицуУслугУпр(ТаблицаТоваров, СтруктураШапкиДокумента)
	
	// Надо добавить нужные при проведении колонки.
	ТаблицаТоваров.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаВзаиморасчетов" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("Стоимость"           , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаУпр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьБезСкидок"  , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("НДСУпр"              , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
		Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
			СтрокаТаблицы.СтоимостьБезСкидок = СтрокаТаблицы.СтоимостьБезСкидок + Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СтоимостьБезСкидок, 
												УчитыватьНДС, СуммаВключаетНДС, Ценообразование.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
		КонецЕсли;
		
		СтрокаТаблицы.Стоимость = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		
		СтрокаТаблицы.СтоимостьБезСкидок = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СтоимостьБезСкидок, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
		СтрокаТаблицы.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаВзаиморасчетов, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
		СтруктураШапкиДокумента.КурсДокумента, СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента, СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДСУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.НДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		СтрокаТаблицы.Стоимость = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Стоимость, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуУслугУпр()

Процедура ПодготовитьТаблицуУслугРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	Если НЕ УчитыватьНДС Тогда
		// для регламентного учета считаем НДС
		ТаблицаТоваров.ЗаполнитьЗначения(Перечисления.СтавкиНДС.БезНДС, "СтавкаНДС");
		ТаблицаТоваров.ЗаполнитьЗначения(0                            , "НДС");
	КонецЕсли;
	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.ВидДеятельностиНДС = НалоговыйУчет.ПолучитьВидДеятельностиНДС(СтрокаТаблицы.СтавкаНДС);
	КонецЦикла;
	ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуУслугРегл()

// Выгружает результат запроса в табличную часть, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
//  РезультатЗапросаПоТаре  - результат запроса по табличной части "ВозвратнаяТара",
//  СтруктураШапкиДокумента - выборка по результату запроса по шапке документа.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	ТаблицаТары = РезультатЗапросаПоТаре.Выгрузить();
	
	ТаблицаТары.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТары.Колонки.Добавить("СерияНоменклатуры",          Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	// Вызываем отдельные процедуры подготовки для регл. и упр. учета
 	ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента);
	
	Возврат ТаблицаТары;
	
КонецФункции // ПодготовитьТаблицуТары()

Процедура ПодготовитьТаблицуТарыУпр(ТаблицаТары, СтруктураШапкиДокумента)
	
	ТаблицаТары.Колонки.Добавить("СуммаПродажная" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ЕстьРозничныйСклад = УправлениеРозничнойТорговлей.ОпределитьНаличиеРозничногоСклада(ТаблицаТары, "Склад", "ВидСклада");
	Если ЕстьРозничныйСклад Тогда
		ТаблицаПоЦенам = УправлениеРозничнойТорговлей.СформироватьЗапросПоПродажнымЦенам(Дата, ТаблицаТары.ВыгрузитьКолонку("Склад"),
		ТаблицаТары.ВыгрузитьКолонку("Номенклатура")).Выгрузить();
		
		УправлениеРозничнойТорговлей.ЗаполнитьКолонкуСуммаПродажная(ТаблицаТары, ТаблицаПоЦенам, "ВидСклада");
	КонецЕсли;
	
	// Надо добавить колонки "СуммаБезНДС" .
	ТаблицаТары.Колонки.Добавить("ЦенаВВалютеЗаказа"   , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаТары.Колонки.Добавить("СуммаБезНДС"         , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТары.Колонки.Добавить("СуммаВзаиморасчетов" , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаТары.Колонки.Добавить("СуммаУпр"            , ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма; // Сумма по таре всегда с НДС в валюте взаиморасчетов
		
		// Счиатем, что реализация выписывается с теми же флагами учета НДС, что и Заказ.
		Если СтруктураШапкиДокумента.НужнаЦенаЗаказа Тогда
			СтрокаТаблицы.ЦенаВВалютеЗаказа = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Цена, ВалютаДокумента, 
			СтруктураШапкиДокумента.ВалютаЗаказа,
			СтруктураШапкиДокумента.КурсДокумента, 
			СтруктураШапкиДокумента.КурсЗаказа,
			СтруктураШапкиДокумента.КратностьДокумента, 
			СтруктураШапкиДокумента.КратностьЗаказа);
		КонецЕсли;
		
		СтрокаТаблицы.СуммаВзаиморасчетов = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаВзаиморасчетов, 
		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
		СтруктураШапкиДокумента.КратностьДокумента,
		КратностьВзаиморасчетов);
		СтрокаТаблицы.СуммаУпр = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента, 
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента, 
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		// Суммы пересчитаем в валюту упр. учета
		СтрокаТаблицы.СуммаБезНДС = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаБезНДС, ВалютаДокумента,
		СтруктураШапкиДокумента.ВалютаУправленческогоУчета, 
		СтруктураШапкиДокумента.КурсДокумента,
		СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета, 
		СтруктураШапкиДокумента.КратностьДокумента,
		СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
		
		СтрокаТаблицы.НДС = 0;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуТарыУпр()

Процедура ПодготовитьТаблицуТарыРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления)
	
	// Сумма для проводки на залоговую стоимость тары
	ТаблицаТары.Колонки.Добавить("ПроводкаСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ВалютаРег = мВалютаРегламентированногоУчета;
	Данные    = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаРег, Дата);
	
	// Надо заполнить новые колонки.
	Для каждого СтрокаТаблицы Из ТаблицаТары Цикл
		
		Сумма = СтрокаТаблицы.Сумма;
		
		// Суммы пересчитаем в валюту упр. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = ВалютаРег Тогда
			СтрокаТаблицы.ПроводкаСумма    = Сумма;
		Иначе
			СтрокаТаблицы.ПроводкаСумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(Сумма, СтруктураШапкиДокумента.ВалютаДокумента,
			ВалютаРег,
			СтруктураШапкиДокумента.КурсДокумента, Данные.Курс,
			СтруктураШапкиДокумента.КратностьДокумента,Данные.Кратность);
		КонецЕсли;
		
	КонецЦикла;

	ДобавитьКолонкиТоваровРегл(ТаблицаТары, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // ПодготовитьТаблицуТарыРегл()

Функция ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре)
	
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("","СуммаСНДСРегл,СуммаСНДСВал");
		ТаблицаДвижений = ТаблицаКопия.Скопировать();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("","СуммаСНДСРегл,СуммаСНДСВал");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		ТаблицаДвижений.Свернуть("","СуммаСНДСРегл,СуммаСНДСВал");
		
		ТаблицаДвижений.Колонки.Добавить("Контрагент");
		ТаблицаДвижений.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("ВидДоговораКонтрагента");
		ТаблицаДвижений.Колонки.Добавить("ВидРасчетовНУ");
		ТаблицаДвижений.Колонки.Добавить("СчетОплаты");
		ТаблицаДвижений.Колонки.Добавить("СчетАванса");
		
		ТаблицаДвижений.ЗаполнитьЗначения(Контрагент        , "Контрагент");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора, "ВидДоговораКонтрагента");
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентамиНалоговыйУчет.Бартер    , "ВидРасчетовНУ");
		Иначе
			ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентамиНалоговыйУчет.Покупатели, "ВидРасчетовНУ");
		КонецЕсли;
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовСКонтрагентом, "СчетОплаты");
		ТаблицаДвижений.ЗаполнитьЗначения(СчетУчетаРасчетовПоАвансам    , "СчетАванса");
	КонецЕсли;
	
	// ТАРА (отдельной строкой)
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("","СуммаСНДСРегл,СуммаСНДСВал");
	ТаблицаДвиженийТара = ТаблицаКопия.Скопировать();
	
	ТаблицаДвиженийТара.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийТара.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.Колонки.Добавить("ВидРасчетовНУ");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетОплаты");
	ТаблицаДвиженийТара.Колонки.Добавить("СчетАванса");
	
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Контрагент        , "Контрагент");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВидДоговора        , "ВидДоговораКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.ВидыРасчетовСКонтрагентамиНалоговыйУчет.ВозвратнаяТараПокупатели, "ВидРасчетовНУ");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТаре         , "СчетОплаты");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(СчетУчетаРасчетовПоТареПоАвансам, "СчетАванса");
	
	Если НЕ ЗначениеЗаполнено(ТаблицаДвижений) Тогда
		ТаблицаДвижений = ТаблицаДвиженийТара.Скопировать();
	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаДвиженийТара, ТаблицаДвижений);
	КонецЕсли;
	
	Возврат ТаблицаДвижений;
КонецФункции

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	СтруктураОбязательныхПолей.Вставить("ВидПередачи");
	
КонецПроцедуры

// Дополняет полями, нужными для регламентированного учета, структуру 
// обязательных полей шапки документа.
//
Процедура ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Если НЕ (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовСКонтрагентом");
						
		КонецЕсли;
		
		Если ВозвратнаяТара.Количество() > 0 Тогда
			
			СтруктураОбязательныхПолей.Вставить("СчетУчетаРасчетовПоТаре");
			
		КонецЕсли;
		
	КонецЕсли;
	
 	Если ОтражатьВНалоговомУчете Тогда 
 		Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
 			Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
 				СтруктураОбязательныхПолей.Вставить("СтатьяВаловыхДоходов");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруОбязательныхПолейШапкиРегл

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении,
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Организация, ВалютаДокумента, Контрагент, ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов");
	
	// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
		И НЕ УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по заказам""! 
		|Заполните поле ""Заказ покупателя""!");
	ИначеЕсли СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтруктураОбязательныхПолей.Вставить("Сделка", 
		"По выбранному договору установлен способ ведения взаиморасчетов ""по счетам""! 
		|Заполните поле ""Счет покупателю""!");
	КонецЕсли;
	
	// Склад заполняем только, если у нас есть строки в таблице "Товары" или "Возвратная тара"
	// и склад не в ТЧ.
	Если  Не СтруктураШапкиДокумента.СкладВТабличнойЧасти
		И Товары.Количество() + ВозвратнаяТара.Количество() > 0 Тогда
		СтруктураОбязательныхПолей.Вставить("Склад");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейШапкиУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейШапкиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
	ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	//Организация в документе должна совпадать с организацией, указанной в договоре взаиморасчетов.
	УправлениеВзаиморасчетами.ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, СтруктураШапкиДокумента.ДоговорОрганизация, Отказ, Заголовок);
	
	ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Оборудование нельзя продать по договору, взаиморасчеты по которому ведутся по заказам.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		И  (СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		ИЛИ СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация оборудования не может производиться по договору с ведением взаиморасчетов """
		+  СокрЛП(СтруктураШапкиДокумента.ВедениеВзаиморасчетов)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
	// Брак нельзя отдать на реализацию.
	Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		И  (Не СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Реализация товара ненадлежащего качества может производиться только по договору """
		+  СокрЛП(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		+ """.", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеШапки()

// Выполняет проверки,которые нужны только для упр. учета
Процедура ПроверитьЗаполнениеШапкиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ не может осуществлять реализацию с неавтоматизированной торговой точки!", Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
 	Если ОтражатьВБухгалтерскомУчете Тогда
 		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
 		Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
 			СтруктураОбязательныхПолей.Вставить("ПереданныеСобственныеБУ");
 		Иначе
 			СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
 			Если  СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ЕстьНДС Тогда
 				СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
 			КонецЕсли;
 		КонецЕсли;
 	КонецЕсли;
 	Если  ОтражатьВНалоговомУчете
 		И НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
 		Если    СтруктураШапкиДокумента.ЕстьНДС 
 			ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
 			СтруктураОбязательныхПолей.Вставить("ВидНалоговойДеятельности");
 		КонецЕсли;
 		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
 			СтруктураОбязательныхПолей.Вставить("СтатьяПриростаУбылиЗапасов");
 		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Товары";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма, ЕдиницаИзмерения");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
		СтруктураОбязательныхПолей.Вставить("Качество");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиТоварыРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Товары", ТаблицаПоТоварам, Отказ, Заголовок);
	КонецЕсли;
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	ОбработкаТабличныхЧастей.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Товары", "ЗаказПокупателя", Отказ, Заголовок);
	
	ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	УчетСерийныхНомеров.ПроверитьКоличествоСерийныхНомеровВДокументе(ЭтотОбъект, "Товары");
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Выполняет проверки,которые нужны только для регл. учета
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТоварыРегл(ТаблицаПоТоварам, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		КэшПоСчетам = Новый Соответствие;
		
		Для каждого СтрокаТЧ Из ТаблицаПоТоварам Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Товары"": ";
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
				Если (НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) И 
					НЕ ЗначениеЗаполнено(СтрокаТЧ.ПринятыеСчетУчетаБУ)) Тогда
					
					СтрокаСообщения = "Не заполнено значение обоих счетов учета номенклатуры!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ)
						И НЕ ЗначениеЗаполнено(СтрокаТЧ.ПринятыеСчетУчетаНУ) Тогда
						СтрокаСообщения = "Не заполнено значение обоих счетов учета номенклатуры (НУ)!";
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
			КонецЕсли;
			
			Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
				
				СтрокаСообщения = "В поле ""Счет учета (БУ)"" указан забалансовый счет!";
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиУслугиРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)

	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
		Если СтруктураШапкиДокумента.УчитыватьНДС И СтруктураШапкиДокумента.ЕстьНДС Тогда
			СтруктураОбязательныхПолей.Вставить("СчетУчетаНДС");
		КонецЕсли;
	КонецЕсли;
	
	Если  ОтражатьВНалоговомУчете
		И НЕ (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) Тогда
			
		Если    СтруктураШапкиДокумента.ЕстьНДС 
			ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			СтруктураОбязательныхПолей.Вставить("ВидНалоговойДеятельности");
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Товары".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "Услуги";
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		Если ТаблицаПоУслугам.Количество() > 0 Тогда
			Сообщить("Документ передачи на комиссию не может содержать услуг!");
		КонецЕсли;
	КонецЕсли;
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = 
	Новый Структура("Номенклатура, Количество, Сумма, Содержание");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		СтруктураОбязательныхПолей.Вставить("СтавкаНДС");
	КонецЕсли;
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Здесь товаров быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "Услуги", ТаблицаПоУслугам, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	ОбработкаТабличныхЧастей.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "Услуги", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		СтруктураОбязательныхПолей.Вставить("СпособСписанияОстаткаТоваров");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтруктураОбязательныхПолей.Вставить("СчетУчетаБУ");
		СтруктураОбязательныхПолей.Вставить("СхемаРеализации");
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
			
		Если    СтруктураШапкиДокумента.ЕстьНДС 
			ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			СтруктураОбязательныхПолей.Вставить("ВидНалоговойДеятельности");
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			СтруктураОбязательныхПолей.Вставить("СтатьяПриростаУбылиЗапасов");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Возвратная тара".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТаре           - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, 
	Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество, Сумма");
	
	// Склад в ТЧ всегда должен быть заполнен, иначе проведение будет неправильным.
	СтруктураОбязательныхПолей.Вставить("Склад");
	
	Если УправлениеЗаказами.ПроверятьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента) Тогда
		СтруктураОбязательныхПолей.Вставить("ЗаказПокупателя");
	КонецЕсли;
	
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураОбязательныхПолей,  СтруктураШапкиДокумента);
	ДополнитьСтруктуруОбязательныхПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураОбязательныхПолей, СтруктураШапкиДокумента);
	
	УправлениеЗапасами.КорректировкаСтруктурыОбязательныхПолей(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента.ВидСклада, СтруктураОбязательныхПолей);
	
	// Теперь вызовем общую процедуру проверки.
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураОбязательныхПолей, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТараРегл(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	
	// Здесь услуг быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетУслуг(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь наборов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетНаборов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Здесь комплектов быть не должно.
	УправлениеЗапасами.ПроверитьЧтоНетКомплектов(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// По возвратной таре не должен вестись учет по характеристикам.
	УправлениеЗапасами.ПроверитьЧтоНетНоменклатурыСХарактеристиками(ЭтотОбъект, "ВозвратнаяТара", ТаблицаПоТаре, Отказ, Заголовок);
	
	// Реквизиты Заказов "Организация", "Контрагент", "Договор контрагента" должны совпадать с реквизитами из шапки.
	ОбработкаТабличныхЧастей.ПроверитьРеквизитыЗаказов(ЭтотОбъект, "ВозвратнаяТара", "ЗаказПокупателя", Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара()

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, 
	                          ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
							  ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	ТаблицаПоКомплектам = УправлениеЗапасами.СформироватьТаблицуКомплектующих(ТаблицаПоТоварам, ЭтотОбъект);
	
	ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента,
	                       ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
						   ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
	//*** AL 	//***///***						   					   
	//ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента,
	//					   ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, Отказ, Заголовок);
	
	ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента,
	                                    ТаблицаПоКомплектам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		//*** AL 	
		ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам,
													 Отказ, Заголовок, СтруктураШапкиДокумента);
	КонецЕсли;
	
	ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, 
	                                  ТаблицаПоКомплектам, ТаблицаПоТаре, Отказ, Заголовок);
	
	Если ТаблицаПоКомплектам.Количество() + ТаблицаПоТаре.Количество() >0 тогда
		// Зарегистрируем в последовательности УУ
		Если ОтражатьВУправленческомУчете Тогда
			ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчет.Добавить();
			ЗаписьРегистрации.Период      = Дата;
		КонецЕсли;
		//***///***
		//// Зарегистрируем в последовательности БУ
		//Если ОтражатьВБухгалтерскомУчете Тогда
		//	ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчетБУ.Добавить();
		//	ЗаписьРегистрации.Организация = Организация;
		//	ЗаписьРегистрации.Период      = Дата;
		//КонецЕсли;
		//
		//// Зарегистрируем в последовательности НУ
		//Если ОтражатьВНалоговомУчете Тогда
		//	ЗаписьРегистрации = ПринадлежностьПоследовательностям.ПартионныйУчетНУ.Добавить();
		//	ЗаписьРегистрации.Организация = Организация;
		//	ЗаписьРегистрации.Период      = Дата;
		//КонецЕсли;
	КонецЕсли;
	
	// Проводить по партиям сразу нужно оборудование или если установлен параметр
	// учетной политики СписыватьПартииПриПроведенииДокументов
	ПроводитьПоПартиям = (ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование);
	
	Если НЕ ПроводитьПоПартиям Тогда
		
		ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).СписыватьПартииПриПроведенииДокументов;
		
	КонецЕсли;
	//***///***
	//Если ПроводитьПоПартиям Тогда
	//	//***///***
	//	// Проводки формируются и в модуле документа, и при списании партий
	//	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
	//	//	Движения.Хозрасчетный.Записать();
	//	//КонецЕсли;
	//	//
	//	//Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
	//	//	Движения.Налоговый.Записать();
	//	//КонецЕсли;
	//	//***///***
	//	УправлениеЗапасамиПартионныйУчет.ДвижениеПартийТоваров(Ссылка, Движения.СписанныеТовары.Выгрузить(),,СтруктураШапкиДокумента.ОтражатьВУправленческомУчете,Ложь,Ложь);
	//	
	//Иначе
	//	
	//	// В неоперативном режиме границы последовательностей сдвигаются назад, если они позже документа.
	//	Если РежимПроведения = РежимПроведенияДокумента.Неоперативный Тогда
	//		//УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете);
	//		//***///***
	//		УправлениеЗапасамиПартионныйУчет.СдвигГраницыПоследовательностиПартионногоУчетаНазад(Дата, Ссылка, Организация, СтруктураШапкиДокумента.ОтражатьВУправленческомУчете, Ложь,Ложь);	
	//	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры // ДвиженияПоРегистрам()

// По результату запроса по шапке документа формируем движения по регистрам для целей упр. учета.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  СтруктураШапкиДокумента   - выборка из результата запроса по шапке документа,
//  ТаблицаПоТоварам          - таблица значений, содержащая данные для проведения и проверки ТЧ Товары,
//  ТаблицаПоСкидкам          - таблица значений, содержащая данные для проведения и проверки ТЧ Скидки,
//  ТаблицаПоТаре             - таблица значений, содержащая данные для проведения и проверки ТЧ "Возвратная тара",
//  ТаблицаПоУслугам          - таблица значений, содержащая данные для проведения и проверки ТЧ "Услуги",
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрамУпр(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоКомплектам, ТаблицаПоСкидкам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок)
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			МассивСерий = ТаблицаПоТоварам.ВыгрузитьКолонку("СерияНоменклатуры");
			СертификацияНоменклатуры.ПроверитьНаСертификацию( МассивСерий, Дата, Отказ, Заголовок);
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ВидВзаиморасчетов.Код="000000001" тогда
		//	Сообщить("ВидВзаиморасчетов "+СтруктураШапкиДокумента.ВидВзаиморасчетов.Код);
					Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
					// РЕГИСТР ВЗАИМОРАСЧЕТЫ С КОНТРАГЕНТАМИ
				    Движение.ВидДвижения= ВидДвиженияНакопления.Приход;
					Движение.Период = Дата;
					Движение.ДоговорКонтрагента = ДоговорКонтрагента;
					Движение.Контрагент = Реализатор;
					Движение.Организация=Организация;
					Движение.Активность=Истина;
					Движение.СуммаВзаиморасчетов=СуммаИтогМенеджера; 
					Движение.СуммаУпр=СуммаИтогМенеджера;
					Движения.ВзаиморасчетыСКонтрагентами.Записать();
					// РЕГИСТР РАСЧЕТЫ С КОНТРАГЕНТАМИ
					Движение = Движения.РасчетыСКонтрагентами.Добавить();
					Движение.ВидДвижения= ВидДвиженияНакопления.Приход;
					Движение.Период= Дата;
					Движение.ДоговорКонтрагента= ДоговорКонтрагента;
					Движение.Контрагент= Реализатор;
					Движение.Организация=Организация;
					Движение.Активность=Истина;
					Движение.СуммаВзаиморасчетов=СуммаИтогМенеджера;
					Движение.СуммаУпр=СуммаИтогМенеджера;
					Движения.РасчетыСКонтрагентами.Записать();
					//РЕГИСТР ВЗАИМОРАСЧЕТОВ С КОНТРАГЕНТАМИ ПО ДОКУМЕНТАМ РАСЧЕТОВ     //***///***
					//Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
					//Движение.ВидДвижения= ВидДвиженияНакопления.Приход;
					//Движение.Период= Дата;
					//Движение.ДоговорКонтрагента= ДоговорКонтрагента;
					//Движение.Контрагент= Реализатор;
					//Движение.Организация=Организация;
					//Движение.ДокументРасчетовСКонтрагентом=Ссылка;
					//Движение.ВидРасчетовСКонтрагентом=Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
					//Движение.Активность=Истина;
					//Движение.СуммаВзаиморасчетов=СуммаИтогМенеджера;
					//Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Записать();
					
		Иначе
			УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
			мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
			ВидДвиженияНакопления.Приход, Отказ, Заголовок);
			Если СтруктураШапкиДокумента.ВидВзаиморасчетов.Код="000000003" тогда    //для Образцов и т.д.
					Движение = Движения.ВзаиморасчетыСКонтрагентами.Добавить();
					// РЕГИСТР ВЗАИМОРАСЧЕТЫ С КОНТРАГЕНТАМИ
					Движение.ВидДвижения= ВидДвиженияНакопления.Расход;
					Движение.Период = Дата;
					Движение.ДоговорКонтрагента = ДоговорКонтрагента;
					Движение.Контрагент = Контрагент;
					Движение.Организация=Организация;
					Движение.Активность=Истина;
					Движение.СуммаВзаиморасчетов=СуммаДокумента; 
					Движение.СуммаУпр=СуммаДокумента;
					Движения.ВзаиморасчетыСКонтрагентами.Записать();
					// РЕГИСТР РАСЧЕТЫ С КОНТРАГЕНТАМИ
					Движение = Движения.РасчетыСКонтрагентами.Добавить();
					Движение.ВидДвижения= ВидДвиженияНакопления.Расход;
					Движение.Период= Дата;
					Движение.ДоговорКонтрагента= ДоговорКонтрагента;
					Движение.Контрагент= Контрагент;
					Движение.Организация=Организация;
					Движение.Активность=Истина;
					Движение.СуммаВзаиморасчетов=СуммаДокумента;
					Движение.СуммаУпр=СуммаДокумента;
					Движения.РасчетыСКонтрагентами.Записать();
					//РЕГИСТР ВЗАИМОРАСЧЕТОВ С КОНТРАГЕНТАМИ ПО ДОКУМЕНТАМ РАСЧЕТОВ //***///***
					//Движение = Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Добавить();
					//Движение.ВидДвижения= ВидДвиженияНакопления.Расход;
					//Движение.Период= Дата;
					//Движение.ДоговорКонтрагента= ДоговорКонтрагента;
					//Движение.Контрагент= Контрагент;
					//Движение.Организация=Организация;
					//Движение.ДокументРасчетовСКонтрагентом=Ссылка;
					//Движение.ВидРасчетовСКонтрагентом=Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
					//Движение.Активность=Истина;
					//Движение.СуммаВзаиморасчетов=СуммаДокумента;
					//Движения.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Записать();
			КонецЕсли;
		КонецЕсли;
		
		//***ЗАМЕНА
		//УправлениеВзаиморасчетами.ВыполнитьДвиженияПоРегистрамУпрВзаиморасчетов(ЭтотОбъект, СтруктураШапкиДокумента, 
		//мСтруктураПараметровВзаиморасчетов, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
		//ВидДвиженияНакопления.Приход, Отказ, Заголовок);
		
		Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			Если СуммаДокумента <> 0 Тогда
				
				// По регистру ПродажиПоДисконтнымКартам.
				Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДисконтнаяКарта) Тогда
					НаборДвижений = Движения.ПродажиПоДисконтнымКартам;
					
					// Получим таблицу значений, совпадающую со структурой набора записей регистра.
					ТаблицаДвижений = НаборДвижений.Выгрузить();
					
					// Заполним таблицу движений.
					СтрокаДвижений = ТаблицаДвижений.Добавить();
					СтрокаДвижений.ДисконтнаяКарта = СтруктураШапкиДокумента.ДисконтнаяКарта;
					СтрокаДвижений.ВладелецДисконтнойКарты = СтруктураШапкиДокумента.Контрагент;
					СтрокаДвижений.Сумма = ОбщегоНазначения.ПересчитатьИзВалютыВВалюту(СуммаДокумента, ВалютаДокумента,
					СтруктураШапкиДокумента.ВалютаУправленческогоУчета,
					СтруктураШапкиДокумента.КурсДокумента,
					СтруктураШапкиДокумента.КурсВалютыУправленческогоУчета,
					СтруктураШапкиДокумента.КратностьДокумента,
					СтруктураШапкиДокумента.КратностьВалютыУправленческогоУчета);
					
					НаборДвижений.мПериод          = Дата;
					НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
					
					Если Не Отказ Тогда
						НаборДвижений.ВыполнитьДвижения();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КопияТовары = ТаблицаПоТоварам.Скопировать();
			КопияУслуги = ТаблицаПоУслугам.Скопировать();
			
			ТабИменУслуги = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДС",    "НДСВрем");
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияУслуги, ТабИменУслуги, "НДСУпр", "НДС");
			
			ТабИменТовары = Неопределено;
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДС",    "НДСВрем");
			ОбщегоНазначения.ПереименоватьКолонкуТаблицыЗначений(КопияТовары, ТабИменТовары, "НДСУпр", "НДС");
			
			// ТОВАРЫ И УСЛУГИ ПО РЕГИСТРУ Закупки.
			Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам Тогда
				
				// В этом случае таблицы документа обрабатываются особым образом
				ТаблицаДвижений = Движения.Продажи.Выгрузить();
				ТаблицаДвижений.Очистить();
				ТаблицаДвиженийУслуги = ТаблицаДвижений.Скопировать();
				ТаблицаДвиженийТовары = ТаблицаДвижений.Скопировать();
				
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияУслуги, ТаблицаДвиженийУслуги, Проект, Дата, "Продажи");
				УправлениеПроектами.ОтразитьДвиженияПоПроектам(КопияТовары, ТаблицаДвиженийТовары, Проект, Дата, "Продажи");
				
				// Вставляем уже подготовленные таблицы движений
				ТаблицыДанныхДокумента = Новый Структура;
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоТоварам", ТаблицаДвиженийТовары);
				ТаблицыДанныхДокумента.Вставить("ТаблицаПоУслугам", ТаблицаДвиженийУслуги);
				
			Иначе
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", КопияУслуги);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", КопияТовары);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.Продажи, СтруктТаблицДокумента);
				
			КонецЕсли;
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПродажи",    Ссылка);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Подразделение",      Подразделение);
			
			// Когда взаиморасчеты ведутся по счетам, поле заказ покупателя в таб.части будет пустое (нет типа Документ.СчетНаОплату)
			Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя", СтруктураШапкиДокумента.Сделка);
			КонецЕсли;
			
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.Продажи, Неопределено, ТаблицыДанныхДокумента, Дата);
			
			// ПО РЕГИСТРУ ПредоставленныеСкидки.
			НаборДвижений = Движения.ПредоставленныеСкидки;
			
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			ТаблицаДвижений.Очистить();
			
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоСкидкам, ТаблицаДвижений);
			
			ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,"ДокументСкидки");
			ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента,"ПолучательСкидки");
			
			НаборДвижений.мПериод            = Дата;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Если Не Отказ Тогда
				Движения.ПредоставленныеСкидки.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыНаСкладах.
		
		Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
			ТаблицаПоКомплектам.Индексы.Добавить("ВидСклада");
			ТаблицаПоТаре.Индексы.Добавить("ВидСклада");

			ВидСкладаОпт  = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Оптовый);
			МассивКомплектыОпт = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаОпт);
			МассивТараОпт = ТаблицаПоТаре.НайтиСтроки(ВидСкладаОпт);
			
			Если МассивКомплектыОпт.Количество() <> 0 ИЛИ МассивТараОпт.Количество() <> 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыОпт", МассивКомплектыОпт);
					СтруктТаблицДокумента.Вставить("ТараОпт",      МассивТараОпт);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыНаСкладах, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараОпт");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
			ВидСкладаРозн = Новый Структура("ВидСклада", Перечисления.ВидыСкладов.Розничный);
			МассивКомплектыРозн = ТаблицаПоКомплектам.НайтиСтроки(ВидСкладаРозн);
			МассивТараРозн = ТаблицаПоТаре.НайтиСтроки(ВидСкладаРозн);
			
			Если МассивКомплектыРозн.Количество() <> 0 ИЛИ МассивТараРозн.Количество() <> 0 Тогда
				
				// Проверка остатков при оперативном проведении.
				Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
					Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
					Движения.ТоварыВРознице.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
				КонецЕсли;
				
				Если Не Отказ Тогда
					СтруктТаблицДокумента = Новый Структура;
					СтруктТаблицДокумента.Вставить("КомплектыРозн", МассивКомплектыРозн);
					СтруктТаблицДокумента.Вставить("ТараРозн",      МассивТараРозн);
					
					ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРознице, СтруктТаблицДокумента);
					
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТараРозн");
					
					ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРознице, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // отпуск по ордеру
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыКПередачеСоСкладов.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			// ТОВАРЫ И ТАРА ПО РЕГИСТРУ ТоварыКПередачеСоСкладов.
			Если Не Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", ТаблицаПоКомплектам);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеСоСкладов, СтруктТаблицДокумента);
				
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.Купленный,      "ТаблицаТовары");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",     Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество",         Справочники.Качество.Новый,                       "ТаблицаПоТаре");
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеСоСкладов, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный
			И ТаблицаПоТаре.Количество()<>0 Тогда
			
			Движения.ТоварыПереданные.КонтрольЛимитовВозвратнойТары(ЭтотОбъект, СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		// ТАРА ПО РЕГИСТРУ ТоварыПереданные
		Если Не Отказ Тогда
			
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТаре", ТаблицаПоТаре);
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				КопияТовары = ТаблицаПоТоварам.Скопировать();
				Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
					КопияТовары.Колонки.ЗаказПокупателя.Имя = "Сделка";
				КонецЕсли;	
				СтруктТаблицДокумента.Вставить("ТаблицаТовары", КопияТовары);
			КонецЕсли;
			
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыПереданные, СтруктТаблицДокумента);
			
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Контрагент",         Контрагент);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",        Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи",     Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПередачи", Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию,     "ТаблицаТовары");

			
				Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Сделка",     Сделка,"ТаблицаТовары");
				КонецЕсли;
            КонецЕсли;
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыПереданные, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
		// ТОВАР, ТАРА И УСЛУГИ ПО РЕГИСТРУ ЗаказыПокупателей.
		//***///***
		// Проверка остатков при оперативном проведении.
		//Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//	Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Товары",         Отказ, Заголовок);
		//	Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "ВозвратнаяТара", Отказ, Заголовок);
		//	Движения.ЗаказыПокупателей.КонтрольПревышенияОбъемаЗаказа(ЭтотОбъект, СтруктураШапкиДокумента, "Услуги",         Отказ, Заголовок);
		//КонецЕсли;
		//
		//Если Не Отказ Тогда
		//	СтруктТаблицДокумента = Новый Структура;
		//	СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
		//	СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТаблицаПоТаре);
		//	СтруктТаблицДокумента.Вставить("ТаблицаПоУслугам", ТаблицаПоУслугам);
		//	
		//	ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ЗаказыПокупателей, СтруктТаблицДокумента);
		//	ОбщегоНазначения.УдалитьСтрокиИзТаблицДокумента(ТаблицыДанныхДокумента, "ЗаказПокупателя");
		//	
		//	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДоговорКонтрагента", ДоговорКонтрагента);
		//	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.Купленный, "ТаблицаПоТоварам,ТаблицаПоУслугам");
		//	ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии",       Перечисления.СтатусыПартийТоваров.ВозвратнаяТара, "ТаблицаПоТаре");
		//	
		//	ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ЗаказыПокупателей, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
		//КонецЕсли;
		//
		// ТОВАР И ТАРА ПО РЕГИСТРУ ТоварыВРезервеНаСкладах.
		ТабРезервТовары = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоКомплектам);	
		ТабРезервТара   = УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТаблицаПоТаре);	
		
		Если ТабРезервТовары.Количество() > 0 ИЛИ ТабРезервТара.Количество() > 0 Тогда
			
			// Проверка остатков при оперативном проведении.
			Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
				Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "Товары",         СтруктураШапкиДокумента, Отказ, Заголовок);
				Движения.ТоварыВРезервеНаСкладах.КонтрольОстатков(ЭтотОбъект, "ВозвратнаяТара", СтруктураШапкиДокумента, Отказ, Заголовок);
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				СтруктТаблицДокумента = Новый Структура;
				СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТабРезервТовары);
				СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",    ТабРезервТара);
				
				ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыВРезервеНаСкладах, СтруктТаблицДокумента);
				
				ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыВРезервеНаСкладах, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
				
			КонецЕсли;
			
		КонецЕсли;
	//Регистры движения по менеджеру
	//***///***
	КонецЕсли; // Если ОтражатьВУправленческомУчете
	
КонецПроцедуры // ДвиженияПоРегистрамУпр()

// Функция удаляет из таблицы значений строки по которым не надо формировать резерв
// Возврат КОПИЯ исходной таблицы с удаленными строками
//
Функция УдалитьСтрокиНеТребующиеСписаниеИзРезерва(ТабТовары)

	ТабРезерв = ТабТовары.Скопировать();
	
	// Удалим записи таблицы в которых не надо списывать из резерва или не указан заказ покупателя.
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаСписанияРезервов Из ТабРезерв Цикл
	
		Если СтрокаСписанияРезервов.СпособСписанияОстаткаТоваров <> Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва
		 ИЛИ НЕ ЗначениеЗаполнено(СтрокаСписанияРезервов.ЗаказПокупателя) Тогда
			МассивНаУдаление.Добавить(СтрокаСписанияРезервов);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		ТабРезерв.Удалить(Элемент);
	КонецЦикла;	
	
	ТабРезерв.Колонки.ЗаказПокупателя.Имя = "ДокументРезерва";
	
	Возврат ТабРезерв;
	
КонецФункции // УдалитьСтрокиНеТребующиеСписаниеИзРезерва()

// Формирует движения по регистру "Взаиморасчеты с контрагентами по документам расчетов",
// если по договору ведется учет в разрезе документов
//
Процедура ДвиженияПоРегистрамОперативныхВзаиморасчетов(РежимПроведения, ТаблицаПоВзаиморасчетам, Отказ, Заголовок, СтруктураШапкиДокумента)
	
	ВидДвижения = ВидДвиженияНакопления.Приход;
	ВидРасчетовПоОперации = Перечисления.ВидыРасчетовСКонтрагентами.ПоРеализации;
	
	УправлениеВзаиморасчетами.ОтражениеЗадолженностиВРегистреОперативныхРасчетовПоДокументам(СтруктураШапкиДокумента, ТаблицаПоВзаиморасчетам, ВидРасчетовПоОперации, ВидДвижения, Движения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрамРегл(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, 
	ТаблицаПоВзаиморасчетам, Отказ, Заголовок)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	ПроводкиБУ = Движения.Хозрасчетный;
	ПроводкиНУ = Движения.Налоговый;
	ДатаДока   = Дата;
	
	
	// Проводки по реализации товаров
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаПоТоварам Цикл
			
			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Реализация товаров";
			Проводка.НомерЖурнала    = "";
			
			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);
			
		КонецЦикла;
	КонецЕсли;
	
		// Проводки по реализации услуг
	Если     СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		 
		Для каждого СтрокаТаблицы Из ТаблицаПоУслугам Цикл

			// Выручка
			Если СтрокаТаблицы.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;

			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период          = Дата;
			Проводка.Активность      = Истина;
			Проводка.Организация     = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
			Проводка.Содержание      = "Оказание услуг";
			Проводка.НомерЖурнала    = "";

			Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
			
			Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

		КонецЦикла;
	КонецЕсли;

	// Проводки по передачи тары
	Для каждого СтрокаТаблицы Из ТаблицаПоТаре Цикл

		// Выручка
		Если СтрокаТаблицы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = ПроводкиБУ.Добавить();

		Проводка.Период          = Дата;
		Проводка.Активность      = Истина;
		Проводка.Организация     = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма           = СтрокаТаблицы.ПроводкиСуммаСНДСРегл;
		Проводка.Содержание      = "Передача возвратной тары";
		Проводка.НомерЖурнала    = "";

		Проводка.СчетДт          = СтруктураШапкиДокумента.СчетУчетаРасчетовПоТаре;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
		Проводка.ВалютаДт        = СтруктураШапкиДокумента.ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.ПроводкиСуммаСНДСВал;
		
		Проводка.СчетКт         = СтрокаТаблицы.СчетДоходовБУ;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

	КонецЦикла;

	// НДС 
	ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);
	ДвиженияПоРегиструНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ);
	
	// ВД/ВР
	ПроводкиПоВДВР(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ);
	
	СтруктураПараметровЗачетАванса = БухгалтерскийУчетРасчетовСКонтрагентами.ПодготовкаСтруктурыПараметровДляЗачетаАванса(Ссылка, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета, Заголовок);
	Если СтруктураПараметровЗачетАванса <> Ложь тогда
		
		ДвиженияДляРегистраРасчетовПоРеализации = ПодготовитьТаблицуДвиженийДляРегистраРасчетовПоРеализации(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
		СтруктураДвижений = Новый Структура("ПроводкиБУ, ВзаиморасчетыСКонтрагентамиНалоговыйУчет", ПроводкиБУ, Движения.ВзаиморасчетыСКонтрагентамиНалоговыйУчет); 
		БухгалтерскийУчетРасчетовСКонтрагентами.ЗачетАванса(СтруктураПараметровЗачетАванса, СтруктураДвижений, мВалютаРегламентированногоУчета,РежимПроведения, ЭтотОбъект, ДвиженияДляРегистраРасчетовПоРеализации, Отказ);
		
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
			БухгалтерскийУчетРасчетовСКонтрагентами.ВзаиморасчетыВВалютеПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиБУ,ЭтотОбъект,Отказ);
			Если ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ВзаиморасчетыВВалютеНУПриобретение(СтруктураПараметровЗачетАванса,мВалютаРегламентированногоУчета,РежимПроведения,ПроводкиНУ,ЭтотОбъект,Отказ);	
			Конецесли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Учет курсовых разниц
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета тогда
		СтруктураПараметровКР = БухгалтерскийУчет.ПодготовкаСтуктурыПараметровДляПереоценкиСчета(Ссылка,Заголовок,?(СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,Движения.Налоговый,Неопределено));
		БухгалтерскийУчет.ПереоценкаСчетовДокументаРегл(СтруктураПараметровКР,ПроводкиБУ,мВалютаРегламентированногоУчета);
	КонецЕсли; // Учет курсовых разниц

КонецПроцедуры // ДвиженияПоРегистрамРегл()

// Процедура вызывается из тела процедуры ДвиженияРегистровПодсистемыНДС
// 
Процедура ДвиженияПоРегиструНДСПродаж(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ)
	
	Если Не ОтражатьВНалоговомУчете Тогда
		// Если не нужно отражать в налоговом учете, тогда не отражаем и в подсистеме учета НДС
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	НаборДвижений = Движения.НДСПродаж;
	
	// Получим таблицу значений, совпадающую со струкутрой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	ТаблицаДвижений.Очистить();
	ТаблицаДвиженийТара = ТаблицаДвижений.Скопировать();
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
	Иначе
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,ВидНалоговойДеятельности,СчетУчетаНДС","СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл");
		ТаблицаПродаж = ТаблицаКопия.Скопировать();
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("СтавкаНДС,ВидНалоговойДеятельности,СчетУчетаНДС","СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаПродаж);
		
		ТаблицаПродаж.Свернуть("СтавкаНДС,ВидНалоговойДеятельности,СчетУчетаНДС","СуммаСНДСРегл,СуммаБезНДСРегл,СуммаНДСРегл");
		ТаблицаПродаж.Колонки.СуммаСНДСРегл  .Имя = "СуммаВзаиморасчетовРегл";
		ТаблицаПродаж.Колонки.СуммаБезНДСРегл.Имя = "БазаНДС";
		ТаблицаПродаж.Колонки.СуммаНДСРегл   .Имя = "НДС";
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
		ТаблицаДвижений.ЗаполнитьЗначения(Организация       , "Организация");
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СобытияНДСПродаж.РеализацияПокупателю, "СобытиеНДС");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийНДСПродаж.ОжидаемыйНДС   , "КодОперации");
		
	КонецЕсли;

	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("СтавкаНДС,ВидНалоговойДеятельности,СчетУчетаНДС","СуммаСНДСРегл");
	ТаблицаКопия.Колонки.СуммаСНДСРегл.Имя = "СуммаВзаиморасчетовРегл";
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвиженийТара);
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Организация       , "Организация");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Истина            , "ВозвратнаяТара");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.СобытияНДСПродаж.РеализацияПокупателю, "СобытиеНДС");
	ТаблицаДвиженийТара.ЗаполнитьЗначения(Перечисления.КодыОперацийНДСПродаж.ОжидаемыйНДС   , "КодОперации");
		
	Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
		Движения.НДСПродаж.ВыполнитьПриход();
		Движения.НДСПродаж.Записать();
		
	КонецЕсли;
	
	Если НЕ Отказ И ТаблицаДвиженийТара.Количество() > 0 Тогда
		
		НаборДвижений.мПериод          = Дата;
		НаборДвижений.мТаблицаДвижений = ТаблицаДвиженийТара;
	
		Движения.НДСПродаж.ВыполнитьПриход();
		Движения.НДСПродаж.Записать();
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструНДСПродаж()							  

//
Процедура ПроводкиПоНДС(ПроводкиБУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	// Бухгалтерский учет
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Это не наши ценности, следовательно НДС по ним учитывать не нужно
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
		// Учет НДС не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по счетам НДС
	
	// ТОВАРЫ
	ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
	ТаблицаКопия.Свернуть("СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	// УСЛУГИ
	ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
	ТаблицаКопия.Свернуть("СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	
	ТаблицаДвижений.Свернуть("СчетДоходовБУ, СубконтоДоходовБУ1, СубконтоДоходовБУ2, СубконтоДоходовБУ3, НоменклатурнаяГруппа, СчетУчетаНДС","ПроводкиСуммаНДСРегл,ПроводкиСуммаНДСВал");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если    СтрокаТаблицы.ПроводкиСуммаНДСРегл <> 0 
			ИЛИ СтрокаТаблицы.ПроводкиСуммаНДСВал  <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период                     = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                 = Истина;
			Проводка.Организация                = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                      = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			Проводка.Содержание                 = "НДС: налоговые обязательства: отгрузка";
			Проводка.НомерЖурнала               = "";

			Проводка.СчетДт                     = СтрокаТаблицы.СчетДоходовБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаТаблицы.СубконтоДоходовБУ1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаТаблицы.СубконтоДоходовБУ2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаТаблицы.СубконтоДоходовБУ3);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НоменклатурныеГруппы", СтрокаТаблицы.НоменклатурнаяГруппа);

			Проводка.СчетКт                     = СтрокаТаблицы.СчетУчетаНДС;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтруктураШапкиДокумента.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , СтруктураШапкиДокумента.ДоговорКонтрагента);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

//
Процедура ПроводкиПоВДВР(ПроводкиНУ, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре, Отказ)
	
	// Налоговый учет
	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
		// Учет налога на прибыль не ведется
		Возврат;
	КОнецЕсли;

	// Получим таблицу движений по видам налоговой деятельности
	
	// ТАРА
	ТаблицаКопия = ТаблицаПоТаре.Скопировать();
	ТаблицаКопия.Свернуть("ВидНалоговойДеятельности","СуммаВД");
	ТаблицаДвижений = ТаблицаКопия.Скопировать();
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		// Это не наши ценности, следовательно ВД/ВР по ним отсутствуют
	Иначе
		// ТОВАРЫ
		ТаблицаКопия = ТаблицаПоТоварам.Скопировать();
		ТаблицаКопия.Свернуть("ВидНалоговойДеятельности","СуммаВД");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
		
		// УСЛУГИ
		ТаблицаКопия = ТаблицаПоУслугам.Скопировать();
		ТаблицаКопия.Свернуть("ВидНалоговойДеятельности","СуммаВД");
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаКопия, ТаблицаДвижений);
	КонецЕсли;
	
	ТаблицаДвижений.Свернуть("ВидНалоговойДеятельности","СуммаВД");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДвижений Цикл
		
		Если   СтрокаТаблицы.СуммаВД <> 0 
			 И СтрокаТаблицы.ВидНалоговойДеятельности <> Справочники.ВидыНалоговойДеятельности.НеОблагаемая Тогда
			
			Проводка = ПроводкиНУ.Добавить();

			Проводка.Период                                 = СтруктураШапкиДокумента.Дата;
			Проводка.Активность                             = Истина;
			Проводка.Организация                            = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма                                  = СтрокаТаблицы.СуммаВД;
			Проводка.Содержание                             = "ВД: отгрузка";
			Проводка.НомерЖурнала                           = "";
				
			Проводка.СчетДт                           		= ПланыСчетов.Налоговый.ВаловыеДоходы;
			Проводка.СубконтоДт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.ВидНалоговойДеятельности;
			Проводка.СубконтоДт.СтатьиНалоговогоУчета 		= СтруктураШапкиДокумента.СтатьяВаловыхДоходов;
			
			Проводка.СчетКт                           		= ПланыСчетов.Налоговый.ВаловыеДоходы;
			Проводка.СубконтоКт.ВидыНалоговойДеятельности  	= СтрокаТаблицы.ВидНалоговойДеятельности;
			Проводка.СубконтоКт.СтатьиНалоговогоУчета 		= СтруктураШапкиДокумента.СтатьяВаловыхДоходов;
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегиструТоварыОрганизаций(РежимПроведения, СтруктураШапкиДокумента, 
	ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, Отказ, Заголовок)
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВРегламентированномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		
		// Проверка остатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		//	Движения.ТоварыОрганизаций.КонтрольОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Неопределено);
			Если Не СтруктураШапкиДокумента.ВестиУчетТоваровОрганизацийВРазрезеСкладов Тогда
				ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено);
			КонецЕсли;
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Расход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
	
	Иначе // По ордеру
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыКПередачеОрганизаций.
		
		// Проверка осатков при оперативном проведении.
		Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
			Движения.ТоварыКПередачеОрганизаций.КонтрольСвободныхОстатков(ЭтотОбъект, "Товары", СтруктураШапкиДокумента, Отказ, Заголовок);
		КонецЕсли;
		
		Если Не Отказ Тогда
		
			СтруктТаблицДокумента = Новый Структура;
			СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
			ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыКПередачеОрганизаций, СтруктТаблицДокумента);
			
			// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация",      Организация);
			ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "ДокументПередачи", Ссылка);
				
			ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыКПередачеОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Перекинем остатки по организации на комиссионера.
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		// ТОВАРЫ ПО РЕГИСТРУ ТоварыОрганизаций.
		СтруктТаблицДокумента = Новый Структура;
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам", ТаблицаПоТоварам);
				
		ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ТоварыОрганизаций, СтруктТаблицДокумента);
			
		// Недостающие поля (качество заполнили в "ПередЗаписью" документа).
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", Организация);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Комиссионер", Контрагент);
		ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад",       Неопределено);
				
		ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ТоварыОрганизаций, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, Дата);
		
	КонецЕсли;
	
КонецПроцедуры // ДвиженияПоРегиструТоварыОрганизаций()

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Оборудование, "ДопустимыйСтатус1");
	Иначе
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный, "ДопустимыйСтатус1");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция, "ДопустимыйСтатус2");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.НаКомиссию,"ДопустимыйСтатус3");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус4");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
	// Данные для заполнения отчетов комитенту
	ТаблицаДвижений.ЗаполнитьЗначения(ВалютаДокумента, "ВалютаДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КурсДокумента,      "КурсДокумента");
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.КратностьДокумента, "КратностьДокумента");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект) Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Проект,"Проект");
	КонецЕсли;
	
	ЗаказСписания = ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено);

	Для каждого Строка Из ТаблицаДвижений Цикл
		СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));
		Строка.СуммаЗадолженности   = СтрокаТЧ.СуммаСНДСДок;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПокупателя) Тогда
			Строка.ЗаказСписания = ЗаказСписания;
		Иначе
			Строка.ЗаказСписания = СтрокаТЧ.ЗаказПокупателя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам)
	
	Перем КэшПоСчетам;
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");
	
	Если    СтруктураШапкиДокумента.ЕстьНалогНаПрибыль 
		ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете, "ОтражатьВНалоговомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация,                 "Организация");

	Если     СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

			Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
			Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
			Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
			Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

			Если Строка.ОтражатьВНалоговомУчете Тогда

				Если СтруктураШапкиДокумента.ЕстьНДС Тогда
					Строка.ВидДеятельностиНДСПоФакту = СтрокаТЧ.ВидДеятельностиНДС;	
				КонецЕсли;
				
				Если    СтруктураШапкиДокумента.ЕстьНДС 
					ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
					Строка.ВидНалоговойДеятельностиПоФакту = СтрокаТЧ.ВидНалоговойДеятельности;
					Строка.АмортизируетсяПоФакту   		   = СтрокаТЧ.Амортизируется; 
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда

		Для каждого Строка Из ТаблицаДвижений Цикл

			СтрокаТЧ = ТаблицаПоТоварам.Получить(ТаблицаДвижений.Индекс(Строка));

			Строка.КорСчетБУ         = СтрокаТЧ.ПереданныеСобственныеБУ;
			Строка.ПринятыеКорСчетБУ = СтрокаТЧ.ПереданныеПринятыеБУ;

			Строка.КорСчетНУ         = СтрокаТЧ.ПереданныеСобственныеНУ;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,"ДопустимыйСтатус1");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Купленный     ,"ДопустимыйСтатус2");
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПартийТоваров.Продукция     ,"ДопустимыйСтатус3");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Подразделение,"Подразделение");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");
	
КонецПроцедуры 

Процедура ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре)
	
  	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");

	Если    СтруктураШапкиДокумента.ЕстьНалогНаПрибыль 
		ИЛИ СтруктураШапкиДокумента.ЕстьНДС Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(ОтражатьВНалоговомУчете, "ОтражатьВНалоговомУчете");
	КонецЕсли;

	ТаблицаДвижений.ЗаполнитьЗначения(Организация            , "Организация");
	
	Для каждого Строка Из ТаблицаДвижений Цикл

		СтрокаТЧ = ТаблицаПоТаре.Получить(ТаблицаДвижений.Индекс(Строка));

		Строка.СтоимостьПоступлениеБУ  = СтрокаТЧ.ПроводкаСумма;
		
		Строка.КорСчетБУ      = СтрокаТЧ.СчетРасходовБУ;
		Строка.КорСубконтоБУ1 = СтрокаТЧ.СубконтоРасходовБУ1;
		Строка.КорСубконтоБУ2 = СтрокаТЧ.СубконтоРасходовБУ2;
		Строка.КорСубконтоБУ3 = СтрокаТЧ.СубконтоРасходовБУ3;

		Если Строка.ОтражатьВНалоговомУчете Тогда

			Если СтруктураШапкиДокумента.ЕстьНДС Тогда
				Строка.ВидДеятельностиНДСПоФакту = СтрокаТЧ.ВидДеятельностиНДС;	
			КонецЕсли;
			
			Если    СтруктураШапкиДокумента.ЕстьНДС 
				ИЛИ СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
				Строка.ВидНалоговойДеятельностиПоФакту = СтрокаТЧ.ВидНалоговойДеятельности;
				Строка.АмортизируетсяПоФакту   		   = СтрокаТЧ.Амортизируется; 
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры 

Процедура ДвиженияПоРегиструСписанныеТовары(СтруктураШапкиДокумента, ТаблицаПоТоварам, 
	ТаблицаПоТаре, Отказ, Заголовок);
	
	// ТОВАРЫ ПО РЕГИСТРУ СписанныеТовары.
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	ТаблицаЗаказов = ТаблицаПоТоварам.ВыгрузитьКолонку("ЗаказПокупателя");
	
	// Заполним таблицу движений.
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварам, ТаблицаДвижений);
	
	// Недостающие поля.
	Инд = 0;
	Для каждого Строка Из ТаблицаДвижений Цикл
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Товары;
		
	КонецЦикла;
	
	// Если резервирование под заказ - заказ партии
	Если СтруктураШапкиДокумента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
		ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВедениеУчетаПоПроектам,   "ВедениеУчетаПоПроектам");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	Если Не ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
		 ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный    Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.Реализация, "КодОперацииПартииТоваров");
		
	ИначеЕсли СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаНаКомиссию, "КодОперацииПартииТоваров");
		
		ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
		ТаблицаДвижений.ЗаполнитьЗначения(Ссылка,                "ДокументПередачи");
		ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.СтатусыПолученияПередачиТоваров.НаКомиссию, "СтатусПередачи");
		
	КонецЕсли;
	
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(ДоговорКонтрагента, "ДоговорКонтрагента");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	// Данные для регл учета (НДС)
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТоварамРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТоварам);
	
	НаборДвижений.мПериод          = Дата;
	НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	// ТАРА ПО РЕГИСТРУ СписанныеТовары.
	
	НаборДвижений = Движения.СписанныеТовары;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	ТаблицаДвижений.Очистить();
	
	// Заполним таблицу движений.
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТаре, ТаблицаДвижений);
	
	// Недостающие поля.
	Для каждого Строка Из ТаблицаДвижений Цикл
		
		Инд = Инд+1;
		Строка.НомерСтрокиДокумента = Инд;
		Строка.ВидТабличнойЧасти = Перечисления.ВидыТабличныхЧастей.Тара;
		
	КонецЦикла;
	
	// Документы с видом передачи по ордеру сразу не проводятся
	Если ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ТаблицаДвижений.ЗаполнитьЗначения(Истина, "НеСписывать");
	КонецЕсли;
	
	ТаблицаДвижений.ЗагрузитьКолонку(ТаблицаЗаказов, "ЗаказПартии");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Дата,   "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Ссылка, "Регистратор");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту,"КодОперацииПартииТоваров");
	ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");
	
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареУпр(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	ЗаполнитьКолонкиРегистраСписанныеТоварыПоТареРегл(ТаблицаДвижений, СтруктураШапкиДокумента, ТаблицаПоТаре);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.СписанныеТовары.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.СписанныеТовары.Записать(Истина);
	
КонецПроцедуры // ДвиженияПоРегиструСписанныеТовары()

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения)
	
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "ВалютаУправленческогоУчета"                  , "ВалютаУправленческогоУчета");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Константы", "КурсВалютыУправленческогоУчета"              , "КурсВалютыУправленческогоУчета");
	
	// Для контроля остатков по взаиморасчетам
	УправлениеВзаиморасчетами.ДополнитьДеревоПолейЗапросаПоШапкеДляКонтроляВзаиморасчетовУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке)
	
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	СтруктураПолей.Вставить("Цена", "Цена");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей)
	
	СтруктураПолей.Вставить("СчетУчетаБУ"                      , "СчетУчетаБУ");
	СтруктураПолей.Вставить("ПринятыеСчетУчетаБУ"              , "ПринятыеСчетУчетаБУ");
	СтруктураПолей.Вставить("ПереданныеСобственныеБУ"          , "ПереданныеСобственныеБУ");
 	СтруктураПолей.Вставить("ПереданныеПринятыеБУ"             , "ПереданныеПринятыеБУ");
 	СтруктураПолей.Вставить("Забалансовый"                     , "СчетУчетаБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПринятыеЗабалансовый"             , "ПринятыеСчетУчетаБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПереданныеПринятыеЗабалансовый"   , "ПереданныеПринятыеБУ.Забалансовый");
 	СтруктураПолей.Вставить("ПереданныеСобственныеЗабалансовый", "ПереданныеСобственныеБУ.Забалансовый");
 	СтруктураПолей.Вставить("СхемаРеализации"                  , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"                    , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"               , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"               , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"               , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"                   , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"              , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"              , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"              , "СхемаРеализации.СубконтоСебестоимости3");
 	СтруктураПолей.Вставить("СчетУчетаНДС"                     , "СчетУчетаНДС");
 	СтруктураПолей.Вставить("ВидНалоговойДеятельности"         , "ВидНалоговойДеятельности");
 	СтруктураПолей.Вставить("УчитываетсяКакЗапасНУ"            , "УчитываетсяКакЗапасНУ");
 	СтруктураПолей.Вставить("СтатьяПриростаУбылиЗапасов"       , "СтатьяПриростаУбылиЗапасов");
	
	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС", Перечисления.ВидыДеятельностиНДС.ПустаяСсылка());
	СтруктураПростыхПолей.Вставить("Амортизируется"    , Ложь);
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда
		СтруктураПростыхПолей.Вставить("СчетУчетаНУ"            , ПланыСчетов.Налоговый.Оборудование);
		СтруктураПростыхПолей.Вставить("ПереданныеСобственныеНУ", ПланыСчетов.Налоговый.ПустаяСсылка());
	Иначе
		СтруктураПростыхПолей.Вставить("СчетУчетаНУ"            , ПланыСчетов.Налоговый.Запасы);
		СтруктураПростыхПолей.Вставить("ПереданныеСобственныеНУ", ПланыСчетов.Налоговый.ТоварыПереданные);
	КонецЕсли;

КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей)
	
	СтруктураПолей.Вставить("Цена"                        , "Цена");
	СтруктураПолей.Вставить("СпособСписанияОстаткаТоваров", "СпособСписанияОстаткаТоваров");
	
КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей)
	
 	СтруктураПолей.Вставить("СчетУчетаБУ"               , "СчетУчетаБУ");
 	СтруктураПолей.Вставить("Забалансовый"              , "СчетУчетаБУ.Забалансовый");

 	СтруктураПолей.Вставить("СхемаРеализации"           , "СхемаРеализации");
 	СтруктураПолей.Вставить("СчетДоходовБУ"             , "СхемаРеализации.СчетДоходов");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ1"        , "СхемаРеализации.СубконтоДоходов1");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ2"        , "СхемаРеализации.СубконтоДоходов2");
 	СтруктураПолей.Вставить("СубконтоДоходовБУ3"        , "СхемаРеализации.СубконтоДоходов3");
 	СтруктураПолей.Вставить("СчетРасходовБУ"            , "СхемаРеализации.СчетСебестоимости");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ1"       , "СхемаРеализации.СубконтоСебестоимости1");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ2"       , "СхемаРеализации.СубконтоСебестоимости2");
 	СтруктураПолей.Вставить("СубконтоРасходовБУ3"       , "СхемаРеализации.СубконтоСебестоимости3");
 	СтруктураПолей.Вставить("ВидНалоговойДеятельности"  , "ВидНалоговойДеятельности");
 	СтруктураПолей.Вставить("СтатьяПриростаУбылиЗапасов", "СтатьяПриростаУбылиЗапасов");

 	СтруктураПростыхПолей.Вставить("СтавкаНДС"              , Перечисления.СтавкиНДС.НеНДС);
 	СтруктураПростыхПолей.Вставить("НДС"                    , 0);
 	СтруктураПростыхПолей.Вставить("СчетУчетаНДС"           , ПланыСчетов.Хозрасчетный.ПустаяСсылка());
 	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС"     , Перечисления.ВидыДеятельностиНДС.Необлагаемая);
 	СтруктураПростыхПолей.Вставить("Амортизируется"         , Ложь);
 	СтруктураПростыхПолей.Вставить("СчетУчетаНУ"            , ПланыСчетов.Налоговый.Запасы);
 	СтруктураПростыхПолей.Вставить("ПереданныеСобственныеНУ", ПланыСчетов.Налоговый.ПустаяСсылка());
	
КонецПроцедуры

// Дополняет полями, нужными для упр. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей)

	СтруктураПолей.Вставить("Цена", "Цена");

КонецПроцедуры

// Дополняет полями, нужными для регл. учета
Процедура ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей)

	СтруктураПолей.Вставить("СхемаРеализации"          , "СхемаРеализации");
	СтруктураПолей.Вставить("СчетДоходовБУ"            , "СхемаРеализации.СчетДоходов");
	СтруктураПолей.Вставить("СубконтоДоходовБУ1"       , "СхемаРеализации.СубконтоДоходов1");
	СтруктураПолей.Вставить("СубконтоДоходовБУ2"       , "СхемаРеализации.СубконтоДоходов2");
	СтруктураПолей.Вставить("СубконтоДоходовБУ3"       , "СхемаРеализации.СубконтоДоходов3");
	СтруктураПолей.Вставить("СчетРасходовБУ"           , "СхемаРеализации.СчетСебестоимости");
	СтруктураПолей.Вставить("СубконтоРасходовБУ1"      , "СхемаРеализации.СубконтоСебестоимости1");
	СтруктураПолей.Вставить("СубконтоРасходовБУ2"      , "СхемаРеализации.СубконтоСебестоимости2");
	СтруктураПолей.Вставить("СубконтоРасходовБУ3"      , "СхемаРеализации.СубконтоСебестоимости3");
	СтруктураПолей.Вставить("СчетУчетаНДС"             , "СчетУчетаНДС");
	СтруктураПолей.Вставить("ВидНалоговойДеятельности" , "ВидНалоговойДеятельности");

	СтруктураПростыхПолей.Вставить("ВидДеятельностиНДС" , Перечисления.ВидыДеятельностиНДС.Необлагаемая);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		УправлениеВзаиморасчетами.ЗаполнитьДанныеДоставкиПоОснованию(ЭтотОбъект, Основание);
		
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		#Если Клиент Тогда
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				ВвестиЗначение(Склад, "Выберите склад", Тип("СправочникСсылка.Склады"));
			КонецЕсли;
		#КонецЕсли
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") тогда
             Дата		=Основание.ДатаОтгрузки;
			 ЗаявкаДата	=Основание.Дата;
			 Реализатор=Основание.Контрагент.ОсновнойМенеджерПокупателя;
			 Комментарий="Создан на основании заказа № "+Основание.Номер+" "+Формат(ТекущаяДата(),"ДЛФ=DT");
			 ЭтотОбъект.ОтражатьВУправленческомУчете = Истина;
		КонецЕсли;		
		
		ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		ВидПередачи = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ (ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")
			И ДоговорКонтрагента.ВедениеВзаиморасчетов = 
			Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам) Тогда
			Сделка = Основание;
			
		Иначе
			Сделка = Основание.ЗаказПокупателя;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части неполученными ТМЦ (резервом) по заказу покупателя.
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(Товары, Основание);
			ЗаполнитьТабличнуюЧастьПоЗаказуПокупателяУпр(ВозвратнаяТара, Основание);
			ЗаполнитьУслугиПоОстаткамУпр();
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			
			СкопироватьТовары(Основание);
			СкопироватьВозвратнуюТару(Основание);
			СкопироватьУслуги(Основание);
			
			Если ТипЗнч(Основание.СтруктурнаяЕдиница) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
				БанковскийСчетОрганизации = Основание.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			СкопироватьТовары(Основание);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		// Заполним реквизиты шапки по документу основанию.
		Организация   = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидПередачи   = Перечисления.ВидыПередачиТоваров.СоСклада;
		
		Если Основание.ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
			Склад = Основание.СкладОрдер;
		Иначе
			Склад = Основание.СкладОрдер.Склад;
		КонецЕсли;
		
		Если Основание.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
		КонецЕсли;
		
		МассивЗаказов = Неопределено;
		//возможно это межфирменная продажа
		ОрганизацияКонтрагента = УправлениеВзаиморасчетами.ПолучитьОрганизациюПоКонтрагенту(Основание.Контрагент);
		Если  ЗначениеЗаполнено(ОрганизацияКонтрагента) Тогда
			Контрагент  = УправлениеВзаиморасчетами.ПолучитьКонтрагентаПоОрганизации( Основание.Организация);
			Организация = УправлениеВзаиморасчетами.ПолучитьОрганизациюПоКонтрагенту( Основание.Контрагент);
		Иначе
			
			#Если КЛИЕНТ Тогда
				// Выбор контрагента/договора
				СтруктТабЧастей = Новый Структура;
				СтруктТабЧастей.Вставить("Товары",         "Заказ");
				СтруктТабЧастей.Вставить("ВозвратнаяТара", "Заказ");
				
				СтруктПараметры = Новый Структура;
				СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
				
				ЗаказыВТабЧасти = Константы.УказаниеЗаказовВТабличнойЧастиДокументов.Получить();
				СтруктПараметры.Вставить("ЗаказВТабЧасти",
				ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовРеализации
				ИЛИ ЗаказыВТабЧасти = Перечисления.ВариантыУказанияЗаказовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации);
				
				РезультатВыбораЗаказа = РаботаСДиалогами.ВыбратьЗаказИзДокументаОснования(Основание, СтруктПараметры);
				Если РезультатВыбораЗаказа.ВыборСделан Тогда
					Контрагент         = РезультатВыбораЗаказа.Контрагент;
					ДоговорКонтрагента = РезультатВыбораЗаказа.Договор;
					МассивЗаказов      = РезультатВыбораЗаказа.Заказ;
					Если МассивЗаказов.Количество() = 1 Тогда
						Сделка         = МассивЗаказов[0];
					КонецЕсли;
				КонецЕсли;
			#Иначе
				Контрагент         = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель");
				ОсновнойДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
				Если (ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
					или ОсновнойДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
					и ОсновнойДоговорКонтрагента.Организация = Организация Тогда
					ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураКурсаВзаиморасчетов = ОбщегоНазначения.ПолучитьКурсВалюты(ВалютаДокумента, ОбщегоНазначения.ПолучитьРабочуюДату());
		КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
		КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
		
		// ТипЦен.
		ТипЦен = ДоговорКонтрагента.ТипЦен;
		
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойТипЦенПродажи");
		КонецЕсли;
		
		// Флаги включения налогов.
		УчитыватьНДС = Истина;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены.
			ВремТипЦен       = ?(ТипЦен.Рассчитывается, ТипЦен.БазовыйТипЦен, ТипЦен);
			СуммаВключаетНДС = ВремТипЦен.ЦенаВключаетНДС;
			
		Иначе
			// Заполним значениями по умолчанию (не заполнен ТипЦен).
			СуммаВключаетНДС= Истина;
		КонецЕсли;
		
		Если Основание.Проведен Тогда
			
			// Заполним табличные части по документу основанию (Поступление товаров);
			// количество - минимум из того, что есть в документе основании и свободного остатка на складе.
			Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия Тогда
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Товары", МассивЗаказов);
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
				ЗаполнитьТоварыПоПоступлениюТоваровУпр(Основание,"Оборудование", МассивЗаказов);
			КонецЕсли;
			ЗаполнитьВозвратнуюТаруПоПоступлениюТоваровУпр(Основание, МассивЗаказов);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		ИспользоватьНаработку 			= Основание.ИспользоватьНаработку;
		ИспользоватьНаправленияВыпуска 	= Основание.ИспользоватьНаправленияВыпуска;
		
		// Заполнение таб.части
		Для Каждого ТекСтрокаПродукция Из Основание.Продукция Цикл
			
			Если ИспользоватьНаработку И ТекСтрокаПродукция.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск Тогда
				Продолжить;
			КонецЕсли;
			Если ИспользоватьНаправленияВыпуска И ТекСтрокаПродукция.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаСклад Тогда
				Продолжить; // Выпуск в другое подразделение
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПродукция);
			НоваяСтрока.СтавкаНДС = ТекСтрокаПродукция.Номенклатура.СтавкаНДС;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( НоваяСтрока, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")  И не ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаказПокупателя")   Тогда
		
		Если Основание.Метаданные().Реквизиты.Найти("ОтражатьВУправленческомУчете") <> Неопределено Тогда
			ОтражатьВУправленческомУчете = Основание.ОтражатьВУправленческомУчете;
		Иначе
			ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
		КонецЕсли;
		
		Если Основание.Метаданные().Реквизиты.Найти("ОтражатьВБухгалтерскомУчете") <> Неопределено Тогда
			ОтражатьВБухгалтерскомУчете = Основание.ОтражатьВБухгалтерскомУчете;
			ОтражатьВНалоговомУчете     = Основание.ОтражатьВНалоговомУчете;
		Иначе
			ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				ОтражатьВНалоговомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
			Иначе
				ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаЗаполненияРегл(Основание);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
		УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура вызывается перед записью документа 
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	ДополнительныеФункции.ЗаписатьИзменениеСтатусаДокумента(ЭтотОбъект.ЭтапОтгрузки,ЭтотОбъект.Ссылка);	
	Если ОбменДанными.Загрузка  Тогда 
		Возврат;
	КонецЕсли;
			
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Если договор с комиссионером, то надо почистить закладку "Услуги".
	Если Услуги.Количество() > 0
		И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		
		Услуги.Очистить();
		
	КонецЕсли;

	// Если договор внешнеэкономический, то надо почистить закладку "ВозвратнаяТара".
	Если ВозвратнаяТара.Количество() > 0
		И ДоговорКонтрагента.ВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета Тогда

		ВозвратнаяТара.Очистить();

	КонецЕсли;
	
	// Проверка заполнения единицы измерения мест и количества мест
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьЕдиницуИзмеренияМест(Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Товары);
	ОбработкаТабличныхЧастей.ПриЗаписиПроверитьСтавкуНДС(ЭтотОбъект, Услуги);

	Если АвторасчетНДС Тогда
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Товары, ЭтотОбъект, ПогрешностиОкругления, ?(ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование, "Оборудование", "Товары"));
		// пересчет сумм НДС с учетом ошибок округления
		ОбработкаТабличныхЧастей.ПересчитатьНДСсУчетомПогрешностиОкругления(Услуги, ЭтотОбъект, ПогрешностиОкругления, "Услуги");
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + Ценообразование.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	// В этом случае почистим в табличных частях поле СпособСписанияОстаткаТоваров.
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Оборудование Тогда 
		
		Сделка = Неопределено;
		
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = "";
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Услуги Цикл
			СтрокаТаблицы.ЗаказПокупателя = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	//для брака способ списания всегда - со склада
	Если ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Брак Тогда
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Товары"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
			Если СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
				СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
				Сообщить("В строке №"+СтрокаТаблицы.НомерСтроки+" табличной части ""Возвратная тара"" изменен способ списания остатка товаров: было 'Из резерва', установлено 'Со склада'."+Символы.ПС+"   Списывать брак из резерва запрещено.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Необходимо, чтобы качество обязательно было "Новый"
		КачествоНовый = Справочники.Качество.Новый;
		ЭтотОбъект.НулевыеЦены = Ложь;//***160705
		Для каждого СтрокаТаблицы Из ЭтотОбъект.Товары Цикл
			Если СтрокаТаблицы.Качество <> КачествоНовый Тогда
				СтрокаТаблицы.Качество = КачествоНовый;
			КонецЕсли;
			Если СтрокаТаблицы.Цена = 0 И ЭтотОбъект.НулевыеЦены = ложь Тогда //***160705
				ЭтотОбъект.НулевыеЦены = Истина;
			КонецЕсли; //***160705
		КонецЦикла
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) И Сделка <> Неопределено Тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	УправлениеЗаказами.ЗаполнитьЗаказПокупателяВТЧ(ВидОперации,ЭтотОбъект, "Реализация");
	Процент=0;
	Если не РольДоступна("Филиал")  и не РольДоступна("ФилиалРуководитель") тогда
		Процент=Справочники.ТипыЦенНоменклатуры.НайтиПоКоду(ЦенаРеализатора.Код).ПроцентСкидкиНаценки;
		//Сумма менеджера
		Если РежимЗаписи <> РежимЗаписиДокумента.Проведение тогда
			ВсегоСуммаМенеджера=0;
			ЭтотОбъект.СуммаИтогМенеджера=0;
			Для каждого СтрокаТовары из Товары  Цикл
				Если СтрокаТовары.Количество=0 тогда
					продолжить;
				КонецЕсли;
				ЦенаМенеджера 				= НйтиЦенуМенеджера(СтрокаТовары.Номенклатура,СтрокаТовары.ХарактеристикаНоменклатуры);
				ВсегоСуммаМенеджера			= ЦенаМенеджера*СтрокаТовары.Количество;
				СтрокаТовары.СуммаМенеджера = ВсегоСуммаМенеджера;
				ЭтотОбъект.СуммаИтогМенеджера=ЭтотОбъект.СуммаИтогМенеджера+ВсегоСуммаМенеджера;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	Для каждого СтрокаТаблицы Из ЭтотОбъект.ВозвратнаяТара Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЗаказПокупателя) и СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва Тогда
			СтрокаТаблицы.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСкладыВТЧ();
	// Удаление неиспользуемых строк табличной части "Серийные номера".
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "Товары");
	УчетСерийныхНомеров.УдалитьНеиспользуемыеСтрокиПодчиненнойТЧ(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, "СоставНабора", "СерийныеНомераСоставНабора");
	Если не ЗначениеЗаполнено(ЭтотОбъект.Подразделение) тогда
		ЭтотОбъект.Подразделение= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный, "ОсновноеПодразделение");	
	КонецЕсли;
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПриЗаписи"
//
Процедура ПриЗаписи(Отказ)
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	Если РольДоступна("СбытРМК") или РольДоступна("Филиал") 
			или РольДоступна("ФилиалРуководитель") тогда
		ПроверкаБазовогоАдреса(ЭтотОбъект);
	КонецЕсли;
	
	// Удаление записей регистрации из всех последовательностей
		
	ПолныеПрава.РегистрацияОбъектовДоступаДокумента(Ссылка, Новый Структура("Контрагент,
	|Организация",
	Контрагент,
	Организация), мУдалятьДвижения);
    
    //***//ПередЗаписью списатьтовары по РН Товары на складах и Товары на складах Организаций
    Если ЭтотОбъект.Товары.Итог("Количество") >0 и ЭтотОбъект.Проведен=Ложь И ЭтотОбъект.ПометкаУдаления=ложь И ЭтотОбъект.СписыватьТовар=Истина Тогда
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
        ЗапросТоваров.УстановитьПараметр("ТекДата", Мин(ЭтотОбъект.Дата,ТекущаяДата()));
        ЗапросТоваров.УстановитьПараметр("Склад", ЭтотОбъект.Склад);
        ЗапросТоваров.Текст =
        "ВЫБРАТЬ
        |	РеализацияТоваровУслугТовары.Номенклатура,
        |	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
        |	РеализацияТоваровУслугТовары.Количество + РеализацияТоваровУслугТовары.СкидкаНаВес + РеализацияТоваровУслугТовары.ВесУпаковки КАК Количество,
        |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
        |	ИСТИНА КАК Активность,
        |	&ТекДата КАК Период,
        |	&ТекущийДокумент КАК Регистратор,
        |	&Склад КАК Склад,
        |	РеализацияТоваровУслугТовары.Качество КАК Качество,
        |	РеализацияТоваровУслугТовары.Ссылка.Организация КАК Организация
        |ИЗ
        |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
        |ГДЕ
        |	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
        |	И РеализацияТоваровУслугТовары.Количество > 0";
        
        Результат = ЗапросТоваров.Выполнить().Выгрузить();
        
        Если Результат.Количество()>0 тогда
            НаборЗаписейРегистра = ЭтотОбъект.Движения.ТоварыНаСкладах;
            НаборЗаписейРегистра.Очистить();
            НаборЗаписейРегистра.Загрузить(Результат);
            НаборЗаписейРегистраТО = ЭтотОбъект.Движения.ТоварыОрганизаций;
            НаборЗаписейРегистраТО.Очистить();
            НаборЗаписейРегистраТО.Загрузить(Результат);
            НаборЗаписейРегистра.Записать(Истина);
            НаборЗаписейРегистраТО.Записать(Истина);
        КонецЕсли;
    ИначеЕсли ЭтотОбъект.Товары.Итог("Количество") >0 и ЭтотОбъект.Проведен=Ложь И ЭтотОбъект.ПометкаУдаления=ложь И ЭтотОбъект.СписыватьТовар=Ложь Тогда    
        
            НаборЗаписейРегистра = ЭтотОбъект.Движения.ТоварыНаСкладах;
            //Если НаборЗаписейРегистра.Количество()>0 тогда
                НаборЗаписейРегистра.Очистить();
                НаборЗаписейРегистраТО = ЭтотОбъект.Движения.ТоварыОрганизаций;
                НаборЗаписейРегистраТО.Очистить();
                //НаборЗаписейРегистра.Записать(Истина);
                //НаборЗаписейРегистраТО.Записать(Истина);
            //КонецЕсли    
            
    ИначеЕсли ЭтотОбъект.ПометкаУдаления=ИСТИНА Тогда    
            НаборЗаписейРегистра = ЭтотОбъект.Движения.ТоварыНаСкладах;
            //Если НаборЗаписейРегистра.Количество()>0 тогда
                НаборЗаписейРегистра.Очистить();
                НаборЗаписейРегистраТО = ЭтотОбъект.Движения.ТоварыОрганизаций;
                НаборЗаписейРегистраТО.Очистить();
            //    НаборЗаписейРегистра.Записать(Истина);
            //    НаборЗаписейРегистраТО.Записать(Истина);
            //КонецЕсли;    
    КонецЕсли;    
    //***//
КонецПроцедуры

// Процедура определяет параметры упр. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецМесяца(Дата), Отказ);
	
	Если НЕ Отказ Тогда
		СтруктураШапкиДокумента.Вставить("ВестиПартионныйУчетПоСкладам"          , мУчетнаяПолитика.ВестиПартионныйУчетПоСкладам = Истина);
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиУпр()

// Процедура определяет параметры регл. учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок)

	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		// Прежде всего, проверим заполнение реквизита Организация в шапке документа
		СтруктураОбязательныхПолей = Новый Структура("Организация");
		// Теперь позовем общую процедуру проверки
		ОбщегоНазначения.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
		// Организация не заполнена, получать учетную политику нет смысла
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
		
		мУчетнаяПолитикаНУ = НалоговыйУчет.ПолучитьПараметрыУчетнойПолитикиНалоговыйУчет(КонецМесяца(Дата), Отказ, Организация, Заголовок);
		
		Если НЕ Отказ Тогда
			СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , мУчетнаяПолитикаНУ.СхемаНалогообложения.НалогНаПрибыль = Истина);
			СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , мУчетнаяПолитикаНУ.СхемаНалогообложения.НДС = Истина);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитикиРегл()

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	ПодготовитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента, Отказ, Заголовок);
	ПодготовитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента, Отказ, Заголовок);
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения = Неопределено) Экспорт
	
	// Дерево значений, содержащее имена необходимых полей в запросе по шапке.
	Перем ДеревоПолейЗапросаПоШапке;
	
	Если РежимПроведения = Неопределено Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = "Проведение документа """ + СокрЛП(Ссылка) + """: ";
	
	СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	
	// Для определения где нужно проверять склад: в шапке или в ТЧ.
	СтруктураШапкиДокумента.Вставить("СкладВТабличнойЧасти", мУказаниеСкладовВТЧ);
	
	// Для определения где нужно проверять заказ: в шапке или в ТЧ.
	ЗаказВТабличнойЧасти = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента);
	СтруктураШапкиДокумента.Вставить("ЗаказВТабличнойЧасти", ЗаказВТабличнойЧасти);
	
	// Заполним по шапке документа дерево параметров, нужных при проведении.
	ДеревоПолейЗапросаПоШапке      = УправлениеЗапасами.СформироватьДеревоПолейЗапросаПоШапке();
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВедениеВзаиморасчетов"                      , "ВедениеВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВалютаВзаиморасчетов"                       , "ВалютаВзаиморасчетов");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "Организация"                                , "ДоговорОрганизация");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВидДоговора"                                , "ВидДоговора");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ВестиПоДокументамРасчетовСКонтрагентом"     , "ВестиПоДокументамРасчетовСКонтрагентом");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Организации",          "ОтражатьВРегламентированномУчете"           , "ОтражатьВРегламентированномУчете");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Склад"               , "ВидСклада"                                  , "ВидСклада");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиПартионныйУчетПоСкладам"               , "ВестиПартионныйУчетПоСкладам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВедениеУчетаПоПроектам"                     , "ВедениеУчетаПоПроектам");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "ДоговорыКонтрагентов", "ОбособленныйУчетТоваровПоЗаказамПокупателей", "ОбособленныйУчетТоваровПоЗаказамПокупателей");
	УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "УчетнаяПолитика"     , "ВестиУчетТоваровОрганизацийВРазрезеСкладов"   , "ВестиУчетТоваровОрганизацийВРазрезеСкладов");
	
	// Если сделка - Заказ покупателя, то надо цену для проведения пересчитать в валюту заказа.
	Если ЗначениеЗаполнено(Сделка) 
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "ВалютаДокумента"                            , "ВалютаЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КурсВзаиморасчетов"                         , "КурсВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"          , "КратностьВзаиморасчетов"                    , "КратностьВзаиморасчетовЗаказа");
		УправлениеЗапасами.ДобавитьСтрокуВДеревоПолейЗапросаПоШапке(ДеревоПолейЗапросаПоШапке, "Сделка"              , "ВидОперации"                                , "СделкаВидОперации");
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьДеревоПолейЗапросаПоШапкеУпр(ДеревоПолейЗапросаПоШапке, РежимПроведения);
	ДополнитьДеревоПолейЗапросаПоШапкеРегл(ДеревоПолейЗапросаПоШапке);
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	СтруктураШапкиДокумента = УправлениеЗапасами.СформироватьЗапросПоДеревуПолей(ЭтотОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Если надо пересчитывать цену в валюту заказа. то в структуре должна быть заполнена валюта заказа.
	ВалютаЗаказа = Неопределено;
	НужнаЦенаЗаказа = Ложь;
	Если СтруктураШапкиДокумента.Свойство("ВалютаЗаказа", ВалютаЗаказа) Тогда
		НужнаЦенаЗаказа = Истина;
		Если ВалютаЗаказа = мВалютаРегламентированногоУчета Тогда
			КурсЗаказа      = 1;
			КратностьЗаказа = 1;
		Иначе //ВалютаЗаказа = ВалютаВзаиморасчетов
			КурсЗаказа      = СтруктураШапкиДокумента.КурсВзаиморасчетовЗаказа;
			КратностьЗаказа = СтруктураШапкиДокумента.КратностьВзаиморасчетовЗаказа;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить("КурсЗаказа"     , КурсЗаказа);
		СтруктураШапкиДокумента.Вставить("КратностьЗаказа", КратностьЗаказа);
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("НужнаЦенаЗаказа", НужнаЦенаЗаказа);
	
	СтруктураШапкиДокумента.Вставить("РежимПроведения", РежимПроведения);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре) Экспорт
	
	ПогрешностиОкругления     = Новый Соответствие;
	ПогрешностиОкругленияТара = Новый Соответствие;
	
	// Получим необходимые данные для проведения и проверки заполенения данные по табличной части "Товары".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"                    , "ЕдиницаИзмерения");
	СтруктураПолей.Вставить("Цена"                                , "Цена");
	СтруктураПолей.Вставить("Номенклатура"                        , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"			      , "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                          , "Количество * Коэффициент /Номенклатура.ЕдиницаХраненияОстатков.Коэффициент");
	СтруктураПолей.Вставить("КоличествоДок"                       , "Количество");
	СтруктураПолей.Вставить("Качество"                            , "Качество");
	СтруктураПолей.Вставить("Склад"                               , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                           , "Склад.ВидСклада");
	СтруктураПолей.Вставить("Сумма"                               , "Сумма");
	СтруктураПолей.Вставить("СуммаДок"                            , "Сумма");
	СтруктураПолей.Вставить("СтавкаНДС"                           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                                 , "СуммаНДС");
	СтруктураПолей.Вставить("НДСДок"                              , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"                         , "НомерСтроки");
	СтруктураПолей.Вставить("ХарактеристикаНоменклатуры"          , "ХарактеристикаНоменклатуры");
	СтруктураПолей.Вставить("СерияНоменклатуры"                   , "СерияНоменклатуры");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки"                , "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"         , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"         , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки" , "ЗначениеУсловияАвтоматическойСкидки");
	СтруктураПолей.Вставить("КлючСтроки"                          , "КлючСтроки");
	СтруктураПолей.Вставить("ТипНоменклатуры"                     , "Номенклатура.ВидНоменклатуры.ТипНоменклатуры");
	СтруктураПолей.Вставить("ЗаказПокупателя"                     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("КоличествоВЕдиницахДокумента"     , "Количество");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиТоварыРегл(СтруктураПолей, СтруктураПростыхПолей);
	
	РезультатЗапросаПоТоварам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Товары", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу товаров для проведения.
	ТаблицаПоТоварам = ПодготовитьТаблицуТоваров(РезультатЗапросаПоТоварам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"        , "Номенклатура");
	СтруктураПолей.Вставить("Содержание"          , "Содержание");
	СтруктураПолей.Вставить("Услуга"              , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"               , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"            , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа", "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"          , "Количество");
	СтруктураПолей.Вставить("Сумма"               , "Сумма");
	СтруктураПолей.Вставить("ПроцентСкидкиНаценки", "ПроцентСкидкиНаценки");
	СтруктураПолей.Вставить("СтавкаНДС"           , "СтавкаНДС");
	СтруктураПолей.Вставить("НДС"                 , "СуммаНДС");
	СтруктураПолей.Вставить("НомерСтроки"         , "НомерСтроки");
	СтруктураПолей.Вставить("ЗаказПокупателя"     , "ЗаказПокупателя");
	СтруктураПолей.Вставить("ПроцентАвтоматическихСкидок"        , "ПроцентАвтоматическихСкидок");
	СтруктураПолей.Вставить("УсловиеАвтоматическойСкидки"        , "УсловиеАвтоматическойСкидки");
	СтруктураПолей.Вставить("ЗначениеУсловияАвтоматическойСкидки", "ЗначениеУсловияАвтоматическойСкидки");
	
	Если СтруктураШапкиДокумента.ВедениеУчетаПоПроектам И НЕ ЗначениеЗаполнено(Проект) Тогда
		СтруктураСложныхПолей=Новый Структура;
		СтруктураСложныхПолей.Вставить("Проект", "ПроектыНоменклатуры.Проект");
	Иначе
		СтруктураСложныхПолей=Неопределено;	
	КонецЕсли;
	
//<
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиУслугиРегл(СтруктураПолей, СтруктураПростыхПолей);
//>
	
	РезультатЗапросаПоУслугам = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "Услуги", СтруктураПолей, СтруктураПростыхПолей, СтруктураСложныхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоУслугам = ПодготовитьТаблицуУслуг(РезультатЗапросаПоУслугам, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
	// Получим необходимые данные для проведения и проверки заполенения данные 
	// по табличной части "Возвратная тара".
	СтруктураПолей = Новый Структура();
 	СтруктураПростыхПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура"              , "Номенклатура");
	СтруктураПолей.Вставить("Услуга"                    , "Номенклатура.Услуга");
	СтруктураПолей.Вставить("Набор"                     , "Номенклатура.Набор");
	СтруктураПолей.Вставить("Комплект"                  , "Номенклатура.Комплект");
	СтруктураПолей.Вставить("НоменклатурнаяГруппа"		, "Номенклатура.НоменклатурнаяГруппа");
	СтруктураПолей.Вставить("Количество"                , "Количество");
	СтруктураПолей.Вставить("ЕдиницаИзмерения"          , "Номенклатура.ЕдиницаХраненияОстатков");
	СтруктураПолей.Вставить("Сумма"                     , "Сумма");
	СтруктураПолей.Вставить("Склад"                     , "Склад");
	СтруктураПолей.Вставить("ВидСклада"                 , "Склад.ВидСклада");
	СтруктураПолей.Вставить("НомерСтроки"               , "НомерСтроки");
	СтруктураПолей.Вставить("ВестиУчетПоХарактеристикам", "Номенклатура.ВестиУчетПоХарактеристикам");
	СтруктураПолей.Вставить("ЗаказПокупателя"           , "ЗаказПокупателя");
	
	// Дополним полями, нужными для регл. и упр. учета
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараУпр(СтруктураПолей);
	ДополнитьСтруктуруПолейТабличнойЧастиВозвратнаяТараРегл(СтруктураПолей, СтруктураПростыхПолей);
	
	РезультатЗапросаПоТаре = УправлениеЗапасами.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ВозвратнаяТара", СтруктураПолей, СтруктураПростыхПолей);
	
	// Подготовим таблицу тары для проведения.
	ТаблицаПоТаре = ПодготовитьТаблицуТары(РезультатЗапросаПоТаре, СтруктураШапкиДокумента, ПогрешностиОкругления);
	
КонецПроцедуры // СформироватьТаблицыДокумента()

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре;
	Перем ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам;
//	Дата1=ТекущаяДата();
	
	//Путь к файлам исходящей почты
	ОтборНастройки = Новый Структура;
	ОтборНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	ОтборНастройки.Вставить("Настройка"	 , ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("Путь к файлам исходящей почты"));
	ДанныеНастроекПути = РегистрыСведений.НастройкиПользователей.Получить(ОтборНастройки);
	ПутьКФайлам=ДанныеНастроекПути.Значение;
	
	//*** AL (только для перепроведения 22-03-12)
	Если СокрЛП(ПутьКфайлам)<>"" и ЭтотОбъект.Контрагент.ОтправлятьНакладныеПоПочте=Истина тогда
		ОтправкаПочты();
	КонецЕсли;
	
	Если СокрЛП(ПутьКфайлам)<>"" и ЭтотОбъект.Контрагент.ОтправлятьНакладныеПоПочте=Истина
		И ( СокрЛП(ЭтотОбъект.Контрагент.Код)="000001596" ИЛИ СокрЛП(ЭтотОбъект.Контрагент.Код)="000003076")   тогда
		//ЭтотОбъект.ВидАдреса.Наименование
		Если ЗначениеЗаполнено(ЭтотОбъект.ВидАдреса) тогда
			УправлениеРаботойСоСтикером.ПослатьПаспораПоддоновВасилевскому(ЭтотОбъект);
		Иначе
			//*** 160314
			//Предупреждение("У данной накладной не заполнен адрес доставки!"+Символы.ПС+
			//"Паспорт поддона и накладные не могут быть отправлены электронным путем !!!",600,"Внимание!");
			Сообщить("У данной накладной не заполнен адрес доставки! Паспорт поддона и накладные не могут быть отправлены электронным путем !!!");
		КонецЕсли;
	КонецЕсли;
	

	ИзменитьВремяРеализации();
	ЭтапОтгрузки=Перечисления.ЭтапыОтгрузки.Проведено;	
	Если мУдалятьДвижения Тогда
		ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	КонецЕсли;
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, РежимПроведения);
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Проверим правильность заполнения шапки документа
	ПроверитьЗаполнениеШапки(СтруктураШапкиДокумента, Отказ, Заголовок);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Проверим допустимость для пользователя цен документа
	УправлениеПользователями.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Товары", Отказ);
	//УправлениеПользователями.ПроверитьДопустимостьЦенОтпуска(ЭтотОбъект, "Услуги", Отказ);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоТаре);
	ПроводитьПоВзаиморасчетам = СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	мСтруктураПараметровВзаиморасчетов.Вставить("ПроводитьПоВзаиморасчетам", ПроводитьПоВзаиморасчетам);
	СтруктураПодготовленныхТаблиц = Новый Структура("Товары, Услуги", ТаблицаПоТоварам, ТаблицаПоУслугам);
	мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураПодготовленныхТаблиц", СтруктураПодготовленныхТаблиц);
	УправлениеВзаиморасчетами.ПодготовитьТаблицыДляПроведенияПоВзаиморасчетам(ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, 
	                                                ЭтотОбъект, мСтруктураПараметровВзаиморасчетов, СтруктураШапкиДокумента, 
													Отказ, Заголовок);
	// Проверить заполнение ТЧ .
	ПроверитьЗаполнениеТабличнойЧастиТовары(ТаблицаПоТоварам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	//***///*** ПроверитьЗаполнениеТабличнойЧастиУслуги(ТаблицаПоУслугам,      СтруктураШапкиДокумента, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТара(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок);
	// Проверить заполнение ТЧ "Состав набора"
	СтруктураПолей = Новый Структура();
	СтруктураПолей.Вставить("Номенклатура");
	СтруктураПолей.Вставить("Цена");
	ОбщегоНазначения.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "СоставНабора", СтруктураПолей, Отказ, Заголовок);
	
	
	//по пробуенм отключить
	//Проверим на возможность проведения в БУ и НУ ***AL ***///***
	//Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете или СтруктураШапкиДокумента.ОтражатьВНалоговомУчете тогда
	//	ОбщегоНазначения.ПроверкаВозможностиПроведенияВ_БУ_НУ(ДоговорКонтрагента, СтруктураШапкиДокумента.ВалютаДокумента,
	//	СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете,СтруктураШапкиДокумента.ОтражатьВНалоговомУчете,
	//	мВалютаРегламентированногоУчета, Ложь,Отказ, Заголовок);
	//КонецЕсли;
	//Сообщить("14 "+Формат(ТекущаяДата()-Дата1,"ДЛФ=T"));
	// Движения по документу
	Если Не Отказ Тогда
		// Подготовим таблицу товаров для проведения.
		ТаблицаПоСкидкам = ПодготовитьТаблицуСкидок(ТаблицаПоТоварам, ТаблицаПоУслугам, СтруктураШапкиДокумента);
		//ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		//ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);
		ДвиженияПоРегистрам(РежимПроведения, СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоСкидкам, ТаблицаПоТаре,
		ТаблицаПоУслугам, ТаблицаПоВзаиморасчетам, ТаблицаПоРасчетам, Отказ, Заголовок);

	КонецЕсли;
//Сообщить("15 "+Формат(ТекущаяДата()-Дата1,"ДЛФ=T"));
Движения.ТоварыПереданные.Очистить();
Для Каждого ТекСтрокаТары Из ВозвратнаяТара Цикл
    Если ТекСтрокаТары.Номенклатура.Код<>"00000000713" 
            И ТекСтрокаТары.Номенклатура.Код<>"00000000740" 
                И ТекСтрокаТары.Номенклатура.Код<>"00000001962" 
                    И ТекСтрокаТары.Номенклатура.Код<>"00000002818"  
                        И ТекСтрокаТары.Номенклатура.Код<>"00000002876" 
                            И ТекСтрокаТары.Номенклатура.Код<>"00000003560" 
								И ТекСтрокаТары.Номенклатура.Код<>"00000011380" тогда
		Движение = Движения.ТоварыПереданные.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период= Дата;
		Движение.Активность=Истина;
		Движение.Номенклатура=ТекСтрокаТары.Номенклатура;
		Движение.ДоговорКонтрагента=ЭтотОбъект.ДоговорКонтрагента;
		Движение.Количество=ТекСтрокаТары.Количество;
		Движение.Контрагент=ЭтотОбъект.Контрагент;
		Движение.Организация=ЭтотОбъект.Организация;
		Движение.Регистратор=ЭтотОбъект.Ссылка;
		Движение.СтатусПередачи=Перечисления.СтатусыПолученияПередачиТоваров.ВозвратнаяТара;
		Движение.СуммаВзаиморасчетов=ТекСтрокаТары.Сумма;
	КонецЕсли;	
КонецЦикла;

Если ЭтотОбъект.Дата >=  Дата("20110601000000") тогда
		////*******************    // регистр ПартииТоваровНаСкладах Управленчемкий учет Расход
	ЗапросСкидок = Новый Запрос;
	ЗапросСкидок.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросСкидок.Текст =
	"ВЫБРАТЬ
		 |	РеализацияТоваровУслугТовары.Номенклатура,
		 |	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
		 |	РеализацияТоваровУслугТовары.Количество,
		 |	РеализацияТоваровУслугТовары.Цена,
		 |	РеализацияТоваровУслугТовары.Сумма,
		 |	РеализацияТоваровУслугТовары.УсловиеАвтоматическойСкидки,
		 |	РеализацияТоваровУслугТовары.ПроцентСкидкиНаВес,
		 |	РеализацияТоваровУслугТовары.СкидкаНаВес,
		 |	Регистр.НомерСтроки КАК ном,
		 |	Регистр.Регистратор,
		 |	Регистр.Количество КАК КоличествоВПартии,
		 |	Регистр.Стоимость КАК СтоимостьВПартии
		 |ИЗ
		 |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Регистр
		 |		ПО РеализацияТоваровУслугТовары.Ссылка = Регистр.Регистратор
		 |			И РеализацияТоваровУслугТовары.Номенклатура = Регистр.Номенклатура
		 |			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = Регистр.ХарактеристикаНоменклатуры
		 |ГДЕ
		 |	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
		 |	И (РеализацияТоваровУслугТовары.ПроцентСкидкиНаВес <> 0
		 |			ИЛИ РеализацияТоваровУслугТовары.СкидкаНаВес <> 0)";
	Результат = ЗапросСкидок.Выполнить().Выбрать();
	//Сообщить("18 "+Формат(ТекущаяДата()-Дата1,"ДЛФ=T"));
	//Сообщить("ПродажиСебестоимость "+Результат.Количество());	
	Если Результат.Количество()>0 тогда
		НаборЗаписейРегистра = Движения.ПродажиСебестоимость;
		НаборЗаписейРегистра.ЭтотОбъект.Прочитать();
		Пока Результат.Следующий() Цикл
			НомерЗаписи=Результат.ном;
			Цена=Результат.СтоимостьВПартии/Результат.КоличествоВПартии;
			ЭтаЗапись = НаборЗаписейРегистра[НомерЗаписи-1];
			ЭтаЗапись.Количество=Результат.Количество+Результат.СкидкаНаВес;
			ЭтаЗапись.Стоимость=(Результат.Количество+Результат.СкидкаНаВес)*Цена;
		КонецЦикла;
		НаборЗаписейРегистра.Записать(Истина);
	КонецЕсли;
   //Сообщить("19 "+Формат(ТекущаяДата()-Дата1,"ДЛФ=T"));
//********************		//// регистр ТоварыНаСкладах Расход

	ЗапросСкидок = Новый Запрос;
	ЗапросСкидок.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	ЗапросСкидок.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.УсловиеАвтоматическойСкидки,
	|	РеализацияТоваровУслугТовары.ПроцентСкидкиНаВес,
	|	РеализацияТоваровУслугТовары.СкидкаНаВес,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК ном,
	|	1 КАК ВидТЧ,
	|	РеализацияТоваровУслугТовары.ВесУпаковки КАК ВесУпаковки,
	|	РеализацияТоваровУслугТовары.Порции
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ТекущийДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	РеализацияТоваровУслугВозвратнаяТара.Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	РеализацияТоваровУслугВозвратнаяТара.Сумма,
	|	NULL,
	|	0,
	|	0,
	|	РеализацияТоваровУслугВозвратнаяТара.НомерСтроки,
	|	2,
	|	0,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &ТекущийДокумент";
	
	Результат = ЗапросСкидок.Выполнить().Выбрать();
	Если Результат.Количество()>0 тогда
		НаборЗаписейРегистра = Движения.ТоварыНаСкладах;
		
		Если НаборЗаписейРегистра.Количество()>0 тогда
			НаборЗаписейРегистра.ЭтотОбъект.Прочитать();
			Пока Результат.Следующий() Цикл
				ЭтаЗапись = НаборЗаписейРегистра.ЭтотОбъект.Добавить();
				ЭтаЗапись.Активность=Истина;
				ЭтаЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
				ЭтаЗапись.Качество=Справочники.Качество.Новый;
				//+++ 20151223 отменено Я.Е. 
				//Отбор = Новый Структура();
				//Отбор.Вставить("Номенклатура",Результат.Номенклатура);
				//Отбор.Вставить("ХарактеристикаНоменклатуры",Результат.ХарактеристикаНоменклатуры);
				//Отбор.Вставить("Порции",Результат.Порции);
				//Строки = СП_ТЗ.НайтиСтроки(Отбор);
				//Если Строки.Количество() > 0 И Результат.ВесУпаковки>0 Тогда
					ЭтаЗапись.Количество=Результат.СкидкаНаВес+Результат.Количество+Результат.ВесУпаковки;
				//Иначе
				//	ЭтаЗапись.Количество=Результат.СкидкаНаВес+Результат.Количество;
				//КонецЕсли;
				//--- 20151223 отменено Я.Е. 
				ЭтаЗапись.Номенклатура=Результат.Номенклатура;
				ЭтаЗапись.Период=ЭтотОбъект.Дата;
				ЭтаЗапись.Регистратор=ЭтотОбъект.Ссылка;
				ЭтаЗапись.Склад=ЭтотОбъект.Склад;
				ЭтаЗапись.ХарактеристикаНоменклатуры=Результат.ХарактеристикаНоменклатуры;
			КонецЦикла;
		КонецЕсли;
		НаборЗаписейРегистра.Записать(Истина);
		//***///***
		Результат.Сбросить();
		Если Результат.Количество()>0 тогда
			НаборЗаписейРегистра = Движения.ТоварыОрганизаций;
			Если НаборЗаписейРегистра.Количество()>0 тогда
				НаборЗаписейРегистра.ЭтотОбъект.Прочитать();
				Пока Результат.Следующий() Цикл
					Если Результат.ВидТЧ=1 тогда
						ЭтаЗапись = НаборЗаписейРегистра.ЭтотОбъект.Добавить();
						ЭтаЗапись.Активность=Истина;
						ЭтаЗапись.ВидДвижения=ВидДвиженияНакопления.Расход;
						ЭтаЗапись.Качество=Справочники.Качество.Новый;
						//ЭтаЗапись.Количество=Результат.Количество+Результат.СкидкаНаВес;
						Отбор = Новый Структура();
						Отбор.Вставить("Номенклатура",Результат.Номенклатура);
						Отбор.Вставить("ХарактеристикаНоменклатуры",Результат.ХарактеристикаНоменклатуры);
						Отбор.Вставить("Порции",Результат.Порции);
						Строки = СП_ТЗ.НайтиСтроки(Отбор);
						Если Строки.Количество() > 0 И Результат.ВесУпаковки>0 Тогда
							ЭтаЗапись.Количество=Результат.СкидкаНаВес+Результат.Количество+Результат.ВесУпаковки;
						Иначе
							ЭтаЗапись.Количество=Результат.СкидкаНаВес+Результат.Количество;
						КонецЕсли;
						ЭтаЗапись.Номенклатура=Результат.Номенклатура;
						ЭтаЗапись.ХарактеристикаНоменклатуры=Результат.ХарактеристикаНоменклатуры;
						ЭтаЗапись.Организация=Справочники.Организации.НайтиПоКоду("000000001");
						ЭтаЗапись.Период=ЭтотОбъект.Дата;
						ЭтаЗапись.Регистратор=ЭтотОбъект.Ссылка;
						ЭтаЗапись.Склад=ЭтотОбъект.Склад;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			НаборЗаписейРегистра.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
КонецЕсли; 


КонецПроцедуры // ОбработкаПроведения()

Процедура ПриКопировании(ОбъектКопирования)
	
	ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделение");
	
	Если ЗначениеЗаполнено(ОсновноеПодразделение) Тогда
		Подразделение = ОсновноеПодразделение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаБУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ, МетаданныеДокумента) Экспорт
	
	Если ЗаполнятьБУ = Истина Тогда
		
		СтрокаТЧ.СчетУчетаНДС = СчетаУчета.СчетНДСРеализации;
		
		
	ИначеЕсли ЗаполнятьБУ = Ложь Тогда
		
		СтрокаТЧ.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаБУВСтрокеУслуг

Процедура ЗаполнитьСчетаНУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ, МетаданныеДокумента)
	
	Если ЗаполнятьНУ  = Истина Тогда
		
		СтрокаТЧ.ВидНалоговойДеятельности = СчетаУчета.ВидНалоговойДеятельности;
		СтрокаТЧ.СхемаРеализации = СчетаУчета.СхемаРеализации;
		
	ИначеЕсли ЗаполнятьНУ = Ложь Тогда
		
		СтрокаТЧ.ВидНалоговойДеятельности = Справочники.ВидыНалоговойДеятельности.ПустаяСсылка();
		СтрокаТЧ.СхемаРеализации = Справочники.СхемыРеализации.ПустаяСсылка();

	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаНУВСтрокеУслуг()

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	СчетаУчета     = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Организация, СтрокаТЧ.Номенклатура);
	МетаданныеДока = Метаданные();
	
	ЗаполнитьСчетаБУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьБУ, МетаданныеДока);
	ЗаполнитьСчетаНУВСтрокеУслуг(СтрокаТЧ, СчетаУчета, ЗаполнятьНУ, МетаданныеДока);
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги()

Процедура ЗаполнитьСчетаУчетаВТабЧастиУслуги(ЗаполнятьБУ, ЗаполнятьНУ) Экспорт
	
	Для каждого СтрокаТЧ Из Услуги Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиУслуги(СтрокаТЧ, ЗаполнятьБУ, ЗаполнятьНУ)
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧастиУслуги()

// Выполняет проверки,которые нужны только для регл. учета
// 
Процедура ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТараРегл(ТаблицаПоТаре, СтруктураШапкиДокумента, Отказ, Заголовок)
	
	Если СтруктураШапкиДокумента.ОтражатьВБухгалтерскомУчете Тогда
		
		Для каждого СтрокаТЧ Из ТаблицаПоТаре Цикл
			
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТЧ.НомерСтроки) + """ табличной части ""Тара"": ";
			
			Если СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) Тогда
					
					СтрокаСообщения = "Не заполнен ""Счет у чета (БУ)""!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
				
			Иначе
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаБУ) Тогда
					
					СтрокаСообщения = "Не заполнено значение обоих счетов учета номенклатуры!";
					ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					
				КонецЕсли;
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И Не СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
						СтрокаСообщения = "Не заполнено значение реквизита ""Счет учета (НУ)""!";
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.СчетУчетаБУ.Забалансовый Тогда
				
				Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
					
					Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
						СтрокаСообщения = "Заполнено значение реквизита ""Счет учета (НУ)""!";
						ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиВозвратнаяТараРегл()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	
	ОбщегоНазначения.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ);
	
КонецПроцедуры // ОбработкаУдаленияПроведения

Процедура ОтправкаПочты() Экспорт
	Получатель="";
	Если ЭтотОбъект.Контрагент.ОтправлятьНакладныеПоПочте=Ложь тогда
		возврат;
	КонецЕсли;
	
	Пользователь=глЗначениеПеременной("глТекущийПользователь");	
	ОтборПараметра = Новый Структура;
	ОтборПараметра.Вставить("Пользователь", Пользователь);
	ОтборПараметра.Вставить("Настройка",ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("Учетная запись электронной почты исходящей"));
	ДанныеНастроек = РегистрыСведений.НастройкиПользователей.Получить(ОтборПараметра);
	МойMail=ДанныеНастроек.Значение;
	Если	СокрЛП(МойMail.Логин)="" тогда
		Сообщить("У пользователя не настроен почтовый ящик!");
		возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	Запрос.УстановитьПараметр("Код", "000000013");
	Запрос.Текст =" ВЫБРАТЬ
	| КонтактнаяИнформация.Объект,
	| КонтактнаяИнформация.Тип,
	| КонтактнаяИнформация.Вид,
	| КонтактнаяИнформация.Представление
	| ИЗ
	| РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	| ГДЕ
	| 	КонтактнаяИнформация.Объект = &Объект 	И
	|  	КонтактнаяИнформация.Вид.Код = &Код";
	
	АдресМайл = Запрос.Выполнить().Выбрать();
	Если АдресМайл.Количество()>0 тогда
		АдресМайл.Следующий();
		Получатель=АдресМайл.Представление;
	КонецЕсли;
	Если СокрЛП(Получатель)="" тогда
		//Предупреждение("У контрагента нет адреса e-mail, отправка писем не возможна!");
		Сообщить("У контрагента нет адреса e-mail, отправка писем не возможна!");
		возврат;
	КонецЕсли;
	
	//Сообщить(МойMail);
	
	ИПП=Новый ИнтернетПочтовыйПрофиль;
    ИПП.АдресСервераSMTP=МойMail.SMTPСервер;
    ИПП.ПортSMTP=МойMail.ПортSMTP;
    ИПП.ПользовательSMTP=МойMail.Логин;
    ИПП.ПарольSMTP=МойMail.Пароль;
    ИПП.АутентификацияSMTP=СпособSMTPАутентификации.ПоУмолчанию;
	
	Письмо=Новый ИнтернетПочтовоеСообщение;
    Письмо.Отправитель=МойMail.АдресЭлектроннойПочты;
	Письмо.Получатели.Добавить(Получатель);     //*** только для коноваленко
		Если СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000001596" И  СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000003076" тогда
			Письмо.Тема="@@##$$" +СокрЛП(ЭтотОбъект.Контрагент.Код)+" "+СокрЛП(ЭтотОбъект.Номер)+Формат(ЭтотОбъект.Дата,"ДФ=yyyymmdd") ;
		Иначе 
			НомерАдреса="";
			НомерАдреса=ПРАВ(СокрЛП(ЭтотОбъект.ВидАдреса.Наименование),1);
			Письмо.Тема="@@##$$" +СокрЛП(ЭтотОбъект.Контрагент.Код)+" "+СокрЛП(ЭтотОбъект.Номер)+Формат(ЭтотОбъект.Дата,"ДФ=yyyymmdd")+НомерАдреса;
		КонецЕсли;		
		//ТекстПисьма=" От Роганский мясокомбинат!" +Символы.ВК+Символы.ПС;
		ТекстПисьма=" ";
		ТекстПисьма=ТекстПисьма+ " Накладная № "+ЭтотОбъект.Номер+" от "+ЭтотОбъект.Дата+Символы.ВК+Символы.ПС;
		
		ТекстПисьма=ТекстПисьма+ " Покупатель " +ЭтотОбъект.Контрагент+ "("+ЭтотОбъект.Контрагент.Код+"),  на сумму "+ ЭтотОбъект.СуммаДокумента +" грн."+Символы.ВК+Символы.ПС ;
		ТекстПисьма=ТекстПисьма+ " Код        Номенклатура          Упаковка   Порции          Количество      Сумма"+Символы.ВК+Символы.ПС ;
		ТаблицаТоваров=ЭтотОбъект.Товары;
		Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
			
			
		ТекстПисьма=ТекстПисьма+ "| "+СокрЛП(ТекущаяСтрока.Номенклатура.Код)+" | "+
				   Лев(ТекущаяСтрока.Номенклатура.НаименованиеПолное,60)+" | "+
				   Лев(ТекущаяСтрока.ХарактеристикаНоменклатуры,8)+" | "+
				   Лев(СокрЛП(ТекущаяСтрока.Порции),15)+" | "+
				   Формат(ТекущаяСтрока.Количество,"ЧЦ=12; ЧДЦ=3") +" | "+
				   Формат(ТекущаяСтрока.Сумма,"ЧЦ=12; ЧДЦ=2") + " | "+Символы.ВК+Символы.ПС;
		КонецЦикла; 
		ТекстПисьма=ТекстПисьма+ " Код товара для клиентов Kod_tu "  +Символы.ВК+Символы.ПС;
		ТекстПисьма=ТекстПисьма+ " 1 символ - порции: 0-Нет,1-0,250, 2-1/2 батона, 3-целым куском"  +Символы.ВК+Символы.ПС;	   
		ТекстПисьма=ТекстПисьма+ " 2 символ - упаковки: 0-Нет,1-Вакуум, 2-Газ, 3-Нарезка,4-Ж/У (жесткая упаковка)"  +Символы.ВК+Символы.ПС;	   
		ТекстПисьма=ТекстПисьма+ " 3 символ - 13 символ код товара всего 11 символов"  +Символы.ВК+Символы.ПС;	   
		Письмо.Тексты.Добавить(ТекстПисьма);		
		
		
	//ИмяФайлаБД=СокрЛП(ЭтотОбъект.Контрагент.Код)+"_"+Формат(ЭтотОбъект.Дата,"ДФ=yyyyMMdd")+"_"+СокрЛП(ЭтотОбъект.Номер)+"_"+Формат(ТекущаяДата(),"ДФ=hhmmss")+".dbf";
	ИмяФайлаБД=Прав(СокрЛП(ЭтотОбъект.Контрагент.Код),8)+".dbf";
	
	//Создание файла экспорта
	ОтборПараметра = Новый Структура;
	ОтборПараметра.Вставить("Пользователь", Пользователь);
	ОтборПараметра.Вставить("Настройка"	 , ПланыВидовХарактеристик.НастройкиПользователей.НайтиПоНаименованию("Путь к файлам исходящей почты"));
	ДанныеНастроек = РегистрыСведений.НастройкиПользователей.Получить(ОтборПараметра);
	Путь=ДанныеНастроек.Значение;
	
	МойФайл=СокрЛП(Путь) +"\"+ ИмяФайлаБД;                              //***коноваленко                                                                    //осокин
	Если СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000000753" 
			И СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000001596"  
				И СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000001282" 
					И СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000003076" 
						И СокрЛП(ЭтотОбъект.Контрагент.Код)<>"000003084" 
				тогда
		ФайлПередачи(МойФайл);
		Если ЭтотОбъект.Модифицированность() тогда
			ЭтотОбъект.ПочтовоеСообщение=СокрЛП(Путь) + ИмяФайлаБД+" "+ТекущаяДата();
			ЭтотОбъект.Записать();
		Иначе
			ЭтотОбъект.ПочтовоеСообщение=СокрЛП(Путь) + ИмяФайлаБД+" "+ТекущаяДата();
			ЭтотОбъект.Записать();
		КонецЕсли;	
	Иначе
		МойФайл=СокрЛП(Путь) +Прав(СокрЛП(ЭтотОбъект.Номер),8)+".xls";
		ФайлПередачиВасилевский(МойФайл,СокрЛП(ЭтотОбъект.Номер));
		Если ЭтотОбъект.Модифицированность() тогда
			ЭтотОбъект.ПочтовоеСообщение=МойФайл+" "+ТекущаяДата();
			ЭтотОбъект.Записать();
		Иначе
			ЭтотОбъект.ПочтовоеСообщение=МойФайл+" "+ТекущаяДата();
			ЭтотОбъект.Записать();
		КонецЕсли;	
		
	КонецЕсли;

	
	Письмо.Вложения.Добавить(МойФайл);
	Почта=Новый ИнтернетПочта;
	Почта.Подключиться(ИПП);
	Почта.Послать(Письмо);
	Почта.Отключиться();
КонецПроцедуры

Процедура ФайлПередачи(МойФайл) Экспорт
	
	//ТС = ЭлементыФормы.Список.ТекущаяСтрока;
	//ЭтотОбъект = ТС.Ссылка.ПолучитьОбъект();
	
	ФайлНаДиске = Новый Файл(МойФайл);
	Если ФайлНаДиске.Существует() тогда
		Попытка
			УдалитьФайлы(МойФайл);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли;
	
	БД = Новый XBase;
	БД.Поля.Добавить("Kod_KLi"  , "S", 11);
	БД.Поля.Добавить("Name_Kli"  , "S", 100);
	БД.Поля.Добавить("Address"   , "S", 100);
	БД.Поля.Добавить("Data" , "D");
	БД.Поля.Добавить("Number"  , "S", 11);
	БД.Поля.Добавить("Kod_tovar" , "S", 11);
	БД.Поля.Добавить("Name_tovar"  , "S", 100);
	БД.Поля.Добавить("Upakovka"  , "S", 15);	
	БД.Поля.Добавить("Porcia"  , "S", 20);		
	БД.Поля.Добавить("Kol", "N", 10,3);
	БД.Поля.Добавить("SUMMA", "N", 10,2);
	БД.Поля.Добавить("Kod_tu" , "S", 13);
	
	//XBase.Кодировка(XBaseEncoding.OEM);
	БД.Кодировка = КодировкаXBase.OEM;
	//Сообщить(МойФайл);
	БД.СоздатьФайл(МойФайл);
	
	БД.АвтоСохранение = Истина;
	//КонецСозданияФайла
	
	
	ТаблицаТоваров=ЭтотОбъект.Товары;
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
			БД.Добавить();
			БД.Kod_KLi  	=ЭтотОбъект.Контрагент.Код;
			БД.Name_Kli 	=ЭтотОбъект.Контрагент.Наименование; 
			//БД.Address	    =ЭтотОбъект.АдресДоставки;
			БД.Data 		=ЭтотОбъект.Дата;
			БД.Number  		=ЭтотОбъект.Номер;
			БД.Kod_tovar  	=ТекущаяСтрока.Номенклатура.Код;
			БД.Name_tovar 	=ТекущаяСтрока.Номенклатура.НаименованиеПолное;
			БД.Upakovka		=ТекущаяСтрока.ХарактеристикаНоменклатуры;
			БД.Porcia 		=ТекущаяСтрока.Порции; 
			БД.Kol			=ТекущаяСтрока.Количество;
			БД.SUMMA		=ТекущаяСтрока.Сумма;
			Запрос =  новый Запрос;
			Если СокрЛП(ЭтотОбъект.АдресДоставки) <> "" тогда
				МойАдрес=ЭтотОбъект.АдресДоставки;
				СтруктураАдреса =УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СокрЛП(ЭтотОбъект.АдресДоставки));
				
				МойАдрес=УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) ;
				Запрос.УстановитьПараметр("Адрес",СокрЛП(МойАдрес));			
				Запрос.УстановитьПараметр("Объект",ЭтотОбъект.Контрагент);			
				Запрос.Текст = "
				| ВЫБРАТЬ
				| 		КонтактнаяИнформация.Объект,
				| 		КонтактнаяИнформация.Тип,
				| 		КонтактнаяИнформация.Вид.Наименование КАК Вид ,
				| 		КонтактнаяИнформация.Представление
				| 	ИЗ
				| 		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				| 		ГДЕ
				| 		КонтактнаяИнформация.Представление ПОДОБНО &Адрес  
				|		И  КонтактнаяИнформация.Объект = &Объект ";
				ВыборкаАдресов = Запрос.Выполнить();
				Если  ВыборкаАдресов.Пустой() тогда
					Сообщить("Нет в списке адресов доставки такого адреса! ");
					БД.Address="";
				Иначе
					Адреса=ВыборкаАдресов.Выбрать();
					Адреса.Следующий(); 
					НомерАдреса="";
				 	НомерАдреса1=ПРАВ(СокрЛП(Адреса.Вид),3);
					Для а = 1 По СтрДлина(НомерАдреса1) Цикл
							КодСимвола = КодСимвола(Сред(НомерАдреса1, а, 1));
							Если  (КодСимвола >= 48 И КодСимвола <= 57) Тогда
								//Сообщить(Сред(НомерАдреса1, а, 1));
								НомерАдреса=НомерАдреса+Сред(НомерАдреса1, а, 1);
							КонецЕсли; 
						КонецЦикла; 
					БД.Address=НомерАдреса;
				КонецЕсли;
			КонецЕсли;			
			
			СимволУпаковки="0";
			Если СокрЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)="" тогда
					СимволУпаковки="0";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Вакуум" 	тогда
					СимволУпаковки="1";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Газ" 		тогда
					СимволУпаковки="2";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Нарезка" 	тогда	
					СимволУпаковки="3";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Ж/У" 		тогда						
					СимволУпаковки="4";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Газ 0,5" 	тогда						
					СимволУпаковки="5";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Вакуум 1/2" тогда						
					СимволУпаковки="6";
				ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Вакуум порц."	тогда						
					СимволУпаковки="7";
				Иначе
					СимволУпаковки="0";
			КонецЕсли;
			СимволПорции="0";
			//Если СокрЛП(ТекущаяСтрока.Порции.Наименование)="" тогда
			//		СимволПорции="0";
			//	ИначеЕсли  ТекущаяСтрока.Порции.Код="000000001"   тогда   //0,250
			//		СимволПорции="1";
			//	ИначеЕсли  ТекущаяСтрока.Порции.Код="000000009" 	тогда  //по 1/2 шт.
			//		СимволПорции="2";
			//	ИначеЕсли  ТекущаяСтрока.Порции.Код="000000008" тогда	//целым куском
			//		СимволПорции="3";
			//	Иначе
			//		СимволПорции="0";
			//КонецЕсли;
			КодДляКлиента=СимволПорции+СимволУпаковки+СокрЛП(ТекущаяСтрока.Номенклатура.Код);
			БД.Kod_tu 		=КодДляКлиента; 
	КонецЦикла; 
	БД.ЗакрытьФайл();
КонецПроцедуры

Функция ФайлПередачиВасилевский(МойФайл,Номер)
	//Сообщить("Это Василевский sbyt_svigina@ukr.net");
	Попытка
         Excel_DMS = Новый COMОбъект("Excel.Application");
         Excel_DMS.Application.WorkBooks.Add(1);
         Лист = Excel_DMS.ActiveSheet;
         Лист.Name = СокрЛП(Номер);                 
    Исключение
         Сообщить("Не удалось создать файл Microsoft Excel!!!",СтатусСообщения.ОченьВажное);
         Возврат 0;
	КонецПопытки;          
	ТаблицаТоваров=ЭтотОбъект.Товары;
	НомерСтроки =1;
    Лист.Cells(НомерСтроки,1).Value = "kod_tov";
	Лист.Cells(НомерСтроки,2).Value = "nazvanie";
    Лист.Cells(НомерСтроки,3).Value = "kol";
	Лист.Cells(НомерСтроки,4).Value = "cena";
	Для Каждого ТекущаяСтрока Из ТаблицаТоваров Цикл
//Индикатор.КомментарийОбработкиДанных = "строка  " +НомерСтроки +" "+СокрЛП(ТекущаяСтрока.Номенклатура.Наименование)+" "+СОКРЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)+" "+СОКРЛП(ТекущаяСтрока.Порции.Наименование);                                                                       
    	НомерСтроки = НомерСтроки+1;
		Лист.Cells(НомерСтроки,2).Value =СокрЛП(ТекущаяСтрока.Номенклатура.НаименованиеПолное)+" "+СОКРЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)+" "+СОКРЛП(ТекущаяСтрока.Порции.Наименование) ;
    	Лист.Cells(НомерСтроки,3).Value = ТекущаяСтрока.Количество;
    	Лист.Cells(НомерСтроки,4).Value = ?(ТекущаяСтрока.Количество>0,ТекущаяСтрока.Сумма/ТекущаяСтрока.Количество,0);
		//СимволУпаковки="0";
		//Если СокрЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование)="" тогда
		//	СимволУпаковки="0";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Вакуум" 	тогда
		//	СимволУпаковки="1";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Газ" 		тогда
		//	СимволУпаковки="2";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Нарезка" 	тогда	
		//	СимволУпаковки="3";
		//ИначеЕсли  ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование="Ж/У" 		тогда						
		//	СимволУпаковки="4";
		//Иначе
		//	СимволУпаковки="0";
		//КонецЕсли;
		//СимволПорции="0";
		//Если СокрЛП(ТекущаяСтрока.Порции.Наименование)="" тогда
		//	СимволПорции="0";
		//ИначеЕсли  ТекущаяСтрока.Порции.Код="000000001"   тогда   //0,250
		//	СимволПорции="1";
		//ИначеЕсли  ТекущаяСтрока.Порции.Код="000000009" 	тогда  //по 1/2 шт.
		//	СимволПорции="2";
		//ИначеЕсли  ТекущаяСтрока.Порции.Код="000000008" тогда	//целым куском
		//	СимволПорции="3";
		//Иначе
		//	СимволПорции="0";
		//КонецЕсли;
		//КодДляКлиента=СимволПорции+СимволУпаковки+СокрЛП(ТекущаяСтрока.Номенклатура.Код);
		
		Лист.Cells(НомерСтроки,1).Value =УправлениеРаботойСоСтикером.ПолучитьКодТовараУпаковкиПорции(СокрЛП(ТекущаяСтрока.Номенклатура.Код),
							СокрЛП(ТекущаяСтрока.ХарактеристикаНоменклатуры.Наименование),
						СокрЛП(ТекущаяСтрока.Порции.Код));
	КонецЦикла; 
	
	ФайлНаДиске = Новый Файл(МойФайл);
	Если ФайлНаДиске.Существует() тогда
		Попытка
			УдалитьФайлы(МойФайл);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецЕсли;
	//Сообщить(МойФайл);
	//Excel_DMS.ActiveWorkBook.Save(МойФайл);    //КаталогЭкспорта+"\Прайс для сайта "+СтрЗаменить(СтрЗаменить(ТекущаяДата(),".","_"),":", "_")+".xls"
	Excel_DMS.ActiveWorkbook.SaveAs(МойФайл,-4143);
	//Excel_DMS.Workbooks.Close(); 
	Сообщить("Файл для почты, выгружен в каталог "+МойФайл);
	Excel_DMS.Quit();
	Возврат 0;
КонецФункции

// Функция формирует табличный документ с печатной формой ТранспортнаяНакладная на отгрузку,
Функция ПечатьТН () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|   Порции КАК Порции
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		МИНИМУМ(НомерСтроки) КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|       Порции КАК Порции,
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|    	Порции
	|	) КАК ВложенныйЗапросПоТоварам	";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТН";
	ПараметрыПечати(ТабДокумент);
	Макет = ПолучитьМакет("ТранспортнаяНакладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДата="№  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.АдресПоставщика="м.Харкiв, вул. Роганська, 151.";
	ОбластьМакета.Параметры.ОКПОПоставщика="34389679";
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	ОбластьМакета.Параметры.ТелефонПоставщика="(057) 766-88-78";
	
	
	ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ОбластьМакета.Параметры.ЗаказПокупателя		= ЭтотОбъект.Сделка;
	ОбластьМакета.Параметры.АдресаДоставки		= ЭтотОбъект.АдресДоставки;
	ОбластьМакета.Параметры.ОКПОПокупателя		= ЭтотОбъект.Контрагент.КодПоЕДРПОУ;
	
	ЗапросИнфо = Новый Запрос;
	ЗапросИнфо.УстановитьПараметр("Объект", ЭтотОбъект.Контрагент);
	ЗапросИнфо.УстановитьПараметр("Вид","Юридический адрес контрагента" );
	ЗапросИнфо.УстановитьПараметр("Вид1","Телефон контрагента");
	
	ЗапросИнфо.Текст =	"	ВЫБРАТЬ
	| КонтактнаяИнформация.Объект,
	| КонтактнаяИнформация.Тип,
	| КонтактнаяИнформация.Вид,
	| КонтактнаяИнформация.Представление КАК Представление
	| ИЗ
	| РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	| ГДЕ
	| КонтактнаяИнформация.Объект = &Объект
	| И (КонтактнаяИнформация.Вид.Наименование = &Вид
	| 			ИЛИ КонтактнаяИнформация.Вид.Наименование = &Вид1)
	| УПОРЯДОЧИТЬ ПО 
	| КонтактнаяИнформация.Тип.Порядок";
	
	
	Если не ЗапросИнфо.Выполнить().Пустой() тогда
		ЗапросИнфо= ЗапросИнфо.Выполнить().Выгрузить();
		СтрокаИнфо=1;
		Для каждого ВыборкаСтрокИнфо из ЗапросИнфо Цикл 
			Если СтрокаИнфо=1 тогда
				ОбластьМакета.Параметры.АдресПокупателя		= ВыборкаСтрокИнфо.Представление;
			Иначе
				ОбластьМакета.Параметры.ТелефонПокупателя	= ВыборкаСтрокИнфо.Представление;
			КонецЕсли;
			СтрокаИнфо=СтрокаИнфо+1;
	    КонецЦикла;
	КонецЕсли;
	ОбластьМакета.Параметры.ЗаказПокупателя=Шапка.Комментарий;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ОбластьДанных = Макет.ПолучитьОбласть("Строка");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьДанных.Параметры.НомерСтроки 	= ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		
		СтрокаУпаковки=СокрЛП(ВыборкаСтрокТовары.Характеристика)+" "+СокрЛП(ВыборкаСтрокТовары.Порции);
		
		
		ОбластьДанных.Параметры.Товар 			= СокрП(ВыборкаСтрокТовары.Товар)+?(СтрДлина(СокрЛП(СтрокаУпаковки))=0," ",  " ("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+", "+СокрЛП(ВыборкаСтрокТовары.Порции)+")");
		
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.ЕдиницаИзмерения ;
		
		ЗапросШК = Новый Запрос;
		ЗапросШК.УстановитьПараметр("Контрагент", ЭтотОбъект.Контрагент);
		ЗапросШК.УстановитьПараметр("Владелец",ВыборкаСтрокТовары.Номенклатура);
		ЗапросШК.УстановитьПараметр("Упаковка",ВыборкаСтрокТовары.Характеристика.Наименование);
	
		ЗапросШК.Текст =	"
		|	ВЫБРАТЬ ШтрихкодыВесов.Штрихкод,
		|	ШтрихкодыВесов.Контрагент,
		|	ШтрихкодыВесов.Владелец,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры
		| ИЗ
		|	РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
		| ГДЕ
		|	ШтрихкодыВесов.Владелец = &Владелец
		|	И ШтрихкодыВесов.Контрагент = &Контрагент";
		
				//|	И ШтрихкодыВесов.ХарактеристикаНоменклатуры.Наименование = &Упаковка
	
		//Сообщить(ЗапросШК.Выполнить().Пустой() );
		Результат=ЗапросШК.Выполнить().Выбрать();
		Если ЗапросШК.Выполнить().Пустой() тогда
			ОбластьДанных.Параметры.Артикул 		= "  ";
		Иначе
			Результат.Следующий();
			ОбластьДанных.Параметры.Артикул=Результат.Штрихкод;
		КонецЕсли;
		//ВыборкаСтрокТовары.Артикул;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ТабДокумент.Вывести(ОбластьДанных);
		//ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
        ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);
        
	КонецЦикла;
 
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	
	ОбластьМакета.Параметры.ВсегоКол=ВсегоКоличество; 
	//ОбластьМакета.Параметры.ПредставлениеНАкладной = "Накладна №  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьДекларации()

Процедура ПередУдалением(Отказ)
	//***AL17.11.2011 9:50:18 запрещаю удалять  при наличии контрольного взвешивания 
	Если  (РольДоступна("ОтгрузкаЭкспедиции") ИЛИ РольДоступна("СбытРМК")
		или РольДоступна("Филиал") или РольДоступна("ФилиалРуководитель"))
		И ЭтотОбъект.СсылкаКонтрольногоВзвешивания<>Документы.КонтрольноеВзвешивание.ПустаяСсылка()  Тогда
		ЗаписьЖурналаРегистрации("Безопасность.ЗапретУдаления", 
		  		УровеньЖурналаРегистрации.Предупреждение, , ,
					"Попытка удалить реализацию с контрольным взвешиванием. Пользователь " + глЗначениеПеременной("глТекущийПользователь"));
		Отказ=Истина;
	  	Возврат;
	КонецЕсли;
	ЭтапОтгрузки=Перечисления.ЭтапыОтгрузки.Заявка;		
КонецПроцедуры

Процедура ИзменитьВремяРеализации()
//Изменить время проведения документа
ДатаСтараяДокумента =	ЭтотОбъект.Дата;
ДатаНоваяДокумента	= 	ЭтотОбъект.Дата;
//Сообщить("ДатаСтараяДокумента "+ДатаСтараяДокумента);
ДатаНоваяТекущая=ТекущаяДата();
ТекущееНовоеВремя=Формат(ТекущаяДата(),"ДЛФ=В");
//Сообщить("ТекущееНовоеВремя "+ТекущееНовоеВремя);
Если ДатаСтараяДокумента<>Дата(1, 1, 1)  И ДатаСтараяДокумента<>NULL И СокрЛП(ДатаСтараяДокумента)<>"" Тогда
	ДатаНоваяДокумента=Дата(Формат(Дата(ДатаСтараяДокумента),"ДФ=dd.MM.yyyy")+" "+Строка(ТекущееНовоеВремя));         
	Сообщить("ДатаНоваяДокумента "+ДатаНоваяДокумента);
Иначе 
	возврат;
КонецЕсли;
	
Если ЭтотОбъект.Заблокирован() тогда
		ЭтотОбъект.Разблокировать();
		 Если ЭтотОбъект.Модифицированность() тогда
			 ЭтотОбъект.Дата=ДатаНоваяДокумента;
 			 //***///***
			 Если ЭтотОбъект.ОтражатьВБухгалтерскомУчете=Истина И ЭтотОбъект.СтатьяВаловыхДоходов=Справочники.СтатьиНалоговыхДеклараций.ПустаяСсылка() тогда
				ЭтотОбъект.СтатьяВаловыхДоходов=Справочники.СтатьиНалоговыхДеклараций.НайтиПоКоду("00278"); 
			 КонецЕсли;
			 Попытка
				ЭтотОбъект.Записать();
			Исключение
    			//***160314 Предупреждение("Невозможно записать время в документ.");
				Сообщить("Невозможно записать время в документ.");
			КонецПопытки;
		Иначе
			 ЭтотОбъект.Дата=ДатаНоваяДокумента;
			 Попытка
				ЭтотОбъект.Записать();
			Исключение
    			Сообщить("Невозможно записать время в документ.");
			КонецПопытки;
		КонецЕсли;
Иначе
	Если ЭтотОбъект.Модифицированность() тогда
		ЭтотОбъект.Дата=ДатаНоваяДокумента;
		Попытка
				ЭтотОбъект.Записать();
			Исключение
    			Сообщить("Невозможно записать время в документ.");
			КонецПопытки;
		Иначе
			ЭтотОбъект.Дата=ДатаНоваяДокумента;
			ЭтотОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПроверкаБазовогоАдреса(МойОбъект)
	Если СокрЛП(МойОбъект.АдресДоставки) <> "" тогда
				МойАдрес=МойОбъект.АдресДоставки;
				СтруктураАдреса =УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(СокрЛП(МойОбъект.АдресДоставки));
				
				МойАдрес=УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтруктуре(СтруктураАдреса) ;
				Запрос = новый запрос;
				Запрос.УстановитьПараметр("Адрес",СокрЛП(МойАдрес));			
				Запрос.УстановитьПараметр("Объект",МойОбъект.Контрагент);			
				Запрос.Текст = "
				| ВЫБРАТЬ
				| 		КонтактнаяИнформация.Объект,
				| 		КонтактнаяИнформация.Тип,
				| 		КонтактнаяИнформация.Вид.Наименование КАК Вид ,
				| 		КонтактнаяИнформация.Представление,
				| 		КонтактнаяИнформация.Менеджер,
				| 		КонтактнаяИнформация.Вид КАК ВидАдреса
				| 	ИЗ
				| 		РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				| 		ГДЕ
				| 		КонтактнаяИнформация.Представление ПОДОБНО &Адрес  
				|		И  КонтактнаяИнформация.Объект = &Объект ";
				ВыборкаАдресов = Запрос.Выполнить();
				Если  ВыборкаАдресов.Пустой() тогда
					Сообщить("Нет в списке адресов доставки такого адреса! ");
				Иначе
					Адреса=ВыборкаАдресов.Выбрать();
					Адреса.Следующий(); 
					НомерАдреса="";
				 	НомерАдреса1=ПРАВ(СокрЛП(Адреса.Вид),3);
					Если Адреса.Менеджер<>Справочники.Контрагенты.ПустаяСсылка() тогда
						МойОбъект.Реализатор=Адреса.Менеджер;
					КонецЕсли;
					Если Адреса.ВидАдреса<>Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() тогда
						МойОбъект.ВидАдреса=Адреса.ВидАдреса;
					КонецЕсли;
					МойОбъект.БазовыйМаршрут=УправлениеМаршрутами.ПолучитьБазовыйМаршрут(Контрагент,ВидАдреса,Дата);
					
					Для а = 1 По СтрДлина(НомерАдреса1) Цикл
							КодСимвола = КодСимвола(Сред(НомерАдреса1, а, 1));
							Если  (КодСимвола >= 48 И КодСимвола <= 57) Тогда
								//Сообщить(Сред(НомерАдреса1, а, 1));
								НомерАдреса=НомерАдреса+Сред(НомерАдреса1, а, 1);
							КонецЕсли; 
					КонецЦикла; 
					Если СокрЛП(НомерАдреса)="" тогда
							Сообщить("Вид адреса не соответствует установленным правилам!");	
							МойОбъект.АдресДоставки="";
					КонецЕсли;
				КонецЕсли;
	КонецЕсли;			
	
КонецФункции

Функция НйтиЦенуМенеджера(Номенклатура,ХарактеристикаНоменклатуры)
	ЦенаМенеджера=0;
	//***СуммаМенеджера
	ТицЦенСсылка = ЭтотОбъект.Контрагент.ЦенаДляПечати;
	Если ТицЦенСсылка =Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() тогда
		ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
	КонецЕсли;
	Если ЭтотОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС И 
			(ЭтотОбъект.Контрагент.Родитель.Код="000000001" ИЛИ ЭтотОбъект.Контрагент.Родитель.Код="000000338") тогда
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Контрагент", ЭтотОбъект.Контрагент);
			СтруктураОтбор.Вставить("Номенклатура",Номенклатура);
			СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
			ВыборкаД = РегистрыСведений.ЦеныМенеджера.ПолучитьПоследнее(КонецДня(ЭтотОбъект.Дата),СтруктураОтбор);		
		Иначе
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
			СтруктураОтбор.Вставить("Номенклатура",Номенклатура);
			СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарактеристикаНоменклатуры);
			ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
	КонецЕсли;	
		
	Если ВыборкаД <> Неопределено Тогда
			ЦенаМенеджера = ВыборкаД.Цена;
	КонецЕсли;
	
	возврат ЦенаМенеджера;
КонецФункции

// Функция формирует табличный документ с печатной формой ТранспортнаяНакладная на отгрузку,
Функция ПечатьНакладнойПоддоныФоззи () Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
    |   РеализацияТоваровУслугПоддоны.Номенклатура,
    |   СУММА(РеализацияТоваровУслугПоддоны.Количество) КАК Количество,
    |   РеализацияТоваровУслугПоддоны.Цена,
    |   СУММА(РеализацияТоваровУслугПоддоны.Сумма) КАК Сумма
    |ИЗ
    |   Документ.РеализацияТоваровУслуг.Поддоны КАК РеализацияТоваровУслугПоддоны
    |ГДЕ
    |   РеализацияТоваровУслугПоддоны.Ссылка.Ссылка = &Ссылка
    |
    |СГРУППИРОВАТЬ ПО
    |   РеализацияТоваровУслугПоддоны.Номенклатура,
    |   РеализацияТоваровУслугПоддоны.Цена";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
    
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_НакладнаяНаПоддоныФоззи";
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    ПараметрыПечати(ТабДокумент);
    Макет = ПолучитьМакет("НакладнаяНаПоддоныФоззи");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДата="№  "+СокрЛП(ЭтотОбъект.Номер)+" вiд " +Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy");
	ОбластьМакета.Параметры.АдресПоставщика="м.Харкiв, вул. Роганська, 151.";
	ОбластьМакета.Параметры.Поставщик=СокрЛП(ЭтотОбъект.Организация.ПолноеНаименование());
	
	ОбластьМакета.Параметры.Покупатель			= ЭтотОбъект.Контрагент.НаименованиеПолное; 
	ОбластьМакета.Параметры.АдресаДоставки		= ЭтотОбъект.АдресДоставки;
	ТабДокумент.Вывести(ОбластьМакета);
	ВыводитьКоды = Ложь;
	//Сообщить("1");
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ВсегоСумма      = 0;
	ВсегоКоличество = 0;
    НомерПП=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
        КонецЕсли;
        ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.НомерСтроки 	= НомерПП + 1;
		ОбластьДанных.Параметры.Товар 			= ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
		ОбластьДанных.Параметры.ЕдИзм 			= ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
        ОбластьДанных.Параметры.Цена		    = ВыборкаСтрокТовары.Цена;
        ОбластьДанных.Параметры.Сумма	        = ВыборкаСтрокТовары.Сумма;
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество =   ВсегоКоличество + ВыборкаСтрокТовары.Количество;
        ВсегоСумма      =   ВсегоСумма      + ВыборкаСтрокТовары.Сумма;
        НомерПП=НомерПП+1;
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтого");
	ОбластьМакета.Параметры.ИтогоКоличество = ВсегоКоличество ;
    ОбластьМакета.Параметры.ИтогоСумма      = ВсегоСумма ;
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("ОсобыеОтметки");
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьДекларации()

Функция ПараметрыПечати(ТабДок) Экспорт
    //ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДок.ПолеСверху = 10;
	ТабДок.ПолеСлева  = 10;
	ТабДок.ПолеСнизу  = 10;
	ТабДок.ПолеСправа = 10;
	ТабДок.АвтоМасштаб=истина;
КонецФункции

Процедура КомплектПечати() Экспорт
	
	Если ЭтотОбъект = неопределено тогда
		возврат;
	КонецЕсли;
	
	
	ВсегоКПечати=ЭтотОбъект.Контрагент.КоличествоЭкземпляровРасходныхНакладных+
				 ЭтотОбъект.Контрагент.КоличествоЭкземпляровКачественногоСвидетельства+
				 ЭтотОбъект.Контрагент.КоличествоЭкземпляровНакладныхМенеджеру;
			 
	Если ВсегоКПечати=0 тогда
		КоличествоЭкземпляровРасходных=3;
		КоличествоЭкземпляровКачественных=1;
		КоличествоЭкземпляровМенеджеру=2;
	ИНАЧЕ 
		КоличествоЭкземпляровРасходных		=	ЭтотОбъект.Контрагент.КоличествоЭкземпляровРасходныхНакладных;
		КоличествоЭкземпляровКачественных	=	ЭтотОбъект.Контрагент.КоличествоЭкземпляровКачественногоСвидетельства;
		КоличествоЭкземпляровМенеджеру		=	ЭтотОбъект.Контрагент.КоличествоЭкземпляровНакладныхМенеджеру;
	КонецЕсли;
	
	Если КоличествоЭкземпляровРасходных<>0 тогда
		ДокументПечати =ЭтотОбъект.ПечатьДокумента();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровРасходных, Истина);
	КонецЕсли;
	
	
	Если КоличествоЭкземпляровКачественных<>0 тогда   //***КоличествоЭкземпляровКачественных
		//ДокументПечати =ЭтотОбъект.ПечатьКачественногоСвидетельства();
        ДокументПечати =ЭтотОбъект.ПечатьДекларацииПроизводителя();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровКачественных, Истина);
	КонецЕсли;
	
	
	Если КоличествоЭкземпляровМенеджеру<>0 тогда   //****   КоличествоЭкземпляровМенеджеру
		ДокументПечати =ЭтотОбъект.ПечатьМенеджеру();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровМенеджеру, Истина);
	КонецЕсли;
    
    
    Если ЭтотОбъект.Контрагент.Код="000002617" ИЛИ 
         ЭтотОбъект.Контрагент.Код="000002616"  тогда
        ДокументПечати =ЭтотОбъект.ПечатьНакладнойПоддоныФоззи();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, 2, Истина);
    КонецЕсли;    
КонецПроцедуры

Функция ПечатьПроформаНаТаруТаможня() Экспорт
	СД=новый СписокЗначений;
	МояФорма=Документы.РеализацияТоваровУслуг.ПолучитьФормуСписка("ФормаВыбора");
	МояФорма.ОповеститьОВыборе(СД);
	МояФорма.ЗакрыватьПриВыборе=Истина;
	СЗ=МояФорма.ОткрытьМодально();
	СЗ=МояФорма.СписокДокументовДляОбработки;
	Если СЗ = неопределено или СЗ.Количество()=0 тогда
		возврат Новый ТабличныйДокумент;
	КонецЕсли;	
	//СписокДок = "";
	//Если СЗ=0 тогда
	//	Предупреждение("Нет выбранных документов");
	//	СЗ=новый СписокЗначений;
	//	СЗ.Добавить(ЭтотОбъект.Ссылка);
	//КонецЕсли;	
	//Шаг=0;
	//ПОКА Шаг<СЗ.Количество() Цикл
	//	СписокДок=СписокДок+СЗ[Шаг].Значение+",";
	//	Шаг=Шаг+1;
	//КонецЦикла;
	//СписокДок=СокрЛП(СписокДок);
	//СписокДок=ЛЕВ(СписокДок,СтрДлина(СписокДок)-1);
	//
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СЗ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьСерия,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Комментарий,
	|	РеализацияТоваровУслуг.АдресДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&Ссылка)";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СЗ); //ЭтотОбъект.Ссылка
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	СУММА(РеализацияТоваровУслугВозвратнаяТара.Количество) КАК Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	СУММА(РеализацияТоваровУслугВозвратнаяТара.Сумма) КАК Сумма
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьПроформаНаТаруТаможня";
	Макет = ПолучитьМакет("СчетПроформаНаТару");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	//найдем документ в белой базе
	// т.к. найти не возможно (несколько накладных в одной дате, сумма и количество УУ и БУ не совпадает 20-10-14 накладные 00000118210 )
	// пусть вводят вручную
		//Коннектор=Новый COMObject("V82.COMConnector");
		//Импорт=Коннектор.Connect("Srvr=""1CSERVER""; Ref=""RMKBUHBASE""; SQLSrvr=""1CSERVER""; SQLDB= ""RMKBUHBASE""; Usr =""БелаяОтгрузка""; Pwd =""Роганский1978""");
		//ИмпортКонтрагенты = Импорт.Справочники.Контрагенты;
		//ИмпортКонтрагент=ИмпортКонтрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ",МойДокумент.Контрагент.КодПоЕДРПОУ);
		//Если  СокрЛП(ИмпортКонтрагент.Наименование)<>"" тогда
		//	ИмпортРеализация=Импорт.Документы.РеализацияТоваровУслуг;
		//	Выборка = ИмпортРеализация.Выбрать(НачалоДня(МойДокумент.Дата),КонецДня(МойДокумент.Дата));
		//	Пока Выборка.Следующий() Цикл
		//		Текст=Сред(СокрЛП(Выборка.Комментарий),14,11);
		//		//Сообщить(Текст);
		//		//Копия из УУ №00000045113,  от 01.06.2012 7:45:31
		//		Если СокрЛП(Текст)=СокрЛП(МойДокумент.Номер) тогда
		//			НомерНакладной=Выборка.Номер;
		//			//Сообщить("Вот Он "+НомерНакладной);
		//		КонецЕсли;   
		//		//Индекс=Индекс+1;
		//	КонецЦикла;
		//КонецЕсли;
	//***	
	
	НомерБелойНакладной	= Формат(Число(Шапка.Номер),"ЧДЦ=0; ЧГ=0");
//*** 160314 мешает фоновому заданию	ВвестиСтроку(НомерБелойНакладной, "Введите номер документа из Бух. учета.", 11);

	
	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номер		= "  "+НомерБелойНакладной;
	ОбластьМакета.Параметры.Дата		= Формат(Шапка.Дата,"ДФ=dd.MM.yyyy");
	//ОбластьМакета.Параметры.Покупатель	= СокрЛП(Шапка.Покупатель.Наименование);
	
	ОбластьМакета.Параметры.Контракт			=   "Контракт № "+СокрЛП(Шапка.ДоговорКонтрагента.Номер)+" от "+Формат(Шапка.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy")+" г.";
	//ОбластьМакета.Параметры.Покупатель2         =   СокрЛП(Шапка.Покупатель.Наименование);
	//СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	//
	//ЕДРПОУБанка	=СокрЛП(Шапка.Покупатель.ОсновнойБанковскийСчет.Банк.КодПоЕДРПОУ);
	//МФОБанка	=СокрЛП(Шапка.Покупатель.ОсновнойБанковскийСчет.Банк.Код);
	//
	//ОбластьМакета.Параметры.РеквизитыПокупателя =Сред(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,ИНН,/,НомерСчета,Банк/,",,КодЯзыкаПечать),18,180)+", МФО "+МФОБанка+", ОКПО банка "+ЕДРПОУБанка;
	
	//ОбластьМакета.Параметры.АдреДоставки        = СокрЛП(Шапка.АдресДоставки);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	
	ОбластьДанных = Макет.ПолучитьОбласть("Пояснение");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ВсегоСумма      = 0;
	ВсегоКоличество = 0;
	ВсегоВес=0;
    НомерПП=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
        КонецЕсли;
        ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.НомерСтроки 	= НомерПП + 1;
		ОбластьДанных.Параметры.Товар 			= ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
		ОбластьДанных.Параметры.ЕдИзм 			= СокрЛП(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование);
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
        ОбластьДанных.Параметры.Цена		    = Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
        ОбластьДанных.Параметры.Сумма	        = Формат(ВыборкаСтрокТовары.Сумма,"ЧДЦ=2");
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество =   ВсегоКоличество + ВыборкаСтрокТовары.Количество;
        ВсегоСумма      =   ВсегоСумма      + ВыборкаСтрокТовары.Сумма;
		Вес=ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес;
		ВсегоВес		=	ВсегоВес		+ВыборкаСтрокТовары.Количество*?(Вес=0,3,Вес);
        НомерПП=НомерПП+1;
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтого");
    ОбластьМакета.Параметры.ИтогоСумма      = Формат(ВсегоСумма,"ЧДЦ=2") ;
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.СуммаПрописью	= 	ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма, Шапка.ВалютаДокумента,КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.ВесТары			=	Формат(ВсегоВес,"ЧДЦ=3; ЧГ=0")+" кг.";
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // ПечатьПроформаНаТаруТаможня()

Функция УпаковочныйЛистТаможня() Экспорт
	СД=новый СписокЗначений;
	МояФорма=Документы.РеализацияТоваровУслуг.ПолучитьФормуСписка("ФормаВыбора");
	МояФорма.ОповеститьОВыборе(СД);
	МояФорма.ЗакрыватьПриВыборе=Истина;
	СЗ=МояФорма.ОткрытьМодально();
	СЗ=МояФорма.СписокДокументовДляОбработки;
	Если СЗ = неопределено или СЗ.Количество()=0 тогда
		возврат Новый ТабличныйДокумент;
	КонецЕсли;	
	//СписокДок = "";
	//Если СЗ=0 тогда
	//	Предупреждение("Нет выбранных документов");
	//	СЗ=новый СписокЗначений;
	//	СЗ.Добавить(ЭтотОбъект.Ссылка);
	//КонецЕсли;	
	//Шаг=0;
	//ПОКА Шаг<СЗ.Количество() Цикл
	//	СписокДок=СписокДок+СЗ[Шаг].Значение+",";
	//	Шаг=Шаг+1;
	//КонецЦикла;
	//СписокДок=СокрЛП(СписокДок);
	//СписокДок=ЛЕВ(СписокДок,СтрДлина(СписокДок)-1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СЗ);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Комментарий,
	|	РеализацияТоваровУслуг.АдресДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&Ссылка)";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Ссылка", СЗ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугЯщики.Товар КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслугЯщики.Количество) КАК КоличествоЯщиков,
	|	СУММА(РеализацияТоваровУслугЯщики.Вес) КАК Вес,
	|	СУММА(РеализацияТоваровУслугЯщики.ВсегоВес) КАК ВсегоВес,
	|	СУММА(РеализацияТоваровУслугЯщики.ВесУпаковки) КАК ВесУпаковки
	|ПОМЕСТИТЬ Ящики
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Ящики КАК РеализацияТоваровУслугЯщики
	|ГДЕ
	|	РеализацияТоваровУслугЯщики.Ссылка.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугЯщики.Товар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ Товар
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка В(&Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Товар.Номенклатура, Ящики.Номенклатура) КАК Товар,
	|	ЕСТЬNULL(Товар.Номенклатура.Родитель, Ящики.Номенклатура.Родитель) КАК Группа,
	|	ЕСТЬNULL(Товар.Количество,0) КАК Количество,
	|	ЕСТЬNULL(Ящики.ВсегоВес,0) - ЕСТЬNULL(Ящики.Вес,0) КАК Кол,
	|	ЕСТЬNULL(Ящики.Вес,0) КАК Вес,
	|	ЕСТЬNULL(Ящики.ВсегоВес,0) КАК ВсегоВес,
	|	ЕСТЬNULL(Ящики.КоличествоЯщиков,0) КАК КоличествоЯщиков
	|ИЗ
	|	Товар КАК Товар
	|		ПОЛНОЕ СОЕДИНЕНИЕ Ящики КАК Ящики
	|		ПО Товар.Номенклатура = Ящики.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(Товар.Номенклатура.Родитель.Наименование, Ящики.Номенклатура.Родитель.Наименование),
	|	ЕСТЬNULL(Товар.Номенклатура.Наименование, Ящики.Номенклатура.Наименование)";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УпаковочныйЛистТаможня";
	Макет = ПолучитьМакет("УпаковочныйЛист");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
   	НомерБелойНакладной	= Формат(Число(Шапка.Номер),"ЧДЦ=0; ЧГ=0");
//*** 160314 мешает фоновому заданию	ВвестиСтроку(НомерБелойНакладной, "Введите спецификации из Бух. учета.", 11);

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.Номер		= " УПАКОВОЧНЫЙ ЛИСТ № "+НомерБелойНакладной+"  от  "+Формат(Шапка.Дата,"ДФ=dd.MM.yyyy")+" г.";
	//ОбластьМакета.Параметры.Покупатель	= СокрЛП(Шапка.Покупатель.Наименование);
	ОбластьМакета.Параметры.Контракт	="Контракт № "+СокрЛП(Шапка.ДоговорКонтрагента.Номер)+" от "+Формат(Шапка.ДоговорКонтрагента.Дата,"ДФ=dd.MM.yyyy")+" г.";
	ОбластьМакета.Параметры.Спецификация= " № "+НомерБелойНакладной+" от "+Формат(Шапка.Дата,"ДФ=dd.MM.yyyy")+" г.";
	//ОбластьМакета.Параметры.Покупатель2         =   СокрЛП(Шапка.Покупатель.Наименование);
	//СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	//ЕДРПОУБанка	=СокрЛП(Шапка.Покупатель.ОсновнойБанковскийСчет.Банк.КодПоЕДРПОУ);
	//МФОБанка	=СокрЛП(Шапка.Покупатель.ОсновнойБанковскийСчет.Банк.Код);
	//ОбластьМакета.Параметры.РеквизитыПокупателя =Сред(ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,ИНН,/,НомерСчета,Банк/,",,КодЯзыкаПечать),18,180)+", МФО "+МФОБанка+", ОКПО банка "+ЕДРПОУБанка;
	//ОбластьМакета.Параметры.АдреДоставки        = СокрЛП(Шапка.АдресДоставки);
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);

	ВсегоЯщиков		= 0;
	ВесЯщиков		= 0;
	ВсегоСумма      = 0;
	ВсегоКоличество = 0;
	
	ВсегоВес=0;
    НомерПП=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		//Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
		//	Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
		//	Продолжить;
		//КонецЕсли;
        ОбластьДанных = Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.НомерСтроки 	= НомерПП + 1;
		ОбластьДанных.Параметры.Товар 			= СокрЛП(ВыборкаСтрокТовары.Группа.Наименование)+"-"+СокрЛП(ВыборкаСтрокТовары.Товар.Наименование);
		ОбластьДанных.Параметры.ЕдИзм 			= СокрЛП(ВыборкаСтрокТовары.Товар.ЕдиницаХраненияОстатков.Наименование);
		ОбластьДанных.Параметры.Количество		= Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
		ОбластьДанных.Параметры.ВесНетто        = Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
		ОбластьДанных.Параметры.ВесБрутто		= Формат(ВыборкаСтрокТовары.Количество+ВыборкаСтрокТовары.Вес,"ЧДЦ=3");
        ОбластьДанных.Параметры.КолМест	        = Формат(ВыборкаСтрокТовары.КоличествоЯщиков,"ЧДЦ=0");
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество =   ВсегоКоличество + (ВыборкаСтрокТовары.Количество);
		ВсегоЯщиков		= 	ВсегоЯщиков		+  ВыборкаСтрокТовары.КоличествоЯщиков;
		ВесЯщиков		= 	ВесЯщиков		+  ВыборкаСтрокТовары.Вес;
		ВсегоСумма      =	ВсегоСумма      +  ВыборкаСтрокТовары.Количество+ВыборкаСтрокТовары.Вес;//ВыборкаСтрокТовары.ВсегоВес;//брутто
        НомерПП=НомерПП+1;
	КонецЦикла;
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаИтого");
    ОбластьМакета.Параметры.ИтогоКоличество      = Формат(ВсегоКоличество,"ЧДЦ=3") ;
	ОбластьМакета.Параметры.ИтогоНетто           = Формат(ВсегоКоличество,"ЧДЦ=3") ;
	ОбластьМакета.Параметры.ИтогоБрутто          = Формат(ВсегоСумма,"ЧДЦ=3") ;
	ОбластьМакета.Параметры.ИтогоСумма           = Формат(ВсегоЯщиков,"ЧДЦ=0") ;//кол мест
	
	ТабДокумент.Вывести(ОбластьМакета);
    
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ОбластьМакета.Параметры.ВсегоКоличество	= 	Формат(ВсегоКоличество,"ЧДЦ=3; ЧГ=0")+" кг.";
	ОбластьМакета.Параметры.КолТары			=	Формат(ВсегоЯщиков,"ЧДЦ=0; ЧГ=0")+ " шт. пластиковых ящиков. Тара является возвратной.";
	ОбластьМакета.Параметры.ВесТары			=	Формат(ВесЯщиков,"ЧДЦ=3; ЧГ=0")+ " кг.";
	
	ТабДокумент.Вывести(ОбластьМакета);
	Возврат ТабДокумент;
КонецФункции // УпаковочныйЛистТаможня()

//*** итогом по супервайзеру Горло Донецкого АТО на контрагнта Мариуполь центральный рынок 
Функция НакладнаяРасходнаяДНР()  Экспорт
	
	МойПокупатель=Справочники.Контрагенты.НайтиПоКоду("000003450"); //
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
     
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СУММА(РеализацияТоваровУслуг.Количество) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество)
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	Группа,
	|	Наименование";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
     
    ПараметрыПечати(ТабДокумент); 
	Макет = ПолучитьМакет("НакладнаяРасходная");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(МойПокупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
//	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= УправлениеМаршрутами.ПолучениеПредставленияАдреса(МойПокупатель,Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000025"));
	
	
	
	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать); //*** Ю.Ляшенко 11-12-2014
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	ВыводитьКоды = Ложь;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	Если Не ВыводитьКоды Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("КолонкаКодов").ШиринаКолонки+5;
	КонецЕсли;
	Если НЕ ЕстьСкидки Тогда
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
											Макет.Область("СуммаБезСкидки").ШиринаКолонки +
											Макет.Область("СуммаСкидки").ШиринаКолонки;
	КонецЕсли;
	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки +5;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество =0; 
    ВсегоКолШт      =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаСтрокТовары.Количество=0 тогда
			Продолжить;
		КонецЕсли;
			

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		
		
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Номенклатура.Родитель)+"  -   "+СокрП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное);

		ТабДокумент.Присоединить(ОбластьДанных);

		//Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
		Скидка = 0;
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ТабДокумент.Присоединить(ОбластьСуммы);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
        
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ЗаполнениеДокументов.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		//Если ВыводитьКоды Тогда
		//	ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		//	ТабДокумент.Присоединить(ОбластьКодов);
		//КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
			Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			//Если ВыводитьКоды Тогда
			//	Если Колонка = "Артикул" Тогда
			//		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			//	Иначе
			//		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			//	КонецЕсли;
			//	ТабДокумент.Присоединить(ОбластьКодов);
			//КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура.НаименованиеПолное);			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+Формат(ВсегоКоличество,"ЧДЦ=3; ЧН=' '; ЧГ=0")+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести подписи
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Выписал=СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	ТабДокумент.Вывести(ОбластьМакета);	
	Возврат ТабДокумент;
		
КонецФункции // НакладнаяДНР()

// Функция осуществляет печать формы "1-Т для ДНР по Горло"
// на основании документа "РеализацияТоваровУслуг".
//
Функция ПечатьТТН2014() Экспорт
    МойПокупатель=Справочники.Контрагенты.НайтиПоКоду("000003450"); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СУММА(РеализацияТоваровУслуг.Количество) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество)
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка <> &ТорговаяМарка	
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	Группа,
	|	Наименование";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(Количество) КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("ТТН2014");
	ТабДокумент.ИмяПараметровПечати= "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН2014";
	КодЯзыкаПечать = "uk";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(МойПокупатель, ЭтотОбъект.Дата,,,КодЯзыкаПечать);
	СведенияОГрузополучателе  = СведенияОПокупателе;
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЭтотОбъект.Организация,ЭтотОбъект.Дата,,,КодЯзыкаПечать);
	СведенияОГрузоотправитель = СведенияОПоставщике;

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ЭтотОбъект.Номер;
	ОбластьМакета.Параметры.ДатаДокумента                 = "''"+Формат(ЭтотОбъект.Дата,"ДФ=dd")+"'' "+ДополнительныеФункции.МесяцПрописью(Месяц(ЭтотОбъект.Дата),"РОД",КодЯзыкаПечать)+"  "+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+"р.";
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = "";
	ОбластьМакета.Параметры.ГосНомерПрицепа = ""; 
	ОбластьМакета.Параметры.ВидПеревозки = "";
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = "";//" ТОВ ВП  РОГАНСЬКИЙ  М'ЯСОКОМБІНАТ";//Перевозчик;	
	ОбластьМакета.Параметры.ФИОВодителя = "";
   	//AL***
	ОбластьМакета.Параметры.ПлательщикПредставление       = "ООО ""Колбасный Континент"", ИНН 50001577, тел.: +38 (062) 349-27-77, р/с 2600500707, в банке ЦРБ, МФО 400019";
	//рмированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ");
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес");
	ОбластьМакета.Параметры.ГрузополучательПредставление  =  "ООО ""Колбасній континент"" 83049, г.Донецк, ул.Куйбышева, д.75 В, к.12";
	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ");
	                                                                                                                                                        //И.М. Сотникова 16-01-14
	ОбластьМакета.Параметры.ПунктПогрузки  = "м.Харкiв, вул. Роганська, 151";
	ОбластьМакета.Параметры.ПунктРазгрузки = "Донецька,  Донецк, улица, Куйбышева,  дом № 75 В, кв.12";
	ОбластьМакета.Параметры.ДоверенностьСерияНомерДата="Cеря         "+" №             "+" вiд ";
	ОбластьМакета.Параметры.ДоверенностьВыдана = "";
	
	ВсегоТовара=ЗапросТовары.Итог("Количество");
	ВсегоЯщиков=Окр(ЗапросТара.Итог("Количество"),0);
	
	ОбластьМакета.Параметры.КоличествоЯщиков	=ТонныПрописью(Окр(ВсегоЯщиков,0),КодЯзыкаПечать);
	ОбластьМакета.Параметры.ФИОВодителя2		= "";
	ОбластьМакета.Параметры.СтрокаТранспортныхУслуг = "згiдно договору";
	ОбластьМакета.Параметры.ВесБрутто		   =ТонныПрописью(Окр(ВсегоТовара+ВсегоЯщиков/3,0)/1000,КодЯзыкаПечать);
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизации(ЭтотОбъект.Организация, ЭтотОбъект.Дата,);
	Руководитель = Руководители.Руководитель;
    ДолжностьМоя=" ";
	// Отпуск товара разрешил
    
	ДолжностьМоя="Директор ";
	ФИООтпускРазрешил       = Руководитель;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = СокрЛП(ДолжностьМоя)+"  "+СОкрЛП(ФИООтпускРазрешил);
	ДолжностьФИОПредставителя = "";
	ОбластьМакета.Параметры.КтоОформил=" ";
	ИтогоСуммаСНДС  = 0;
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		СтруктураОтбор.Вставить("Номенклатура",ВыборкаСтрок.Номенклатура);
		СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрок.ХарактеристикаНоменклатуры);
		ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
		Цена = 0;
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС + ВыборкаСтрок.Количество * Цена;
	КонецЦикла;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);	
	ОбластьМакета.Параметры.СуммаНДС=ОбщегоНазначения.СформироватьСуммуПрописью(Окр(ИтогоСуммаСНДС/6,2,2) , глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);	
	
	//СопроводительныеДОкументы
	СтрДок="р/н № "+СокрЛП(ЭтотОбъект.Номер)+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy");
	ОбластьМакета.Параметры.СопроводительныеДОкументы= СтрДок;
	ТабДокумент.Вывести(ОбластьМакета);    //***AL

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.Наименование;
		Мест        = ВыборкаСтрок.Количество;
		Ном=Ном+1;
		ОбластьМакета.Параметры.НомерПП=Ном;
		ОбластьМакета.Параметры.Количество  = Формат(ВыборкаСтрок.Количество,"ЧДЦ=3; ЧГ=0");
		ОбластьМакета.Параметры.ВидУпаковки = ВыборкаСтрок.ХарактеристикаНоменклатуры;
		
		//СуммаСНДС   = Окр(ВыборкаСтрок.Сумма  , 2);
		//СуммаНДС    = Окр(ВыборкаСтрок.СуммаНДС, 2);
		//СуммаБезНДС = СуммаСНДС - СуммаНДС;
		
		ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		СтруктураОтбор.Вставить("Номенклатура",ВыборкаСтрок.Номенклатура);
		СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрок.ХарактеристикаНоменклатуры);
		ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
		Цена = 0;
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ОбластьМакета.Параметры.Цена=Цена;
		ОбластьМакета.Параметры.БазоваяЕдиницаНаименование=ВыборкаСтрок.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Сумма 	= Формат(ВыборкаСтрок.Количество*Цена,"ЧДЦ=2; ЧГ=0");
		ОбластьМакета.Параметры.Масса	= Формат(ВыборкаСтрок.Количество,"ЧДЦ=3; ЧГ=0");
		
		ОбластьМакета.Параметры.ДокументыСопровождения="р/н №"+СокрЛП(ЭтотОбъект.Номер);
		ТабДокумент.Вывести(ОбластьМакета);
		// увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + ВыборкаСтрок.Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + ВыборкаСтрок.Количество*Цена;
	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
	ОбластьМакета.Параметры.ИтогоМасса      = ИтогоКоличество;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

   	
    ОбластьМакета.Параметры.ЗдалМастер				= "";
	ОбластьМакета.Параметры.ФИОВодителя3			= "";
	ОбластьМакета.Параметры.ФИОВодителя4            = "";
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	
	ОбластьМакета.Параметры.ОбщийВесВТоннах=Формат(ИтогоКоличество/1000,"ЧДЦ=3");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб=Истина;

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()

// Функция осуществляет печать формы "1-Т для ДНР по Горло"
// на основании документа "РеализацияТоваровУслуг".
//
Функция ТТН_Мариуполь() Экспорт
    МойПокупатель=Справочники.Контрагенты.НайтиПоКоду("000003450"); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА СУММА(РеализацияТоваровУслуг.Количество) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество)
	|	КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	Группа,
	|	Наименование";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(Количество) КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("ТТН2014");
	ТабДокумент.ИмяПараметровПечати= "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН2014";
	КодЯзыкаПечать = "uk";

	// Выводим общие реквизиты шапки
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(МойПокупатель, ЭтотОбъект.Дата,,,КодЯзыкаПечать);
	СведенияОГрузополучателе  = СведенияОПокупателе;
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ЭтотОбъект.Организация,ЭтотОбъект.Дата,,,КодЯзыкаПечать);
	СведенияОГрузоотправитель = СведенияОПоставщике;

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ЭтотОбъект.Номер;
	ОбластьМакета.Параметры.ДатаДокумента                 = "''"+Формат(ЭтотОбъект.Дата,"ДФ=dd")+"'' "+ДополнительныеФункции.МесяцПрописью(Месяц(ЭтотОбъект.Дата),"РОД",КодЯзыкаПечать)+"  "+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+"р.";
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = "";
	ОбластьМакета.Параметры.ГосНомерПрицепа = ""; 
	ОбластьМакета.Параметры.ВидПеревозки = "";
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = "";//" ТОВ ВП  РОГАНСЬКИЙ  М'ЯСОКОМБІНАТ";//Перевозчик;	
	ОбластьМакета.Параметры.ФИОВодителя = "";
   	//AL***                                         
	ОбластьМакета.Параметры.ПлательщикПредставление       = "ФЛП Братишко  Донецкая обл. г.Мариупоь, буд. № 48-49";
	ОбластьМакета.Параметры.ГрузоотправительПредставление = "ТОВ ""ВП ""Роганский мясокомбинат"" 61172, м.Харків, вул.Роганська, буд.151";
	ОбластьМакета.Параметры.ГрузополучательПредставление  =  "ФЛП Братишко  Донецкая обл. г.Мариупоь, буд. № 48-49";
	ОбластьМакета.Параметры.ПунктПогрузки  = "м.Харкiв, вул. Роганська, 151";
	ОбластьМакета.Параметры.ПунктРазгрузки = "г.Мариупоь, буд. № 48-49";
	ОбластьМакета.Параметры.ДоверенностьСерияНомерДата="Cеря         "+" №             "+" вiд ";
	ОбластьМакета.Параметры.ДоверенностьВыдана = "";
	
	ВсегоТовара=ЗапросТовары.Итог("Количество");
	ВсегоЯщиков=Окр(ЗапросТара.Итог("Количество"),0);
	
	ОбластьМакета.Параметры.КоличествоЯщиков	=ТонныПрописью(Окр(ВсегоЯщиков,0),КодЯзыкаПечать);
	ОбластьМакета.Параметры.ФИОВодителя2		= "";
	ОбластьМакета.Параметры.СтрокаТранспортныхУслуг = "згiдно договору";
	ОбластьМакета.Параметры.ВесБрутто		   =ТонныПрописью(Окр(ВсегоТовара+ВсегоЯщиков/3,0)/1000,КодЯзыкаПечать);
	Руководители = ФормированиеПечатныхФорм.ОтветственныеЛицаОрганизации(ЭтотОбъект.Организация, ЭтотОбъект.Дата,);
	Руководитель = Руководители.Руководитель;
    ДолжностьМоя=" ";
	// Отпуск товара разрешил
    
	ДолжностьМоя="Директор ";
	ФИООтпускРазрешил       = Руководитель;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = "Директор  Семікоп А.М.";
	ДолжностьФИОПредставителя = "";
	ОбластьМакета.Параметры.КтоОформил=" ";
	ИтогоСуммаСНДС  = 0;
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл
		
		Если  ВыборкаСтрок.Номенклатура.ТорговаяМарка<>Перечисления.ТорговыеМарки.КС ТОГДА
			ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		Иначе
			ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000224");
		КонецЕсли;	
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		СтруктураОтбор.Вставить("Номенклатура",ВыборкаСтрок.Номенклатура);
		СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрок.ХарактеристикаНоменклатуры);
		ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
		Цена = 0;
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС + ВыборкаСтрок.Количество * Цена;
	КонецЦикла;
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);	
	ОбластьМакета.Параметры.СуммаНДС=ОбщегоНазначения.СформироватьСуммуПрописью(Окр(ИтогоСуммаСНДС/6,2,2) , глЗначениеПеременной("ВалютаРегламентированногоУчета"), КодЯзыкаПечать);	
	
	//СопроводительныеДОкументы
	СтрДок="р/н № "+СокрЛП(ЭтотОбъект.Номер)+" от "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy");
	ОбластьМакета.Параметры.СопроводительныеДОкументы= СтрДок;
	ТабДокумент.Вывести(ОбластьМакета);    //***AL

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	//ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.Наименование;
		Мест        = ВыборкаСтрок.Количество;
		Ном=Ном+1;
		ОбластьМакета.Параметры.НомерПП=Ном;
		ОбластьМакета.Параметры.Количество  = Формат(ВыборкаСтрок.Количество,"ЧДЦ=3; ЧГ=0");
		ОбластьМакета.Параметры.ВидУпаковки = ВыборкаСтрок.ХарактеристикаНоменклатуры;
		Если  ВыборкаСтрок.Номенклатура.ТорговаяМарка<>Перечисления.ТорговыеМарки.КС ТОГДА
			ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		Иначе
			ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000224");
		КонецЕсли;	
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		СтруктураОтбор.Вставить("Номенклатура",ВыборкаСтрок.Номенклатура);
		СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрок.ХарактеристикаНоменклатуры);
		ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
		Цена = 0;
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ОбластьМакета.Параметры.Цена=Цена;
		ОбластьМакета.Параметры.БазоваяЕдиницаНаименование=ВыборкаСтрок.ЕдиницаИзмерения;
		ОбластьМакета.Параметры.Сумма 	= Формат(ВыборкаСтрок.Количество*Цена,"ЧДЦ=2; ЧГ=0");
		ОбластьМакета.Параметры.Масса	= Формат(ВыборкаСтрок.Количество,"ЧДЦ=3; ЧГ=0");
		
		ОбластьМакета.Параметры.ДокументыСопровождения="р/н №"+СокрЛП(ЭтотОбъект.Номер);
		ТабДокумент.Вывести(ОбластьМакета);
		// увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + ВыборкаСтрок.Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + ВыборкаСтрок.Количество*Цена;
	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;
	ОбластьМакета.Параметры.ИтогоМасса      = ИтогоКоличество;
	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
    ОбластьМакета.Параметры.ЗдалМастер				= "";
	ОбластьМакета.Параметры.ФИОВодителя3			= "";
	ОбластьМакета.Параметры.ФИОВодителя4            = "";
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	
	ОбластьМакета.Параметры.ОбщийВесВТоннах=Формат(ИтогоКоличество/1000,"ЧДЦ=3");
	ТабДокумент.Вывести(ОбластьМакета);

	// Зададим параметры макета
	ТабДокумент.ПолеСверху = 0;
	ТабДокумент.ПолеСлева  = 0;
	ТабДокумент.ПолеСнизу  = 0;
	ТабДокумент.ПолеСправа = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб=Истина;

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()

//*** итогом по супервайзеру Горло Донецкого АТО на контрагнта Мариуполь центральный рынок 
Функция  ДекларацииПроизводителяДНР() Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	МойПокупатель=Справочники.Контрагенты.НайтиПоКоду("000003450"); 
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	Контрагент КАК Покупатель
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	//СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Упаковка,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя КАК УсловияХранения,
	|	ЗначенияСвойствОбъектов.Значение КАК Влажность,
	|	ЗначенияСвойствОбъектов1.Значение КАК ФормаВид,
	|	ЗначенияСвойствОбъектов2.Значение КАК ВДСЕЕ,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул  КАК Артикул
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыНоменклатуры КАК ТекстыНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ТекстыНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = ТекстыНоменклатуры.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Код = ""00000000019"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000032"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов2.Объект
	|			И (ЗначенияСвойствОбъектов2.Свойство.Код = ""00000000034"")
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслугТовары.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслугТовары.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЗначенияСвойствОбъектов1.Значение,
	|	ЗначенияСвойствОбъектов2.Значение,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ЗапросТУ = Новый запрос;
	ЗапросТУ.Текст="ВЫБРАТЬ
	               |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ДСТУ,
	               |	ЗначенияСвойствОбъектов1.Значение КАК ВДСЕЕ,
	               |	РеализацияТоваровУслугТовары.Номенклатура
	               |ПОМЕСТИТЬ ТУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка.Дата >= &Дата1
	               |	И РеализацияТоваровУслугТовары.Ссылка.Дата <= &Дата2
	               |	И РеализацияТоваровУслугТовары.Ссылка.Контрагент.Супервайзер = &Супервайзер
	               |	И РеализацияТоваровУслугТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И ЗначенияСвойствОбъектов.Свойство.Код = ""00000000033""
	               |	И ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000034""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ,
	               |	КОЛИЧЕСТВО(ТУ.Номенклатура) КАК Номенклатура
	               |ИЗ
	               |	ТУ КАК ТУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ";
	ЗапросТУ.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	ЗапросТУ.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	ЗапросТУ.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	
	ТЗНормДок = ЗапросТУ.Выполнить().Выгрузить();			   
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ДекларацииПроизводителя";
    
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    
    ПараметрыПечати(ТабДокумент);
    
    Макет = МойОбъект.ПолучитьМакет("ДекларацияПроизводителя");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

//найдем строку декларации
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СправочникВетеринарныхСвидетельств.Ссылка,
        |   СправочникВетеринарныхСвидетельств.Код,
        |   СправочникВетеринарныхСвидетельств.Наименование,
        |   СправочникВетеринарныхСвидетельств.Дата,
        |   СправочникВетеринарныхСвидетельств.Комментарий,
        |   СправочникВетеринарныхСвидетельств.НомерДекларацииВиробника
        |ИЗ
        |   Справочник.СправочникВетеринарныхСвидетельств КАК СправочникВетеринарныхСвидетельств
        |ГДЕ
        |   СправочникВетеринарныхСвидетельств.Дата = &Дата
        |   И СправочникВетеринарныхСвидетельств.ПометкаУдаления = ЛОЖЬ";

    Запрос.УстановитьПараметр("Дата", НачалоДня(ЭтотОбъект.Дата));
    РезультатСВС = Запрос.Выполнить();
    ВыборкаДЗ = РезультатСВС.Выбрать();
    СтрокаСвидетельств="";
    МойНомерДекларации="";
    Если не РезультатСВС.Пустой() тогда 
        ВыборкаДЗ.Следующий();
        МойНомерДекларации=ВыборкаДЗ.НомерДекларацииВиробника;
        СтрокаСвидетельств=ВыборкаДЗ.Наименование;
    КонецЕсли;
 
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    Если СокрЛП(СтрокаСвидетельств)="" тогда
        СтрЗаголовка="Декларація виробника №___________";
    Иначе    
        СтрЗаголовка        =СтрокаСвидетельств;
        СтрЗаголовка="Декларація виробника № "+СокрЛП(МойНомерДекларации);
    КонецЕсли;
    
    ОбластьМакета.Параметры.ЗаголовокДокумента = СтрЗаголовка;
    //ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    //ОбластьМакета.Параметры.ЗаголовокДокумента = "Декларація виробника №___________";
	ОбластьМакета.Параметры.Покупатель = "Товароотримувач:  "+СокрЛП(МойПокупатель.НаименованиеПолное);
	НомерНакладной=СокрЛП(МойОбъект.Номер);
	//***поиск номера накладной бухгалтерского учета
	ОбластьМакета.Параметры.ДатаПроизводстваНомерНАкладной = "Дата виробництва та  відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".  Накладна № "+Формат(Число(СокрЛП(НомерНакладной)),"ЧГ=0")+"  від  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".";//+" 08:00:00 для реалізації";
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	ВсегоСкидок    = 0;
	строкаНомер= 0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ВыборкаСтрокТовары.Количество=0 тогда 
			Продолжить;
		КонецЕсли;
		
	    ОбластьДанных=Макет.ПолучитьОбласть("Строка");
		ОбластьДанных.Параметры.Номенклатура 	= ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.ТекстВидУпаковки= ВыборкаСтрокТовары.Упаковка;
		ОбластьДанных.Параметры.Влажность       = ВыборкаСтрокТовары.Влажность;
		ОбластьДанных.Параметры.Условия			= ВыборкаСтрокТовары.УсловияХранения;	
		ОбластьДанных.Параметры.Форма			= ВыборкаСтрокТовары.ФормаВид;  
		Шаг=0;
		Пока Шаг < ТЗНормДок.Количество() Цикл
			Если Врег(СокрЛП(ТЗНормДок[Шаг].ДСТУ))=Врег(СокрЛП(ВыборкаСтрокТовары.Артикул))
				И Врег(СокрЛП(ТЗНормДок[Шаг].ВДСЕЕ))=Врег(СокрЛП(ВыборкаСтрокТовары.ВДСЕЕ)) ТОГДА
				прервать;
			КонецЕсли;
			Шаг=Шаг+1;
		КонецЦикла;
		ОбластьДанных.Параметры.НомерСтроки =	Формат(строкаНомер+1,"ЧДЦ=0; ЧГ=0");
		ОбластьДанных.Параметры.СсылкаДСТУ	=	Формат(Шаг+1,"ЧДЦ=0; ЧГ=0");
		
		строкаНомер=строкаНомер+1;
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
	ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);
	ОбластьДанных=Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьДанных);
	ОбластьДанных=Макет.ПолучитьОбласть("Заголовок2");
	ТабДокумент.Вывести(ОбластьДанных);
	ОбластьДанных=Макет.ПолучитьОбласть("Шапка2");
	ТабДокумент.Вывести(ОбластьДанных);
	Шаг=0;
	ОбластьДанных=Макет.ПолучитьОбласть("Строка2");
	Пока Шаг < ТЗНормДок.Количество() Цикл
		ОбластьДанных.Параметры.НомерТУ=Шаг+1;
		ОбластьДанных.Параметры.ТекстДСТУ=ТЗНормДок[Шаг].ДСТУ;
		ОбластьДанных.Параметры.ТекстВДСЕЕ=ТЗНормДок[Шаг].ВДСЕЕ;
		ТабДокумент.Вывести(ОбластьДанных);
		Шаг=Шаг+1;
	КонецЦикла;

	ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы2");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
	Текст_ЭВ="";
	ЗапросЭВ = новый запрос;
	ЗапросЭВ.Текст="ВЫБРАТЬ
	               |	СправочникЭкспертноеВетеринарноеЗаключение.Дата КАК Дата,
	               |	СправочникЭкспертноеВетеринарноеЗаключение.Наименование,
				   |	СправочникЭкспертноеВетеринарноеЗаключение.ссылка
	               |ИЗ
	               |	Справочник.СправочникЭкспертноеВетеринарноеЗаключение КАК СправочникЭкспертноеВетеринарноеЗаключение
	               |ГДЕ
	               |	СправочникЭкспертноеВетеринарноеЗаключение.ПометкаУдаления = ЛОЖЬ
	               |	И СправочникЭкспертноеВетеринарноеЗаключение.Дата <= &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	
	ЗапросЭВ.УстановитьПараметр("Дата",КонецДня(МойОбъект.Дата));
	Рез_ЭВ= ЗапросЭВ.Выполнить().Выбрать();
	//Текст_ЭВ="";
	//Текст_ЭВ=РегистрыСведений.ЭкспертноеВетеринарноеЗаключение.
	Если Рез_ЭВ.Количество()>0 тогда 
		Рез_ЭВ.Следующий();
		Текст_ЭВ=Рез_ЭВ.ссылка;
	КонецЕсли;	
	ОбластьОсобыеОтметки.Параметры.ЭкспертВисновок=Текст_ЭВ;
    СтрокаВС="Серія ______№ _________________________від ____________"+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+" р.";
    ОбластьОсобыеОтметки.Параметры.СтрокаВС=?(СокрЛП(СтрокаСвидетельств)="",СтрокаВС,СокрЛП(СтрокаСвидетельств));
    ОбластьОсобыеОтметки.Параметры.Технолог=?(СокрЛП(ЭтотОбъект.Контрагент.Код)="000002616" ИЛИ 
                            СокрЛП(ЭтотОбъект.Контрагент.Код)="000002617"
                            ИЛИ ИСТИНА,"Ковтун О.I." ,"");
	ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельстваДНР()

//*** для покупателей Колбасного континента
Функция ПечатьНакладнойКК()

	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	//#Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Родитель.Наименование КАК Родитель,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|	ПроцентСкидкиНаВес,
	|	СкидкаНаВес
	|ИЗ 
	|	(ВЫБРАТЬ
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		Цена                 КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	    ПроцентСкидкиНаВес,
	|	    СкидкаНаВес,	
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент и Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|       ПроцентСкидкиНаВес,
	|	    СкидкаНаВес	
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|УПОРЯДОЧИТЬ ПО
	|	 Родитель, Номенклатура, Характеристика
	|";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	
		Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяРасходнаяКК";
    
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    ПараметрыПечати(ТабДокумент);
    Макет = МойОбъект.ПолучитьМакет("НакладнаяРасходнаяКК");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	КодЯзыкаПечать ="ru";
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной

	//СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Расходная накладная № "+Число(МойОбъект.Номер)+" от " +Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy; ДЛФ=DD");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
//	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "Общество с Ограниченной Ответственностью ""Колбасный Континент""";
	ОбластьМакета.Параметры.РеквизитыПоставщика =" Р/с 2600500707, в банке Центральный Республиканский Банк, МФО 400019, ДНР, 83049, Донецк, улица, Куйбышева,  дом № 75 В, кв.12, тел.: +38 (062) 349-27-77, ИК  50001577";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = МойОбъект.Контрагент.Наименование +" "+МойОбъект.АдресДоставки; 
	ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
	ОбластьМакета.Параметры.Комментарий=МойОбъект.Комментарий;
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	ВыводитьКоды = Ложь;
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	ТабДокумент.Вывести(ОбластьНомера);
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ТабДокумент.Присоединить(ОбластьДанных);
	ОбластьКолонкаТовар = Макет.Область("Товар");
	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	ВсегоКолШт      =0;
    ВсегоСумма=0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);
		
		ОбластьДанных.Параметры.Упаковка= СокрЛП(ВыборкаСтрокТовары.Характеристика)+" ";
		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
	    СтрокаПоходТорговойСети="";
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Родитель)+"  -   "+СокрП(ВыборкаСтрокТовары.Товар)+СтрокаПоходТорговойСети;
		
		ОбластьДанных.Параметры.Количество=ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.ЕдиницаИзмерения=ВыборкаСтрокТовары.ЕдиницаИзмерения;
        //*** "кг.";
		
		//Сообщить(ВыборкаСтрокТовары.Товар);
		НомСсылка = ВыборкаСтрокТовары.Номенклатура;
		//Справочники.Номенклатура.НайтиПоНаименованию(ВыборкаСтрокТовары.Товар); 
		ТицЦенСсылка = МойОбъект.Контрагент.ЦенаДляПечати ;
		
		Если    ТицЦенСсылка =Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() тогда
			 ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		КонецЕсли;

		//ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
    	Если СокрЛП(ВыборкаСтрокТовары.Характеристика)=""   тогда
			ХарНом=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Иначе
			
			//Выбрать(<Родитель>, <Владелец>, <Отбор>, <Порядок>) 
			ОтборХарактеристики=Новый Структура;
			ОтборХарактеристики.Вставить("Наимнование", СокрЛП(ВыборкаСтрокТовары.Характеристика));
			//ОтборХарактеристики.Вставить("Активная", Истина);
			ХарНомВыборка =Справочники.ХарактеристикиНоменклатуры.Выбрать(,НомСсылка,);
			Пока ХарНомВыборка.Следующий() Цикл
				Если СокрЛП(ХарНомВыборка.Наименование)=СокрЛП(ВыборкаСтрокТовары.Характеристика) тогда
					 //Сообщить("ХарНомВыборка "+ХарНомВыборка.Ссылка);
					 ХарНом=ХарНомВыборка.Ссылка;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Найти код характеристики номенклатуры
		//Сообщить("ТицЦенСсылка "+ТицЦенСсылка);
		//СтруктураОтбор = Новый Структура;
		//СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		//СтруктураОтбор.Вставить("Номенклатура",НомСсылка);
		//СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарНом);
		//***АЛ 06-02-2014
		Если МойОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС И 
			(МойОбъект.Контрагент.Родитель.Код="000000001" ИЛИ МойОбъект.Контрагент.Родитель.Код="000000338") тогда
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Контрагент", МойОбъект.Контрагент);
			СтруктураОтбор.Вставить("Номенклатура",НомСсылка);
			СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарНом);
			ВыборкаД = РегистрыСведений.ЦеныМенеджера.ПолучитьПоследнее(КонецДня(МойОбъект.Дата),СтруктураОтбор);		
		Иначе
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
			СтруктураОтбор.Вставить("Номенклатура",НомСсылка);
			СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ХарНом);
			ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(МойОбъект.Дата,СтруктураОтбор);
		КонецЕсли;	
		//ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(МойОбъект.Дата,СтруктураОтбор);
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ОбластьДанных.Параметры.Цена	=	ВыборкаСтрокТовары.Цена;
		ОбластьДанных.Параметры.Сумма	=	ВыборкаСтрокТовары.Сумма;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		//ВсегоКоличество=ВсегоКоличество+ВыборкаСтрокТовары.Количество;
        //ВсегоКоличество=ВсегоКоличество+?(ВыборкаСтрокТовары.ЕдиницаИзмерения="кг",ВыборкаСтрокТовары.Количество,0);		
		//*** AL  ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
		ВсегоСумма=ВсегоСумма+ВыборкаСтрокТовары.Сумма;
	КонецЦикла;
	ОбластьИтого = Макет.ПолучитьОбласть("Итого");
	ОбластьИтого.Параметры.Всего= ВсегоСумма;
	ТабДокумент.Вывести(ОбластьИтого);
	
	//ОбластьИтогоНДС = Макет.ПолучитьОбласть("ИтогоНДС");
	//ОбластьИтогоНДС.Параметры.ВсегоНДС= ВсегоСумма/6;
	//ТабДокумент.Вывести(ОбластьИтогоНДС);
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = ВсегоСумма;// + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	//*** ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," + "    в кiлькостi "+ВсегоКоличество+" кг." ;
 	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+ВсегоКоличество+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;

	
	
	
	
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + НСтр("ru='.  В т.ч. НДС: ';uk='.  У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(ВсегоСумма/6, Шапка.ВалютаДокумента, КодЯзыкаПечать);
										   
	ТабДокумент.Вывести(ОбластьМакета);
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды = Истина;
		Колонка = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды = Истина;
		Колонка = "Код";
	Иначе
		ВыводитьКоды = Ложь;
	КонецЕсли;
	
//****AL
	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		//***
		//Если Не ВыводитьКоды Тогда
		//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		//	Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		//Иначе
		//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		//	Макет.Область("КолонкаКодовТара").ШиринаКолонки+10;
		//КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если Колонка = "Артикул" Тогда
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
				КонецЕсли;
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура.НаименованиеПолное);			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		 		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли; 	
	ОбластьМакета = Макет.ПолучитьОбласть("ОтгрузилПолучил");
	ОбластьМакета.Параметры.Выписал=глЗначениеПеременной("глТекущийПользователь");

	ТабДокумент.Вывести(ОбластьМакета);
	
	возврат ТабДокумент;
КонецФункции

//*** итогом по супервайзеру Горло Донецкого АТО на контрагнта СПД Высоцкий по КС
Функция НакладнаяРасходнаяДНРКС()  Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);// равно КС
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));

		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СУММА(РеализацияТоваровУслуг.Количество) =0 ТОГДА 0 ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество) КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка = &ТорговаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	Группа,
	|	Наименование";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);// равно КС
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка = &ТорговаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяРасходнаяДНРКС";
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
     
    ПараметрыПечати(ТабДокумент); 
	Макет = ПолучитьМакет("НакладнаяРасходнаяДНР");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	КодЯзыкаПечать ="ru";	
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
//	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(МойПокупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "ТОВ ""ВП Роганський м`ясокомбінат""";	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.РеквизитыПоставщика = "Р/с 26007038257, в банке Банк ""Грант"", МФО 351607   , юр. адрес: 61172, Харків, Роганська, дом № 151, тел.: (057) 766-88-78, код по ЕГРПОУ 34389679,ИНН 343896720367, № свид. 100152770, Является плательщиком налога на прибыль на общих основаниях"; //ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	
	//ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
//	ОбластьМакета.Параметры.Заполнить(Шапка);	
	//ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
	//ОбластьМакета.Параметры.РеквизитыПокупателя		= УправлениеМаршрутами.ПолучениеПредставленияАдреса(МойПокупатель,Справочники.ВидыКонтактнойИнформации.НайтиПоКоду("000000025"));
	ОбластьМакета.Параметры.ПредставлениеПокупателя = "ФЛ-П Высоцкий Сергей Николаевич";
	
	ОбластьМакета.Параметры.РеквизитыПокупателя ="юр. адрес: 83120, Донецк, ул. В. Терешковой дом № 35 кв 50,тел.: +38 (062) 349-27-77, ИНН 2826105479, Является плательщиком единого налога (3-я группа)";
	//" Р/с 9999999, в банке Центральный Республиканский Банк, МФО 999999, ДНР, 99999, Донецк, улица, Куйбышева,  дом № 99 В, кв.9, тел.: +38 (062) 999-99-99, ИК  99999999";
	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать); //*** Ю.Ляшенко 11-12-2014
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	ВыводитьКоды = Ложь;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	//Если Не ВыводитьКоды Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
	//										Макет.Область("КолонкаКодов").ШиринаКолонки+5;
	//КонецЕсли;
	//Если НЕ ЕстьСкидки Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
	//										Макет.Область("СуммаБезСкидки").ШиринаКолонки +
	//										Макет.Область("СуммаСкидки").ШиринаКолонки;
	//КонецЕсли;
	//ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки +5;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество =0; 
    ВсегоКолШт      =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаСтрокТовары.Количество=0 тогда
			Продолжить;
		КонецЕсли;
			

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
		//ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Номенклатура.Родитель)+"  -   "+СокрП(ВыборкаСтрокТовары.Номенклатура.Наименование);
		
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное)+?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ХарактеристикаНоменклатуры)," - ","") +ВыборкаСтрокТовары.ХарактеристикаНоменклатуры;				
		ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000224");
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		СтруктураОтбор.Вставить("Номенклатура",ВыборкаСтрокТовары.Номенклатура);
		СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрокТовары.ХарактеристикаНоменклатуры);
		ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
		Цена = 0;
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ОбластьДанных.Параметры.Цена=Цена;
		ТабДокумент.Присоединить(ОбластьДанных);
		//Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
		Скидка = 0;
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСуммы.Параметры.Сумма=ВыборкаСтрокТовары.Количество*Цена;
		ТабДокумент.Присоединить(ОбластьСуммы);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
        
		Сумма          = Сумма       + Окр(ВыборкаСтрокТовары.Количество*Цена,2,1);
		СуммаНДС       = СуммаНДС    + Окр(ВыборкаСтрокТовары.Количество*Цена,2,1)/6;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ЗаполнениеДокументов.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		//Если ВыводитьКоды Тогда
		//	ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		//	ТабДокумент.Присоединить(ОбластьКодов);
		//КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		//Если Не ВыводитьКоды Тогда
		//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		//	Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		//КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			//Если ВыводитьКоды Тогда
			//	Если Колонка = "Артикул" Тогда
			//		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			//	Иначе
			//		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			//	КонецЕсли;
			//	ТабДокумент.Присоединить(ОбластьКодов);
			//КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура.НаименованиеПолное);			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+Формат(ВсегоКоличество,"ЧДЦ=3; ЧН=' '; ЧГ=0")+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести подписи
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Выписал=СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	ТабДокумент.Вывести(ОбластьМакета);	
	Возврат ТабДокумент;
		
КонецФункции // НакладнаяДНРКС()

//*** итогом по супервайзеру Горло Донецкого АТО на контрагнта Колбасный континент по РМК
Функция НакладнаяРасходнаяДНРКК()  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);//не равно КС
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СУММА(РеализацияТоваровУслуг.Количество) =0 ТОГДА 0 ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество) КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка <> &ТорговаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	Группа,
	|	Наименование";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);// не равно КС
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка <> &ТорговаяМарка
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяРасходнаяДНР";
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
     
    ПараметрыПечати(ТабДокумент); 
	Макет = ПолучитьМакет("НакладнаяРасходнаяДНР");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	КодЯзыкаПечать ="ru";	
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
//	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(МойПокупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = "ТОВ ""ВП Роганський м`ясокомбінат""";	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
    ОбластьМакета.Параметры.РеквизитыПоставщика = "Р/с 26007038257, в банке Банк ""Грант"", МФО 351607   , юр. адрес: 61172, Харків, Роганська, дом № 151, тел.: (057) 766-88-78, код по ЕГРПОУ 34389679,ИНН 343896720367, № свид. 100152770, Является плательщиком налога на прибыль на общих основаниях"; //ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ПредставлениеПокупателя =  "Общество с Ограниченной Ответственностью ""Колбасный Континент""";
	ОбластьМакета.Параметры.РеквизитыПокупателя		=  " Р/с 2600500707, в банке Центральный Республиканский Банк, МФО 400019, 83049, Донецк, улица, Куйбышева,  дом № 75 В, кв.12, тел.: +38 (062) 349-27-77, ИК  50001577";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	ВыводитьКоды = Ложь;
	
	ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("ШапкаТаблицы|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
		
	Суффикс = "";
	Если Шапка.УчитыватьНДС Тогда
		Если Шапка.СуммаВключаетНДС Тогда
			Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
		Иначе	
			Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
		КонецЕсли;
		Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
	КонецЕсли;

	ОбластьДанных.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
	ТабДокумент.Присоединить(ОбластьДанных);
	
	ОбластьСуммы.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
	ТабДокумент.Присоединить(ОбластьСуммы);       	

	ОбластьКолонкаТовар = Макет.Область("Товар");
	
	//Если Не ВыводитьКоды Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
	//										Макет.Область("КолонкаКодов").ШиринаКолонки+5;
	//КонецЕсли;
	//Если НЕ ЕстьСкидки Тогда
	//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
	//										Макет.Область("СуммаБезСкидки").ШиринаКолонки +
	//										Макет.Область("СуммаСкидки").ШиринаКолонки;
	//КонецЕсли;
	//ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки +5;

	ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Строка|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество =0; 
    ВсегоКолШт      =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаСтрокТовары.Количество=0 тогда
			Продолжить;
		КонецЕсли;
			

		ОбластьНомера.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ТабДокумент.Вывести(ОбластьНомера);

		ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
//		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Номенклатура.Родитель)+"  -   "+СокрП(ВыборкаСтрокТовары.Номенклатура.Наименование);
//		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Номенклатура.Наименование);		
		ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное)+?(ЗначениеЗаполнено(ВыборкаСтрокТовары.ХарактеристикаНоменклатуры)," - ","") +ВыборкаСтрокТовары.ХарактеристикаНоменклатуры;				
		ТицЦенСсылка = Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000001");
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ТипЦен", ТицЦенСсылка);
		СтруктураОтбор.Вставить("Номенклатура",ВыборкаСтрокТовары.Номенклатура);
		СтруктураОтбор.Вставить("ХарактеристикаНоменклатуры",ВыборкаСтрокТовары.ХарактеристикаНоменклатуры);
		ВыборкаД = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ЭтотОбъект.Дата,СтруктураОтбор);
		Цена = 0;
		Если ВыборкаД <> Неопределено Тогда
			Цена = ВыборкаД.Цена;
		КонецЕсли;
		ОбластьДанных.Параметры.Цена=Цена;
		ТабДокумент.Присоединить(ОбластьДанных);

		//Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
		Скидка = 0;
		ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСуммы.Параметры.Сумма=ВыборкаСтрокТовары.Количество*Цена;
		ТабДокумент.Присоединить(ОбластьСуммы);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
        
		Сумма          = Сумма       + Окр(ВыборкаСтрокТовары.Количество*Цена,2,1);
		СуммаНДС       = СуммаНДС    + Окр(ВыборкаСтрокТовары.Количество*Цена,2,1)/6;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = Сумма       + ВсегоСкидок;

	КонецЦикла;

	// Вывести Итого
	ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
	ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
	ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
	ОбластьСкидок = Макет.ПолучитьОбласть("Итого|Скидка");
	ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

	ТабДокумент.Вывести(ОбластьНомера);
	Если ВыводитьКоды Тогда
		ТабДокумент.Присоединить(ОбластьКодов);
	КонецЕсли;
	ТабДокумент.Присоединить(ОбластьДанных);
	Если ЕстьСкидки Тогда
		ОбластьСкидок.Параметры.ВсегоСкидок    = ВсегоСкидок;
		ОбластьСкидок.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
		ТабДокумент.Присоединить(ОбластьСкидок);
	КонецЕсли;
	ОбластьСуммы.Параметры.Всего = ЗаполнениеДокументов.ФорматСумм(Сумма);
	ТабДокумент.Присоединить(ОбластьСуммы);

	// Вывести ИтогоНДС
	Если Шапка.УчитыватьНДС Тогда
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоНДС|Скидка");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");

		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
		ТабДокумент.Присоединить(ОбластьДанных);
		Если ЕстьСкидки Тогда
			ТабДокумент.Присоединить(ОбластьСкидок);
		КонецЕсли;
		ОбластьСуммы.Параметры.ВсегоНДС = ЗаполнениеДокументов.ФорматСумм(СуммаНДС);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		// добавим строку с итоговой суммой, в случае когда НДС не входит в сумму
		Если НЕ Шапка.СуммаВключаетНДС Тогда
			ОбластьНомера = Макет.ПолучитьОбласть("ИтогоДополнительно|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоДополнительно|КолонкаКодов");
			ОбластьДанных = Макет.ПолучитьОбласть("ИтогоДополнительно|Данные");
			ОбластьСкидок = Макет.ПолучитьОбласть("ИтогоДополнительно|Скидка");
			ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоДополнительно|Сумма");
			
			ТабДокумент.Вывести(ОбластьНомера);
			Если ВыводитьКоды Тогда
				ТабДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			ОбластьДанных.Параметры.Подпись = НСтр("ru='Всего с НДС:';uk='Усього з ПДВ:'",КодЯзыкаПечать);
			ТабДокумент.Присоединить(ОбластьДанных);
			Если ЕстьСкидки Тогда
				ТабДокумент.Присоединить(ОбластьСкидок);
			КонецЕсли;
			ОбластьСуммы.Параметры.Сумма = ЗаполнениеДокументов.ФорматСумм(Сумма + СуммаНДС);
			ТабДокумент.Присоединить(ОбластьСуммы);
		КонецЕсли;
	КонецЕсли;

	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		//Если ВыводитьКоды Тогда
		//	ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
		//	ТабДокумент.Присоединить(ОбластьКодов);
		//КонецЕсли;
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		//Если Не ВыводитьКоды Тогда
		//	ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		//	Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		//КонецЕсли;
		
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			
			//Если ВыводитьКоды Тогда
			//	Если Колонка = "Артикул" Тогда
			//		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Артикул;
			//	Иначе
			//		ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТара.Код;
			//	КонецЕсли;
			//	ТабДокумент.Присоединить(ОбластьКодов);
			//КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура.НаименованиеПолное);			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+Формат(ВсегоКоличество,"ЧДЦ=3; ЧН=' '; ЧГ=0")+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывести подписи
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Выписал=СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	ТабДокумент.Вывести(ОбластьМакета);	
	Возврат ТабДокумент;
КонецФункции // НакладнаяДНР()

Функция ТонныПрописью(КоличествоТонн,КодЯзыка)
	
	ЦелаяЧасть   = Цел(КоличествоТонн);
	ДробнаяЧасть = Окр(КоличествоТонн - ЦелаяЧасть, 3);

	Если ДробнаяЧасть = Окр(ДробнаяЧасть,0) Тогда
		ПараметрыПрописи = ", , , , , , , , 0";
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 1) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, десятая, десятых, десятых, м, 1';uk='ціла ,цілих ,цілих , ж, десята, десятих, десятих, м, 1'",КодЯзыка);
	ИначеЕсли ДробнаяЧасть = Окр(ДробнаяЧасть, 2) Тогда
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, сотая, сотых, сотых, м, 2';uk='ціла ,цілих ,цілих , ж, сота, сотих, сотих, м, 2'",КодЯзыка);
	Иначе
		ПараметрыПрописи = НСтр("ru='целая, целых, целых, ж, тысячная, тысячных, тысячных, м, 3';uk='ціла ,цілих ,цілих , ж, тисячна, тисячних, тисячних, м, 3'",КодЯзыка);
	КонецЕсли;
	
	Возврат ЧислоПрописью(КоличествоТонн,"Л="+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыка)+";ДП=Истина", ПараметрыПрописи);
	
КонецФункции

//***Качественное для КК И  Высоцкого
//печать качественного
Функция  КачественноеСвидетельствоДНР(ЭтоКК=Истина) Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Реализатор КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
	//*******************************         содержимое
	Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	НомерТЧ,
	//|	НомерСтрокиТЧ,
	//|	Номенклатура,
	//|	ВЫРАЗИТЬ(Номенклатура.Наименование КАК СТРОКА(1000)) КАК Товар,
	//|	Номенклатура.Код     КАК Код,
	//|	Номенклатура.Артикул КАК Артикул,
	//|	Количество,
	//|	КоличествоМест,
	//|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	//|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	//|	Цена,
	//|	Сумма,
	//|	СуммаНДС,
	//|	ПроцентСкидкиНаценки КАК Скидка,
	//|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	//|	ХарактеристикаНоменклатуры КАК Характеристика,
	//|	СерияНоменклатуры КАК Серия
	
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);//не равно КС
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерТЧ,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СУММА(РеализацияТоваровУслуг.Количество) =0 ТОГДА 0 ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество) КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка "+?(ЭтоКК,"<>","=")+ " &ТорговаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ,
	|	Группа,
	|	Наименование";
	
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Качественное";
	ПараметрыПечати(ТабДокумент);
	Макет = МойОбъект.ПолучитьМакет("Качественное");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НомерДок = "ПОСВІДЧЕННЯ ПРО ЯКІСТЬ №___________";
	ОбластьМакета.Параметры.ПредставлениеПоставщика =  "ТОВ ""ВП Роганський м`ясокомбінат""" + "   Адреса: 61172, м.Харків, вул. Роганська, 151.";
	ОбластьМакета.Параметры.Отправитель =  "ТОВ ""ВП Роганський м`ясокомбінат""" +"   ( експлуатаційний дозвіл № 20 29 20 Mt)";
	Если ЭтоКК тогда
		ОбластьМакета.Параметры.ПредставлениеПокупателя =  "Общество с Ограниченной Ответственностью ""Колбасный Континент""";
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПокупателя =  "ФЛ-П Высоцкий Сергей Николаевич";
	КонецЕсли;	
	
	ОбластьМакета.Параметры.ДатаДок = "Дата відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+"  вид і номер транспортного засобу ___________________ ";
	ОбластьМакета.Параметры.НомерДок2 = " Накладна (сертифікація) №  "+МойОбъект.Номер+" від "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 " + " для реалізації";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
    ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
	
	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
	    //чтение свойств номенклатуры
		ЗапросРегСвед = Новый Запрос("ВЫБРАТЬ
				| *
				| ИЗ
				| РегистрСведений.ЗначенияСвойствОбъектов
				| ГДЕ Объект=&ООО");

		ЗапросРегСвед.УстановитьПараметр("ООО",ВыборкаСтрокТовары.Номенклатура);
		РегСвед =ЗапросРегСвед.Выполнить().Выгрузить();
		Для Каждого Запись ИЗ РегСвед Цикл   
			//Предупреждение("Свойство "+Запись.Свойство+"   "+"Запись.Значение "+ Запись.Значение, 10);
			Если СокрЛП(Запись.Свойство)="Время хранения"  Тогда
				ВрХранения=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Температура хранения"   Тогда
				Темп=Запись.Значение;
			КонецЕсли;	
			Если СокрЛП(Запись.Свойство)="Оболочка"    Тогда
				Обол=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Упаковка"    Тогда
				Упак=Запись.Значение;
			КонецЕсли;		
			Если СокрЛП(Запись.Свойство)="Влажность хранения" Тогда
				Влаж=Запись.Значение;
			КонецЕсли;		
		КонецЦикла;		
	
		ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
		ОбластьДанных.Параметры.Артикул= ВыборкаСтрокТовары.Номенклатура.Артикул;
		ОбластьДанных.Параметры.Влажность=Влаж;
		ОбластьДанных.Параметры.Температура=Темп;
		ОбластьДанных.Параметры.СрокГодности=ВрХранения;
		ОбластьДанных.Параметры.Количество=ВыборкаСтрокТовары.Количество;
		//ОбластьДанных.Параметры.ДатаИВремя = Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 ";
		ОбластьДанных.Параметры.ДатаИВремя = Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yyyy")+" 08:00:00 ";
		ТабДокумент.Вывести(ОбластьДанных);
        ВсегоКоличество=ВсегоКоличество+ ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес=0 ,1,ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Вес);        
	КонецЦикла;
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество= ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
    ТабДокумент.Вывести(ОбластьИтогоКоличество);
	Областьстандартов = Макет.ПолучитьОбласть("Стандарты");
	ТабДокумент.Вывести(Областьстандартов);
    ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
	ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельства()

//печать декларациипроизводителя
Функция  ДекларацияПроизводителяДНР(ЭтоКК=Истина) Экспорт
	МойОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
	//*****************************  заголовок
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", МойОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	Контрагент КАК Покупатель
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	//СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	//*******************************         содержимое
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", МойОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("Дата2", КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ТорговаяМарка", Перечисления.ТорговыеМарки.КС);//не равно КС
	Запрос.УстановитьПараметр("Супервайзер", Справочники.Контрагенты.НайтиПоКоду("000003133"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК Наименование,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель КАК Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СУММА(РеализацияТоваровУслуг.Количество) =0 ТОГДА 0 ИНАЧЕ СУММА(РеализацияТоваровУслуг.Сумма) / СУММА(РеализацияТоваровУслуг.Количество) КОНЕЦ КАК Цена,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС
	| ПОМЕСТИТЬ Реализация
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка.Дата >= &Дата1
	|	И РеализацияТоваровУслуг.Ссылка.Дата <= &Дата2
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.Супервайзер = &Супервайзер
	|	И РеализацияТоваровУслуг.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Ссылка.Контрагент.ТорговаяМарка "+?(ЭтоКК,"<>","=")+ " &ТорговаяМарка
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель,
	|	РеализацияТоваровУслуг.Номенклатура.Родитель.Наименование
	|;
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование КАК Группа,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры КАК Упаковка,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя КАК УсловияХранения,
	|	ЗначенияСвойствОбъектов.Значение КАК Влажность,
	|	ЗначенияСвойствОбъектов1.Значение КАК ФормаВид,
	|	ЗначенияСвойствОбъектов2.Значение КАК ВДСЕЕ,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул  КАК Артикул
	|ИЗ
	|	Реализация КАК РеализацияТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыНоменклатуры КАК ТекстыНоменклатуры
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ТекстыНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры = ТекстыНоменклатуры.ХарактеристикаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	|			И (ЗначенияСвойствОбъектов.Свойство.Код = ""00000000019"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	|			И (ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000032"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов2
	|		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов2.Объект
	|			И (ЗначенияСвойствОбъектов2.Свойство.Код = ""00000000034"")
	|ГДЕ
	|	
	|	 РеализацияТоваровУслугТовары.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
	|	ТекстыНоменклатуры.ТекстДекларацииПроизводителя,
	|	ЗначенияСвойствОбъектов.Значение,
	|	ЗначенияСвойствОбъектов1.Значение,
	|	ЗначенияСвойствОбъектов2.Значение,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура.Родитель.Наименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	
	ЗапросТУ = Новый запрос;
//|	ЗначенияСвойствОбъектов.Значение КАК ДСТУ,	
	ЗапросТУ.Текст="ВЫБРАТЬ
				   |	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ДСТУ,
	               |	ЗначенияСвойствОбъектов1.Значение КАК ВДСЕЕ,
	               |	РеализацияТоваровУслугТовары.Номенклатура
	               |ПОМЕСТИТЬ ТУ
	               |ИЗ
	               |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов.Объект
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов1
	               |		ПО РеализацияТоваровУслугТовары.Номенклатура = ЗначенияСвойствОбъектов1.Объект
	               |ГДЕ
	               |	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	               |	И ЗначенияСвойствОбъектов.Свойство.Код = ""00000000033""
	               |	И ЗначенияСвойствОбъектов1.Свойство.Код = ""00000000034""
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ,
	               |	КОЛИЧЕСТВО(ТУ.Номенклатура) КАК Номенклатура
	               |ИЗ
	               |	ТУ КАК ТУ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТУ.ДСТУ,
	               |	ТУ.ВДСЕЕ";
	ЗапросТУ.УстановитьПараметр("ССылка",МойОбъект.Ссылка);
	ТЗНормДок = ЗапросТУ.Выполнить().Выгрузить();			   
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ДекларацииПроизводителя";
    
     //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
    
    ПараметрыПечати(ТабДокумент);
    
    Макет = МойОбъект.ПолучитьМакет("ДекларацияПроизводителя");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

//найдем строку декларации
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   СправочникВетеринарныхСвидетельств.Ссылка,
        |   СправочникВетеринарныхСвидетельств.Код,
        |   СправочникВетеринарныхСвидетельств.Наименование,
        |   СправочникВетеринарныхСвидетельств.Дата,
        |   СправочникВетеринарныхСвидетельств.Комментарий,
        |   СправочникВетеринарныхСвидетельств.НомерДекларацииВиробника
        |ИЗ
        |   Справочник.СправочникВетеринарныхСвидетельств КАК СправочникВетеринарныхСвидетельств
        |ГДЕ
        |   СправочникВетеринарныхСвидетельств.Дата = &Дата
        |   И СправочникВетеринарныхСвидетельств.ПометкаУдаления = ЛОЖЬ";

    Запрос.УстановитьПараметр("Дата", НачалоДня(ЭтотОбъект.Дата));
    РезультатСВС = Запрос.Выполнить();
    ВыборкаДЗ = РезультатСВС.Выбрать();
    СтрокаСвидетельств="";
    МойНомерДекларации="";
    Если не РезультатСВС.Пустой() тогда 
        ВыборкаДЗ.Следующий();
        МойНомерДекларации=ВыборкаДЗ.НомерДекларацииВиробника;
        СтрокаСвидетельств=ВыборкаДЗ.Наименование;
    КонецЕсли;
 
    
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
    Если СокрЛП(СтрокаСвидетельств)="" тогда
        СтрЗаголовка="Декларація виробника №___________";
    Иначе    
        СтрЗаголовка        =СтрокаСвидетельств;
        СтрЗаголовка="Декларація виробника № "+СокрЛП(МойНомерДекларации);
    КонецЕсли;
    
    ОбластьМакета.Параметры.ЗаголовокДокумента = СтрЗаголовка;
	
	Если ЭтоКК тогда
		ОбластьМакета.Параметры.Покупатель = "Товароотримувач:  "+"Общество с Ограниченной Ответственностью ""Колбасный Континент""";
	Иначе
		ОбластьМакета.Параметры.Покупатель = "Товароотримувач:  "+"ФЛ-П Высоцкий Сергей Николаевич";
	КонецЕсли;	
	
	НомерНакладной=СокрЛП(МойОбъект.Номер);
	ОбластьМакета.Параметры.ДатаПроизводстваНомерНАкладной = "Дата виробництва та  відвантаження  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".  Накладна № "+Формат(Число(СокрЛП(НомерНакладной)),"ЧГ=0")+"  від  "+Формат(МойОбъект.Дата,"ДФ=dd.MM.yyyy")+".";//+" 08:00:00 для реалізації";
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьШапкиТаблицы= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьШапкиТаблицы);
	
	ВсегоСкидок    = 0;
	строкаНомер= 0;
	
	
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
    
	    ОбластьДанных=Макет.ПолучитьОбласть("Строка");

		ОбластьДанных.Параметры.Номенклатура 	= ВыборкаСтрокТовары.Номенклатура.НаименованиеПолное;
		ОбластьДанных.Параметры.Количество		= ВыборкаСтрокТовары.Количество;
		ОбластьДанных.Параметры.ТекстВидУпаковки= ВыборкаСтрокТовары.Упаковка;
		ОбластьДанных.Параметры.Влажность       = ВыборкаСтрокТовары.Влажность;
		ОбластьДанных.Параметры.Условия			= ВыборкаСтрокТовары.УсловияХранения;	
		ОбластьДанных.Параметры.Форма			= ВыборкаСтрокТовары.ФормаВид;  

		Шаг=0;
		Пока Шаг < ТЗНормДок.Количество() Цикл
			Если Врег(СокрЛП(ТЗНормДок[Шаг].ДСТУ))=Врег(СокрЛП(ВыборкаСтрокТовары.Артикул))
				И Врег(СокрЛП(ТЗНормДок[Шаг].ВДСЕЕ))=Врег(СокрЛП(ВыборкаСтрокТовары.ВДСЕЕ)) ТОГДА
				прервать;
			КонецЕсли;
			Шаг=Шаг+1;
		КонецЦикла;
		ОбластьДанных.Параметры.НомерСтроки =	Формат(строкаНомер+1,"ЧДЦ=0; ЧГ=0");
		ОбластьДанных.Параметры.СсылкаДСТУ	=	Формат(Шаг+1,"ЧДЦ=0; ЧГ=0");
		
		строкаНомер=строкаНомер+1;
		ТабДокумент.Вывести(ОбластьДанных);
	КонецЦикла;
	ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Заголовок2");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьДанных=Макет.ПолучитьОбласть("Шапка2");
	ТабДокумент.Вывести(ОбластьДанных);
	Шаг=0;
	ОбластьДанных=Макет.ПолучитьОбласть("Строка2");
	Пока Шаг < ТЗНормДок.Количество() Цикл
		ОбластьДанных.Параметры.НомерТУ=Шаг+1;
		ОбластьДанных.Параметры.ТекстДСТУ=ТЗНормДок[Шаг].ДСТУ;
		ОбластьДанных.Параметры.ТекстВДСЕЕ=ТЗНормДок[Шаг].ВДСЕЕ;
		ТабДокумент.Вывести(ОбластьДанных);
		Шаг=Шаг+1;
	КонецЦикла;

	ОбластьДанных=Макет.ПолучитьОбласть("КонецТаблицы2");
	ТабДокумент.Вывести(ОбластьДанных);
	
	ОбластьОсобыеОтметки = Макет.ПолучитьОбласть("ОсобыеОтметки");	
	Текст_ЭВ="";
	ЗапросЭВ = новый запрос;
	ЗапросЭВ.Текст="ВЫБРАТЬ
	               |	СправочникЭкспертноеВетеринарноеЗаключение.Дата КАК Дата,
	               |	СправочникЭкспертноеВетеринарноеЗаключение.Наименование,
				   |	СправочникЭкспертноеВетеринарноеЗаключение.ссылка
	               |ИЗ
	               |	Справочник.СправочникЭкспертноеВетеринарноеЗаключение КАК СправочникЭкспертноеВетеринарноеЗаключение
	               |ГДЕ
	               |	СправочникЭкспертноеВетеринарноеЗаключение.ПометкаУдаления = ЛОЖЬ
	               |	И СправочникЭкспертноеВетеринарноеЗаключение.Дата <= &Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата УБЫВ";
	
	ЗапросЭВ.УстановитьПараметр("Дата",КонецДня(МойОбъект.Дата));
	Рез_ЭВ= ЗапросЭВ.Выполнить().Выбрать();
	//Текст_ЭВ="";
	//Текст_ЭВ=РегистрыСведений.ЭкспертноеВетеринарноеЗаключение.
	Если Рез_ЭВ.Количество()>0 тогда 
		Рез_ЭВ.Следующий();
		Текст_ЭВ=Рез_ЭВ.ссылка;
	КонецЕсли;	
	ОбластьОсобыеОтметки.Параметры.ЭкспертВисновок=Текст_ЭВ;
    СтрокаВС="Серія ______№ _________________________від ____________"+Формат(ЭтотОбъект.Дата,"ДФ=yyyy")+" р.";
    ОбластьОсобыеОтметки.Параметры.СтрокаВС=?(СокрЛП(СтрокаСвидетельств)="",СтрокаВС,СокрЛП(СтрокаСвидетельств));
    ОбластьОсобыеОтметки.Параметры.Технолог=?(СокрЛП(ЭтотОбъект.Контрагент.Код)="000002616" ИЛИ 
                            СокрЛП(ЭтотОбъект.Контрагент.Код)="000002617"
                            ИЛИ ИСТИНА,"Ковтун О.I." ,"");
                            
    //ОбластьОсобыеОтметки.Параметры.ВетВрач="Вет. врач "+СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
    
	ТабДокумент.Вывести(ОбластьОсобыеОтметки);
	возврат ТабДокумент;
КонецФункции // ПечатьКачественногоСвидетельства()

// Функция осуществляет запуск обработки формирующей печатную форму 1-ТН - ТТН
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Неопределено> – Загрулшка для УниверсальныеМеханизмы.НапечататьДокумент(), т.к. табличный 
//                   документ формирутеся вызываемой обработкой.
//
Функция ПечатьТТН_Региона()Экспорт
	
	ОбработкаПечати = Обработки.ПечатьТТНРегиона.ПолучитьФорму("Форма");
	
	ОбработкаПечати.Дата					= ЭтотОбъект.Дата;
	ОбработкаПечати.Регион					= ЭтотОбъект.Контрагент.Регион;
	
	ОбработкаПечати.Открыть();
	Возврат Неопределено;
КонецФункции // ПечатьТТН()

Функция ЭтапыОтгрузкиПечать() Экспорт
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	ЖурналСостоянийДокументовРеализации.Пользователь,
	|	ЖурналСостоянийДокументовРеализации.Документ,
	|	ЖурналСостоянийДокументовРеализации.Дата КАК Дата,
	|	ЖурналСостоянийДокументовРеализации.Состояние
	|ИЗ
	|	РегистрСведений.ЖурналСостоянийДокументовРеализации КАК ЖурналСостоянийДокументовРеализации
	|ГДЕ
	|	ЖурналСостоянийДокументовРеализации.Документ = &Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	Шапка = ЗапросШапка.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Этапы";
	Макет       = ПолучитьМакет("ЭтапыОтгрузки");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Этапы отгрузки: "+ЭтотОбъект.Ссылка;
	ТабДокумент.Вывести(ОбластьМакета);                                            
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);                                            
	
	Шаг=1;
	Пока Шапка.Следующий() Цикл 
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
        ОбластьМакета.Параметры.НомерСтроки = Формат(Шаг,"ЧДЦ=0; ЧГ=0");
		ОбластьМакета.Параметры.Пользователь= Шапка.Пользователь;
		ОбластьМакета.Параметры.Дата 		= Формат(Шапка.Дата,"ДЛФ=DDT");
		ОбластьМакета.Параметры.Состояние 	= Шапка.Состояние;
		ТабДокумент.Вывести(ОбластьМакета);
		Шаг=Шаг+1;
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ОперацииОтгрузкиПечать() Экспорт
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура,
	|	СУММА(РеализацияТоваровУслугТовары.Количество + РеализацияТоваровУслугТовары.СкидкаНаВес) КАК Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка.Ссылка = &Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура";
	Шапка = ЗапросШапка.Выполнить().Выбрать();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ОперацииОтгрузки";
	Макет       = ПолучитьМакет("ОперацииОтгрузки");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Формируем заголовок
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ТекстЗаголовка = "Операции отгрузки: "+ЭтотОбъект.Ссылка;
	ТабДокумент.Вывести(ОбластьМакета);                                            
	ОбластьМакета = Макет.ПолучитьОбласть("Регион");
	ОбластьМакета.Параметры.Регион = "Регион - "+СокрЛП(ЭтотОбъект.Контрагент.Регион.Наименование)+
				", Менеджер - "+СокрЛП(ЭтотОбъект.Реализатор.Наименование)+
				", Контрагент - "+СокрЛП(ЭтотОбъект.Контрагент.Наименование);
	ТабДокумент.Вывести(ОбластьМакета);                                            

	ОбластьМакета = Макет.ПолучитьОбласть("Адрес");
	ОбластьМакета.Параметры.Адрес = СокрЛП(ЭтотОбъект.АдресДоставки);
	ТабДокумент.Вывести(ОбластьМакета);                                            
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);                                            
	
	Шаг=1;
	Пока Шапка.Следующий() Цикл 
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаГлавная");
        ОбластьМакета.Параметры.НомерСтроки = Формат(Шаг,"ЧДЦ=0; ЧГ=0");
		ОбластьМакета.Параметры.Количество 		= Формат(Шапка.Количество,"ЧДЦ=3; ЧГ=0");
		ОбластьМакета.Параметры.Номенклатура 	= Шапка.Номенклатура;
		ТабДокумент.Вывести(ОбластьМакета);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацииЭкспедицииПоДолжностям.Номенклатура,
		|	ОперацииЭкспедицииПоДолжностям.Количество,
		|	ОперацииЭкспедицииПоДолжностям.МетодыВводаДанных,
		|	ОперацииЭкспедицииПоДолжностям.Дата КАК Дата,
		|	ОперацииЭкспедицииПоДолжностям.РабочееМесто,
		|	ОперацииЭкспедицииПоДолжностям.Должность,
		|	ОперацииЭкспедицииПоДолжностям.Товаровед,
		|	ОперацииЭкспедицииПоДолжностям.Весовщик,
		|	ОперацииЭкспедицииПоДолжностям.Маркировщик,
		|	ОперацииЭкспедицииПоДолжностям.Комплектовщик
		|ИЗ
		|	РегистрСведений.ОперацииЭкспедицииПоДолжностям КАК ОперацииЭкспедицииПоДолжностям
		|ГДЕ
		|	ОперацииЭкспедицииПоДолжностям.Документ = &Документ
		|	И ОперацииЭкспедицииПоДолжностям.Номенклатура = &Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		Запрос.УстановитьПараметр("Документ", ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("Номенклатура", Шапка.Номенклатура);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Степ=0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка");
			ОбластьМакета.Параметры.Номенклатура 	= ВыборкаДетальныеЗаписи.Номенклатура;
			ОбластьМакета.Параметры.Количество 		= Формат(ВыборкаДетальныеЗаписи.Количество,"ЧДЦ=3; ЧГ=0");
			ОбластьМакета.Параметры.Дата 			= ВыборкаДетальныеЗаписи.Дата;
			ОбластьМакета.Параметры.Метод			= ВыборкаДетальныеЗаписи.МетодыВводаДанных;
			ОбластьМакета.Параметры.Товаровед 		= ВыборкаДетальныеЗаписи.Товаровед;
			ОбластьМакета.Параметры.Весовщик 		= ВыборкаДетальныеЗаписи.Весовщик;
			ОбластьМакета.Параметры.Маркировщик 	= ВыборкаДетальныеЗаписи.Маркировщик;
			ОбластьМакета.Параметры.Комплектовщик 	= ВыборкаДетальныеЗаписи.Комплектовщик;
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		Шаг=Шаг+1;
	КонецЦикла;

	// Вывести Итого
	ОбластьМакета = Макет.ПолучитьОбласть("Итоги");
	ТабДокумент.Вывести(ОбластьМакета);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьАктаОбОказанииУслуг()

Функция ПолучитьЕдиницуУпаковка(Номенклатура,Характеристика) Экспорт
	ЕдУпаковки=0;
	Если Номенклатура=неопределено  тогда
		возврат ЕдУпаковки;
	КонецЕсли;	
	Если Характеристика=неопределено  тогда
		 Характеристика=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыКолбасы.Владелец,
		|	ПараметрыКолбасы.ХарактеристикаНоменклатуры,
		|	ПараметрыКолбасы.ВесЕдиницы
		|ИЗ
		|	РегистрСведений.ПараметрыКолбасы КАК ПараметрыКолбасы
		|ГДЕ
		|	ПараметрыКолбасы.Владелец = &Владелец
		|	И ПараметрыКолбасы.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";

	Запрос.УстановитьПараметр("Владелец", Номенклатура);
	Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", Характеристика);
	Результат = Запрос.Выполнить();
	Если  не Результат.Пустой() тогда
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        	    ЕдУпаковки=ВыборкаДетальныеЗаписи.ВесЕдиницы;
		КонецЦикла;
    КонецЕсли;
	возврат ЕдУпаковки;
КонецФункции

Функция ПечатьЗаявкиПоСекциям() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Реализатор КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьСерия,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	////Определение контрагента для кода стикера Бизерба
	//КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ)<>"" тогда
		ЗапросКА = Новый Запрос;
		ЗапросКА.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыВесов.Контрагент КАК Контрагент,
		|	ШтрихкодыВесов.Владелец.Наименование КАК Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры КАК Упаковка,
		|	ШтрихкодыВесов.Порция КАК Порция,
		|	ШтрихкодыВесов.Код КАК КодPLU,
		|	ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ КАК ОКПО,
		|	ШтрихкодыВесов.Контрагент.ТорговаяМарка
		|ИЗ
		|	РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
		|ГДЕ
		|	ШтрихкодыВесов.Контрагент.ДляBizerba = ИСТИНА
		|	И ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ = &ОКПО
		|	И ШтрихкодыВесов.Владелец.Родитель.Код <> ""00000000742""
		//|	И ШтрихкодыВесов.Контрагент.ТорговаяМарка = &ТорговаяМарка
		|	И ВЫБОР
		|			КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|				ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.РМК)
		|						ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка <> ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодыВесов.Контрагент.Наименование,
		|	Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры,
		|	Порция";
		
		ЗапросКА.УстановитьПараметр("ОКПО", СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ));
		ЗапросКА.УстановитьПараметр("ТорговаяМарка", ЭтотОбъект.Контрагент.ТорговаяМарка);
		РезультатКА=ЗапросКА.Выполнить();
		Если не РезультатКА.Пустой() тогда
			ВыборкаДетальныеЗаписиКА=РезультатКА.Выбрать();
			ВыборкаДетальныеЗаписиКА.Следующий();
			КонтаргентДляБизерба=ВыборкаДетальныеЗаписиКА.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтаргентДляБизерба=неопределено тогда
		КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", КонтаргентДляБизерба);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслуг.Порции КАК Порции,
	|	РеализацияТоваровУслуг.Стикер КАК Стикер,
	|	ШтрихкодыВесов.Код КАК КодPLU,
	|	СУММА(РеализацияТоваровУслуг.КоличествоЗаявки) КАК КоличествоЗаявки,
	|	СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное, МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное) КАК СТРОКА(150)) КАК Товар,
	|	ВЫБОР КОГДА 
	|		ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование,"""")="""" 
	|			ТОГДА """" 
	|		ИНАЧЕ ПОДСТРОКА(МестаХраненияНоменклатуры.МестоХранения.Наименование, 0, 1) КОНЕЦ КАК Секция,	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование, """") = """"
	|			ТОГДА РеализацияТоваровУслуг.НомерСтроки
	|		ИНАЧЕ МестаХраненияНоменклатуры.МестоХранения.Наименование
	|	КОНЕЦ КАК АдресХранения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|		ПО РеализацияТоваровУслуг.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = МестаХраненияНоменклатуры.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = МестаХраненияНоменклатуры.Порции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
	|		ПО РеализацияТоваровУслуг.Номенклатура = ШтрихкодыВесов.Владелец
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = ШтрихкодыВесов.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = ШтрихкодыВесов.Порция
	|			И (ШтрихкодыВесов.Контрагент = &Контрагент)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И РеализацияТоваровУслуг.КоличествоЗаявки <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Порции,
	|	РеализацияТоваровУслуг.Стикер,
	|	МестаХраненияНоменклатуры.МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ШтрихкодыВесов.Код,
	|	ВЫБОР КОГДА 
	|		ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование,"""")=""""
	|			ТОГДА """" 
	|		ИНАЧЕ ПОДСТРОКА(МестаХраненияНоменклатуры.МестоХранения.Наименование, 0, 1) КОНЕЦ ,
	|	ПОДСТРОКА(МестаХраненияНоменклатуры.МестоХранения.Наименование, 0, 1),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование, """") = """"
	|			ТОГДА РеализацияТоваровУслуг.НомерСтроки
	|		ИНАЧЕ МестаХраненияНоменклатуры.МестоХранения.Наименование
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное, МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное) КАК СТРОКА(150))
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияНоменклатуры.МестоХранения.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выбрать();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ЗаявкаПоСекциям";
	ЭтотОбъект.ПараметрыПечати(ТабДокумент);
	Макет = ЭтотОбъект.ПолучитьМакет("ЗаявкаНаСекции");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ТекстЗаголовка = "Заявка № "+Формат(ЧИСЛО(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0")+" от "+Формат(ЭтотОбъект.ЗаявкаДата,"ДФ=dd.MM.yy")+ 
	" на "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy");
	ОбластьМакета.Параметры.ТорговаяМарка			=?(ЭтотОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС,"КС","");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЭтотОбъект.Реализатор<>Справочники.Контрагенты.ПустаяСсылка() тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭтотОбъект.Реализатор.Наименование;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика =" ";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ЭтотОбъект.Контрагент.Наименование +" "+ЭтотОбъект.АдресДоставки; 
	//ОбластьМакета.Параметры.УсловиеСтикирования  = "Стикер " +?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка()," РМК",СокрЛП(КонтаргентДляБизерба.Наименование));
	ОбластьМакета.Параметры.УсловиеСтикирования  = ?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка(),ЭтотОбъект.Контрагент.УсловиеСтикирования,"Стикер " +СокрЛП(КонтаргентДляБизерба.Наименование));	
	ОбластьМакета.Параметры.МаршрутныйЛист="М/Л - "+СокрЛП(МаршрутныйЛист.НазваниеМаршрута)+" "+Формат(МаршрутныйЛист.ДатаПогрузки,"ДЛФ=DT");
	ОбластьМакета.Параметры.Комментарий				= Шапка.Комментарий;
	ОбластьМакета.Параметры.БазовыйМаршрут          ="Б/М - "+СокрЛП(ЭтотОбъект.БазовыйМаршрут.Наименование);
	//***ШК
	ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
	ОбластьМакета.Рисунки.D1.Объект.ТипКода    =   1;
	СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
	ШтрихКод=УправлениеРаботойСоСтикером.ПолучитьКонтрольноеЧислоШК13(СтрШК);
	ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьСекции	= Макет.ПолучитьОбласть("Секция");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	ОбластьТД 		= Макет.ПолучитьОбласть("ШапкаТаблицы");			
	ТабДокумент.Вывести(ОбластьТД);
	
	Пока ЗапросТовары.СледующийПоЗначениюПоля("Секция") цикл
		Если НЕ ЗначениеЗаполнено(ЗапросТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьТД 		= Макет.ПолучитьОбласть("Секция");			
		Если ЗапросТовары.Секция="A" Тогда
			ОбластьТД.Параметры.Секция_0=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="B" Тогда	
			ОбластьТД.Параметры.Секция_1=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="C" Тогда	
			ОбластьТД.Параметры.Секция_2=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="D" Тогда	
			ОбластьТД.Параметры.Секция_3=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="E" Тогда	
			ОбластьТД.Параметры.Секция_4=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="F" Тогда	
			ОбластьТД.Параметры.Секция_5=ЗапросТовары.Секция;
		ИНАЧЕ	
			ОбластьТД.Параметры.Секция_0="?";
			ОбластьТД.Параметры.Секция_1="?";
			ОбластьТД.Параметры.Секция_2="?";
			ОбластьТД.Параметры.Секция_3="?";
			ОбластьТД.Параметры.Секция_4="?";
			ОбластьТД.Параметры.Секция_5="?";
		КонецЕсли; 
        ТабДокумент.Вывести(ОбластьТД);
		НомерВГруппе=1;	
		Пока ЗапросТовары.СледующийПоЗначениюПоля("АдресХранения") цикл
			ОбластьТД 		= Макет.ПолучитьОбласть("Строка");	
			ОбластьТД.Параметры.НомерСтроки = Формат(НомерВГруппе,"ЧДЦ=0; ЧГ=0");
			ОбластьТД.Параметры.АдресТовара	= ?(ЗапросТовары.Секция=NULL,"",СокрЛП(ЗапросТовары.АдресХранения));
			ОбластьТД.Параметры.КоличествоЗаявки=Формат(ЗапросТовары.КоличествоЗаявки,"ЧДЦ=3; ЧГ=0");
			ОбластьТД.Параметры.Упаковка= СокрЛП(ЗапросТовары.Характеристика)+" "+СокрЛП(ЗапросТовары.Порции);
			ОбластьТД.Параметры.Стикеры=?(ЗапросТовары.Стикер=Истина,"б/стик.",ЗапросТовары.КодPLU);
			//ОбластьТД.Параметры.Товар 	= ?(ЗапросТовары.Секция="",СокрЛП(ЗапросТовары.Номенклатура.Наименование),"");//+++151223 Гаврюк.
			ОбластьТД.Параметры.Товар 	= СокрЛП(ЗапросТовары.Номенклатура.Наименование);//+++151224 Гаврюк.
			ОбластьТД.Параметры.ЕдиницаИзмерения = ЗапросТовары.ЕдиницаИзмерения;
			ЕдУпаковки=ПолучитьЕдиницуУпаковка(ЗапросТовары.Номенклатура,ЗапросТовары.Характеристика);
			ОбластьТД.Параметры.Штук 	= ?(ЕдУпаковки=0,"",Формат(Окр(ЗапросТовары.КоличествоЗаявки/ЕдУпаковки,0,2),"ЧДЦ=0; ЧГ=0"));
			ТабДокумент.Вывести(ОбластьТД);
			ВсегоКоличество=ВсегоКоличество+ЗапросТовары.КоличествоЗаявки;
			НомерВГруппе=НомерВГруппе+1;
		КонецЦикла;
	КонецЦикла; 
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ВремяПечати	 = Формат(ТекущаяДата(),"ДЛФ=DT");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество = ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
	ТабДокумент.Вывести(ОбластьИтогоКоличество);
	
	Возврат ТабДокумент;	
КонецФункции // ПечатьЗаявкиПоСекциям()

Функция ПечатьНедогрузовПоСекциям() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,
	|	РеализацияТоваровУслуг.Сделка,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Реализатор КАК Поставщик,
	|	РеализацияТоваровУслуг.Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	РеализацияТоваровУслуг.ДоверенностьСерия,
	|	РеализацияТоваровУслуг.ДоверенностьНомер,
	|	РеализацияТоваровУслуг.ДоверенностьДата,
	|	РеализацияТоваровУслуг.ДоверенностьПолучил,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	////Определение контрагента для кода стикера Бизерба
	//КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	Если СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ)<>"" тогда
		ЗапросКА = Новый Запрос;
		ЗапросКА.Текст = 
		"ВЫБРАТЬ
		|	ШтрихкодыВесов.Контрагент КАК Контрагент,
		|	ШтрихкодыВесов.Владелец.Наименование КАК Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры КАК Упаковка,
		|	ШтрихкодыВесов.Порция КАК Порция,
		|	ШтрихкодыВесов.Код КАК КодPLU,
		|	ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ КАК ОКПО,
		|	ШтрихкодыВесов.Контрагент.ТорговаяМарка
		|ИЗ
		|	РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
		|ГДЕ
		|	ШтрихкодыВесов.Контрагент.ДляBizerba = ИСТИНА
		|	И ШтрихкодыВесов.Контрагент.КодПоЕДРПОУ = &ОКПО
		|	И ШтрихкодыВесов.Владелец.Родитель.Код <> ""00000000742""
		//|	И ШтрихкодыВесов.Контрагент.ТорговаяМарка = &ТорговаяМарка
		|	И ВЫБОР
		|			КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|				ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|			ИНАЧЕ ВЫБОР
		|					КОГДА &ТорговаяМарка = ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.РМК)
		|						ТОГДА ШтрихкодыВесов.Контрагент.ТорговаяМарка <> ЗНАЧЕНИЕ(Перечисление.ТорговыеМарки.КС)
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ШтрихкодыВесов.Контрагент.Наименование,
		|	Товар,
		|	ШтрихкодыВесов.ХарактеристикаНоменклатуры,
		|	Порция";
		
		ЗапросКА.УстановитьПараметр("ОКПО", СокрЛП(ЭтотОбъект.Контрагент.КодПоЕДРПОУ));
		ЗапросКА.УстановитьПараметр("ТорговаяМарка", ЭтотОбъект.Контрагент.ТорговаяМарка);
		РезультатКА=ЗапросКА.Выполнить();
		Если не РезультатКА.Пустой() тогда
			ВыборкаДетальныеЗаписиКА=РезультатКА.Выбрать();
			ВыборкаДетальныеЗаписиКА.Следующий();
			КонтаргентДляБизерба=ВыборкаДетальныеЗаписиКА.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтаргентДляБизерба=неопределено тогда
		КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", КонтаргентДляБизерба);
	Запрос.Текст =	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры КАК СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры КАК Характеристика,
	|	РеализацияТоваровУслуг.Порции КАК Порции,
	|	РеализацияТоваровУслуг.Стикер КАК Стикер,
	|	ШтрихкодыВесов.Код КАК КодPLU,
	|	СУММА(РеализацияТоваровУслуг.КоличествоЗаявки-РеализацияТоваровУслуг.Количество) КАК КоличествоЗаявки,
	|	СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МестаХраненияНоменклатуры.МестоХранения КАК МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное, МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное) КАК СТРОКА(150)) КАК Товар,
	|	ПОДСТРОКА(МестаХраненияНоменклатуры.МестоХранения.Наименование, 0, 1) КАК Секция,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование, """") = """"
	|			ТОГДА РеализацияТоваровУслуг.НомерСтроки
	|		ИНАЧЕ МестаХраненияНоменклатуры.МестоХранения.Наименование
	|	КОНЕЦ КАК АдресХранения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестаХраненияНоменклатуры КАК МестаХраненияНоменклатуры
	|		ПО РеализацияТоваровУслуг.Номенклатура = МестаХраненияНоменклатуры.Номенклатура
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = МестаХраненияНоменклатуры.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = МестаХраненияНоменклатуры.Порции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыВесов КАК ШтрихкодыВесов
	|		ПО РеализацияТоваровУслуг.Номенклатура = ШтрихкодыВесов.Владелец
	|			И РеализацияТоваровУслуг.ХарактеристикаНоменклатуры = ШтрихкодыВесов.ХарактеристикаНоменклатуры
	|			И РеализацияТоваровУслуг.Порции = ШтрихкодыВесов.Порция
	|			И (ШтрихкодыВесов.Контрагент = &Контрагент)
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И РеализацияТоваровУслуг.КоличествоЗаявки > РеализацияТоваровУслуг.Количество
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.ЕдиницаИзмеренияМест,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.ПроцентСкидкиНаценки,
	|	РеализацияТоваровУслуг.ПроцентАвтоматическихСкидок,
	|	РеализацияТоваровУслуг.СерияНоменклатуры,
	|	РеализацияТоваровУслуг.ХарактеристикаНоменклатуры,
	|	РеализацияТоваровУслуг.Порции,
	|	РеализацияТоваровУслуг.Стикер,
	|	МестаХраненияНоменклатуры.МестоХранения,
	|	МестаХраненияНоменклатуры.Склад,
	|	ШтрихкодыВесов.Код,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное, МестаХраненияНоменклатуры.Номенклатура.НаименованиеПолное) КАК СТРОКА(150)),
	|	ПОДСТРОКА(МестаХраненияНоменклатуры.МестоХранения.Наименование, 0, 1),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(МестаХраненияНоменклатуры.МестоХранения.Наименование, """") = """"
	|			ТОГДА РеализацияТоваровУслуг.НомерСтроки
	|		ИНАЧЕ МестаХраненияНоменклатуры.МестоХранения.Наименование
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияНоменклатуры.МестоХранения.Наименование";
	ЗапросТовары = Запрос.Выполнить().Выбрать();
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_ЗаявкаПоСекциям";
	ЭтотОбъект.ПараметрыПечати(ТабДокумент);
	Макет = ЭтотОбъект.ПолучитьМакет("ЗаявкаНаСекции");
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьМакета.Параметры.ТекстЗаголовка = "НЕДОГРУЗ Заявки № "+Формат(ЧИСЛО(ЭтотОбъект.Номер),"ЧДЦ=0; ЧГ=0")+" от "+Формат(ЭтотОбъект.ЗаявкаДата,"ДФ=dd.MM.yy")+ 
	" на "+Формат(ЭтотОбъект.Дата,"ДФ=dd.MM.yy");
	ОбластьМакета.Параметры.ТорговаяМарка			=?(ЭтотОбъект.Контрагент.ТорговаяМарка=Перечисления.ТорговыеМарки.КС,"КС","");
	
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	Если ЭтотОбъект.Реализатор<>Справочники.Контрагенты.ПустаяСсылка() тогда
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭтотОбъект.Реализатор.Наименование;
	Иначе
		ОбластьМакета.Параметры.ПредставлениеПоставщика =" ";
	КонецЕсли;
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ЭтотОбъект.Контрагент.Наименование +" "+ЭтотОбъект.АдресДоставки; 
	//ОбластьМакета.Параметры.УсловиеСтикирования  = "Стикер " +?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка()," РМК",СокрЛП(КонтаргентДляБизерба.Наименование));
	ОбластьМакета.Параметры.УсловиеСтикирования  = ?(КонтаргентДляБизерба=Справочники.Контрагенты.ПустаяСсылка(),ЭтотОбъект.Контрагент.УсловиеСтикирования,"Стикер " +СокрЛП(КонтаргентДляБизерба.Наименование));
	ОбластьМакета.Параметры.Комментарий				= Шапка.Комментарий;
	ОбластьМакета.Параметры.БазовыйМаршрут          =ЭтотОбъект.БазовыйМаршрут.Наименование;
	//***ШК
	ОбластьМакета.Рисунки.D1.ГраницаСверху    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСнизу     =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСправа    =   Ложь;
	ОбластьМакета.Рисунки.D1.ГраницаСлева     =   Ложь;
	ОбластьМакета.Рисунки.D1.Объект.ТипКода    =   1;
	СтрШК=Формат(Число(ЭтотОбъект.Номер),"ЧЦ=6; ЧДЦ=0; ЧВН=; ЧГ=0")+""+Формат(ЭтотОбъект.Дата,"ДФ=yyMMdd");
	ШтрихКод=УправлениеРаботойСоСтикером.ПолучитьКонтрольноеЧислоШК13(СтрШК);
	ОбластьМакета.Рисунки.D1.Объект.Сообщение =  ШтрихКод;
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьСекции	= Макет.ПолучитьОбласть("Секция");

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество= 0;
	ОбластьТД 		= Макет.ПолучитьОбласть("ШапкаТаблицы");			
	ТабДокумент.Вывести(ОбластьТД);
	
	Пока ЗапросТовары.СледующийПоЗначениюПоля("Секция") цикл
		Если НЕ ЗначениеЗаполнено(ЗапросТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьТД 		= Макет.ПолучитьОбласть("Секция");			
		Если ЗапросТовары.Секция="A" Тогда
			ОбластьТД.Параметры.Секция_0=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="B" Тогда	
			ОбластьТД.Параметры.Секция_1=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="C" Тогда	
			ОбластьТД.Параметры.Секция_2=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="D" Тогда	
			ОбластьТД.Параметры.Секция_3=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="E" Тогда	
			ОбластьТД.Параметры.Секция_4=ЗапросТовары.Секция;
		ИначеЕсли ЗапросТовары.Секция="F" Тогда	
			ОбластьТД.Параметры.Секция_5=ЗапросТовары.Секция;
		ИНАЧЕ	
			ОбластьТД.Параметры.Секция_0="?";
			ОбластьТД.Параметры.Секция_1="?";
			ОбластьТД.Параметры.Секция_2="?";
			ОбластьТД.Параметры.Секция_3="?";
			ОбластьТД.Параметры.Секция_4="?";
			ОбластьТД.Параметры.Секция_5="?";
		КонецЕсли; 
        ТабДокумент.Вывести(ОбластьТД);
		НомерВГруппе=1;	
		Пока ЗапросТовары.СледующийПоЗначениюПоля("АдресХранения") цикл
			ОбластьТД 		= Макет.ПолучитьОбласть("Строка");	
			ОбластьТД.Параметры.НомерСтроки = Формат(НомерВГруппе,"ЧДЦ=0; ЧГ=0");
			ОбластьТД.Параметры.АдресТовара	= ?(ЗапросТовары.Секция=NULL,"",СокрЛП(ЗапросТовары.АдресХранения));
			ОбластьТД.Параметры.КоличествоЗаявки=Формат(ЗапросТовары.КоличествоЗаявки,"ЧДЦ=3; ЧГ=0");
			ОбластьТД.Параметры.Упаковка= СокрЛП(ЗапросТовары.Характеристика)+" "+СокрЛП(ЗапросТовары.Порции);
			ОбластьТД.Параметры.Стикеры=?(ЗапросТовары.Стикер=Истина,"б/стик.",ЗапросТовары.КодPLU);
			ОбластьТД.Параметры.Товар 	= СокрЛП(ЗапросТовары.Номенклатура.Наименование);
			//ОбластьТД.Параметры.Товар 	= ?(ЗапросТовары.Секция=NULL,СокрЛП(ЗапросТовары.Номенклатура.Наименование),"");//+++151223 Гаврюк.
			ОбластьТД.Параметры.ЕдиницаИзмерения = ЗапросТовары.ЕдиницаИзмерения;
			ЕдУпаковки=ПолучитьЕдиницуУпаковка(ЗапросТовары.Номенклатура,ЗапросТовары.Характеристика);
			ОбластьТД.Параметры.Штук 	= ?(ЕдУпаковки=0,"",Формат(Окр(ЗапросТовары.КоличествоЗаявки/ЕдУпаковки,0,2),"ЧДЦ=0; ЧГ=0"));
			ТабДокумент.Вывести(ОбластьТД);
			ВсегоКоличество=ВсегоКоличество+ЗапросТовары.КоличествоЗаявки;
			НомерВГруппе=НомерВГруппе+1;
		КонецЦикла;
	КонецЦикла; 
	ОбластьИтогоКоличество = Макет.ПолучитьОбласть("Итого");
	ОбластьИтогоКоличество.Параметры.ВремяПечати	 = Формат(ТекущаяДата(),"ДЛФ=DT");
	ОбластьИтогоКоличество.Параметры.ИтогоКоличество = ЗаполнениеДокументов.ФорматСумм(ВсегоКоличество);
	ТабДокумент.Вывести(ОбластьИтогоКоличество);
	
	Возврат ТабДокумент;	
КонецФункции // ПечатьНедогрузовПоСекциям()
//***160706
Функция ПолучитьСлучайноеЧислоКодТовара(Мин,Макс) Экспорт

//вместо Randomize 
Для н = 1 По 100 Цикл 
Уник = Новый УникальныйИдентификатор; 
КонецЦикла; 

//генерируем GUID 
Уник = СокрЛП(Новый УникальныйИдентификатор); 

//оставляем только цифры 
Уник = СтрЗаменить(Уник,"-",""); 
Уник = СтрЗаменить(Уник,"a",""); 
Уник = СтрЗаменить(Уник,"b",""); 
Уник = СтрЗаменить(Уник,"c",""); 
Уник = СтрЗаменить(Уник,"d",""); 
Уник = СтрЗаменить(Уник,"e",""); 
Уник = СтрЗаменить(Уник,"f",""); 

//знаменатель должен иметь такое же количество нулей + 1 
Знаменатель = 10; 
Для н = 2 По (СтрДлина(СтрЗаменить(Уник,Символы.НПП,""))) Цикл 
Знаменатель = Знаменатель * 10; 
КонецЦикла; 

Случ = Число(Уник) / Знаменатель; //здесь получается дробное случайное число от 0 до 1 

//преобразуем его в случайное число из заданного интервала, округляем до целого 
ЧислоИзИнтервала = Мин(Макс(Окр(Мин + (Макс-Мин)*Случ),Мин),Макс); 

Возврат ЧислоИзИнтервала; 

КонецФункции
//***161129
Процедура  ПечатьКомплекта(Док) Экспорт
	Если Док=неопределено или Док=Документы.РеализацияТоваровУслуг.ПустаяСсылка() тогда
		Возврат;
	КонецЕсли;
    мКА=Док.Контрагент;
	ВсегоКПечати=мКА.КоличествоЭкземпляровРасходныхНакладных+
				 мКА.КоличествоЭкземпляровКачественногоСвидетельства+
				 мКА.КоличествоЭкземпляровНакладныхМенеджеру;
	Если ВсегоКПечати=0 тогда
		КоличествоЭкземпляровРасходных=3;
		КоличествоЭкземпляровКачественных=1;
		КоличествоЭкземпляровМенеджеру=2;
	ИНАЧЕ 
		КоличествоЭкземпляровРасходных		=	мКА.КоличествоЭкземпляровРасходныхНакладных;
		КоличествоЭкземпляровКачественных	=	мКА.КоличествоЭкземпляровКачественногоСвидетельства;
		КоличествоЭкземпляровМенеджеру		=	мКА.КоличествоЭкземпляровНакладныхМенеджеру;
	КонецЕсли;

	Если КоличествоЭкземпляровРасходных<>0 тогда
		ДокументПечати =Док.ПечатьДокумента();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровРасходных, Истина);
	КонецЕсли;
	Если КоличествоЭкземпляровКачественных<>0 тогда   //***КоличествоЭкземпляровКачественных
        ДокументПечати =Док.ПечатьДекларацииПроизводителя();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровКачественных, Истина);
	КонецЕсли;
	Если КоличествоЭкземпляровМенеджеру<>0 тогда   //****   КоличествоЭкземпляровМенеджеру
		ДокументПечати =Док.ПечатьМенеджеру();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, КоличествоЭкземпляровМенеджеру, Истина);
	КонецЕсли;
    Если мКА.Код="000002617" ИЛИ 
         мКА.Код="000002616"  тогда
        ДокументПечати =Док.ПечатьНакладнойПоддоныФоззи();
		УниверсальныеМеханизмы.НапечататьДокумент(ДокументПечати, 2, Истина);
    КонецЕсли;    
КонецПроцедуры

//***170215
Функция ПечатьДокументаСоСкидкой() Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	ДоговорКонтрагента.ВидДоговора КАК ВидДоговораКонтрагента,
	|	ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ДоговорВедениеВзаиморасчетов,
	|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,	
	|	ДоговорКонтрагента.ВыводитьИнформациюОСделкеПриПечатиДокументов КАК ПечататьСделку,	
	|	Сделка,
	|	Контрагент КАК Покупатель,
	|	Организация,
	|	Организация КАК Поставщик,
	|	Ответственный.ФизЛицо.Наименование КАК Выписал,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата,
	|	ДоверенностьПолучил,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	СтрокаВыборкиПоляСодержания = ОбработкаТабличныхЧастей.ПолучитьЧастьЗапросаДляВыбораСодержания("РеализацияТоваровУслуг");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НомерТЧ,
	|	НомерСтрокиТЧ,
	|	Номенклатура,
	|	Номенклатура.Родитель.Наименование КАК Родитель,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК СТРОКА(700)) КАК Товар,
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	КоличествоМест,
	|	ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияМест.Представление КАК ЕдиницаИзмеренияМест,
	|	Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки КАК Скидка,
	|	ПроцентАвтоматическихСкидок КАК АвтоматическаяСкидка,
	|	ХарактеристикаНоменклатуры КАК Характеристика,
	|	СерияНоменклатуры КАК Серия,
	|	ПроцентСкидкиНаВес,
	|	СкидкаНаВес
	|ИЗ 
	|	(ВЫБРАТЬ
	|		1 КАК НомерТЧ,
	|		НомерСтроки КАК НомерСтрокиТЧ,
	|		Номенклатура         КАК Номенклатура,
	|		ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест КАК ЕдиницаИзмеренияМест,
	|		СУММА(Сумма)/СУММА(Количество) КАК Цена,
	|		СтавкаНДС            КАК СтавкаНДС,
	|		ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок           КАК ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры    КАК СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	    ПроцентСкидкиНаВес,
	|	    СкидкаНаВес,	
	|		СУММА(Количество)    КАК Количество,
	|		СУММА(КоличествоМест)КАК КоличествоМест,
	|		СУММА(Сумма)         КАК Сумма,
	|		СУММА(СуммаНДС)      КАК СуммаНДС
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент И РеализацияТоваровУслуг.Количество<>0
	|	СГРУППИРОВАТЬ ПО
	|		Номенклатура,
	|		НомерСтроки,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияМест,
	|		Цена,
	|		СтавкаНДС,
	|		ПроцентСкидкиНаценки,
	|		ПроцентАвтоматическихСкидок,
	|		СерияНоменклатуры,
	|		ХарактеристикаНоменклатуры,
	|		ПроцентСкидкиНаВес, СкидкаНаВес
	|	) КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	НомерСтроки,
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	" + СтрокаВыборкиПоляСодержания + ",
	|	Номенклатура.Код     КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Количество,
	|	NULL,
	|	Номенклатура.ЕдиницаХраненияОстатков.Представление КАК ЕдиницаИзмерения,
	|	NULL,
	|	Сумма/Количество КАК Цена,
	|	Сумма,
	|	СуммаНДС,
	|	ПроцентСкидкиНаценки,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL	
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерТЧ, Родитель, Товар
	|";
	
		//|	НомерТЧ, НомерСтрокиТЧ
		
		
		
	ЗапросТовары = Запрос.Выполнить().Выгрузить();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ЭтотОбъект.Ссылка);
	Запрос.Текст = "
	
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Номенклатура.Код                КАК Код,
	|	Номенклатура.Артикул            КАК Артикул,
	|	СУММА(Количество) КАК Количество,
	|	СУММА(Сумма) КАК СУММА
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|";
	
	ЗапросТара = Запрос.Выполнить().Выгрузить();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_НакладнаяСоСкидкой";
    //***//
    Если (РабочееМесто.Помещения.Код="000000004" ИЛИ РабочееМесто.Помещения.Код="000000002") И ФайлСкрипта.Существует()   тогда
        ТекПринтер=ОбщегоНазначения.ПолучитьПринтерПоУмолчанию();
        Если ТекПринтер<>"" тогда
            ТабДокумент.ИмяПринтера= ТекПринтер;
        КонецЕсли;
    КонецЕсли;    
     
    ПараметрыПечати(ТабДокумент); 
	Макет = ПолучитьМакет("НакладнаяРасходнаяСоСкидкой");

	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РежимФормированияПечатныхФорм"));
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	// Выводим шапку накладной
	СведенияОПоставщике = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
	СведенияОПокупателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
	
	Если ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
		НомерСчета = БанковскийСчетОрганизации.НомерСчета;
		Банк       = БанковскийСчетОрганизации.Банк;
		МФО		   = БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОПоставщике.Вставить("НомерСчета",       НомерСчета);
		СведенияОПоставщике.Вставить("Банк",             Банк);
		СведенияОПоставщике.Вставить("МФО",              МФО);
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
	Иначе	
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначения.СформироватьЗаголовокДокумента(ЭтотОбъект, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
	КонецЕсли; 
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);
	ОбластьМакета.Параметры.РеквизитыПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ПлательщикНалогаНаПрибыль,",,КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.Заполнить(Шапка);	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать)+"   ("+СокрЛП(Шапка.Покупатель.Код)+")";
	ОбластьМакета.Параметры.РеквизитыПокупателя		= ЭтотОбъект.АдресДоставки;
	//ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе, "ФактическийАдрес,Телефоны,",,КодЯзыкаПечать); //*** Ю.Ляшенко 11-12-2014
	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Комментарий");
	ОбластьМакета.Параметры.Комментарий=Комментарий;
	ТабДокумент.Вывести(ОбластьМакета);	

	ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
	ТабДокумент.Вывести(ОбластьПробел);
	

	// Выводим дополнительно информацию о договоре и сделке
	СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,";
	Если Шапка.ПечататьСделку = Истина Тогда
		СписокДополнительныхПараметров = СписокДополнительныхПараметров + "Сделка,";
	КонецЕсли;
	МассивСтруктурСтрок = ФормированиеПечатныхФорм.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
		ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЦикла;		
	
	ЕстьСкидки = Ложь;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 
		Если ЗначениеЗаполнено(ВыборкаСтрокТовары.Скидка) Тогда
			ЕстьСкидки = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла;

	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	Сумма    = 0;
	СуммаНДС = 0;
	ВсегоСкидок    = 0;
	ВсегоБезСкидок = 0;
	ВсегоКоличество =0; 
    ВсегоКолШт      =0;
	Для каждого ВыборкаСтрокТовары из ЗапросТовары Цикл 

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
			Сообщить("В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		ОбластьСтроки	= Макет.ПолучитьОбласть("Строка");
		ОбластьСтроки.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
		ОбластьСтроки.Параметры.Товар = СокрП(ВыборкаСтрокТовары.Товар)+
						?(ЗначениеЗаполнено(ВыборкаСтрокТовары.Характеристика),"("+СокрЛП(ВыборкаСтрокТовары.Характеристика)+")","");
		//ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТовары);
		ОбластьСтроки.Параметры.Количество 			=  Формат(ВыборкаСтрокТовары.Количество,"ЧДЦ=3");
		ОбластьСтроки.Параметры.ЕдиницаИзмерения	= ВыборкаСтрокТовары.ЕдиницаИзмерения;
		//*** Определение Цены
		ТипЦеныДляПечати= ЭтотОбъект.Контрагент.ЦенаДляПечати;
		ЦенаДляПечати= Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрокТовары.Номенклатура, , ТипЦеныДляПечати, ЭтотОбъект.Дата,);
		
		ОбластьСтроки.Параметры.ЦенаБезСкидки		=	Формат(ЦенаДляПечати,"ЧДЦ=2");
		ОбластьСтроки.Параметры.Цена         		=	Формат(ВыборкаСтрокТовары.Цена,"ЧДЦ=2");
		ОбластьСтроки.Параметры.СуммаБезСкидки      =	Формат(ЦенаДляПечати*ВыборкаСтрокТовары.Количество,"ЧДЦ=2");
		ОбластьСтроки.Параметры.Сумма				=   Формат(ВыборкаСтрокТовары.Сумма,"ЧДЦ=2");
		Скидка=(ЦенаДляПечати*ВыборкаСтрокТовары.Количество-ВыборкаСтрокТовары.Сумма);
		ОбластьСтроки.Параметры.Скидка				=   Формат(Скидка,"ЧДЦ=2");
		
		
		ТабДокумент.Вывести(ОбластьСтроки);
        ВсегоКоличество=ВсегоКоличество + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",0,1);
        ВсегоКолШт     =ВсегоКолШт      + ВыборкаСтрокТовары.Количество*?(ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков.Наименование="шт",1,0);
        
		Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
		СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;
		ВсегоСкидок    = ВсегоСкидок + Скидка;
		ВсегоБезСкидок = ВсегоБезСкидок+ ЦенаДляПечати*ВыборкаСтрокТовары.Количество;
	КонецЦикла;

	// Вывести Итого
	ОбластьПечати= Макет.ПолучитьОбласть("Итого");
	ОбластьПечати.Параметры.ВсегоБезСкидок= Формат(ВсегоБезСкидок ,"ЧДЦ=2");
	ОбластьПечати.Параметры.ВсегоСкидок   = Формат(ВсегоСкидок,"ЧДЦ=2");
	ОбластьПечати.Параметры.Всего         = Формат(Сумма,"ЧДЦ=2");
	ТабДокумент.Вывести(ОбластьПечати);
	
	ОбластьПечати= Макет.ПолучитьОбласть("ИтогоНДС");	
	ОбластьПечати.Параметры.НДС = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
	ОбластьПечати.Параметры.ВсегоНДС 	= Формат(СуммаНДС,"ЧДЦ=2");
	ТабДокумент.Вывести(ОбластьПечати);
	
	// выведем таблицу с возвратной тарой
	Если ЗапросТара.Количество() > 0 Тогда
		// сделаем отступ от основной таблицы
		ОбластьПробел = Макет.ПолучитьОбласть("Пробел");
		ТабДокумент.Вывести(ОбластьПробел);
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицыТара|СуммаТара");
		
		ТабДокумент.Вывести(ОбластьНомера);
		
		ТабДокумент.Присоединить(ОбластьДанных);
		ТабДокумент.Присоединить(ОбластьСуммы);
		
		ОбластьКолонкаТовар = Макет.Область("Тара");
		ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
		Макет.Область("КолонкаКодовТара").ШиринаКолонки;
		
		ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТара|ДанныеТара");
		ОбластьСуммы  = Макет.ПолучитьОбласть("СтрокаТара|СуммаТара");
		
		СуммаТара    	= 	0;
		ВсегоКолТара	=	0;
		
		Для каждого ВыборкаСтрокТара Из ЗапросТара Цикл 
			
			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТара.Номенклатура) Тогда
				Сообщить("В одной из строк не заполнено значение тары - строка при печати пропущена.", СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьНомера.Параметры.НомерСтроки = ЗапросТара.Индекс(ВыборкаСтрокТара) + 1;
			ТабДокумент.Вывести(ОбластьНомера);
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТара);
			ОбластьДанных.Параметры.Товар = СокрП(ВыборкаСтрокТара.Номенклатура);			
			ТабДокумент.Присоединить(ОбластьДанных);
			ОбластьСуммы.Параметры.Заполнить(ВыборкаСтрокТара);
			ТабДокумент.Присоединить(ОбластьСуммы);
			ВсегоКолТара	=ВсегоКолТара+ВыборкаСтрокТара.Количество;
			СуммаТара = СуммаТара + ВыборкаСтрокТара.Сумма;
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоТара|НомерСтрокиТара");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоТара|КолонкаКодовТара");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоТара|ДанныеТара");
		//ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоТара|ВсегоТары");
		
		ТабДокумент.Вывести(ОбластьНомера);
		ОбластьДанных .Параметры.ВсегоТары = ЗаполнениеДокументов.ФорматСумм(ВсегоКолТара);
		ТабДокумент.Присоединить(ОбластьДанных);
		
		// сделаем отступ 
		ТабДокумент.Вывести(ОбластьПробел);
	КонецЕсли;

	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
										   
	ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
											 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ЗаполнениеДокументов.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента)
											 +   ".    в кiлькостi "+Формат(ВсегоКоличество,"ЧДЦ=3; ЧН=' '; ЧГ=0")+?(ВсегоКоличество=0,""," кг.  ") + ?(ВсегоКолШт<>0 И ВсегоКоличество<>0,","," ") + Формат(ВсегоКолШт,"ЧДЦ=0; ЧН=' '; ЧГ=0")+ ?(ВсегоКолШт=0,"","шт.") ;
										   
	ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
	 										 + ?(НЕ Шапка.УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначения.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));
										   
	ТабДокумент.Вывести(ОбластьМакета);

	
	// Вывести подписи
		
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	//ОбластьМакета.Параметры.Заполнить(Шапка);
	ОбластьМакета.Параметры.Выписал=СокрЛП(глЗначениеПеременной("глТекущийПользователь"));
	ТабДокумент.Вывести(ОбластьМакета);	
	Если СуммаИтогМенеджера>0 тогда 
	//Вывести менеджера
		ОбластьМакета = Макет.ПолучитьОбласть("МенеджерПокупателя");
		ОбластьМакета.Параметры.НомерНакладной	= "№ "+СокрЛП(Номер)+" от "+Формат(Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ПокупательНакладной=Контрагент.Наименование;
		//ОбластьМакета.Параметры.Менеджер		=Реализатор.НаименованиеПолное;
		//Сообщить(Реализатор);
		//Сообщить(Реализатор.Наименование);
		//СокрЛП(Реализатор.Наименование)<>"" и
		ПустаяСсылкаКонтрагенты = Справочники.Контрагенты.ПустаяСсылка();
		если  Реализатор<>NULL 
				И Реализатор.Ссылка<>ПустаяСсылкаКонтрагенты
					И не РольДоступна("Филиал") И не РольДоступна("ФилиалРуководитель") тогда
		    ОбластьМакета.Параметры.Менеджер=Реализатор.Наименование;
		КонецЕсли;
		
		ОбластьМакета.Параметры.СуммаСоСкидкой	=СуммаИтогМенеджера;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	Возврат ТабДокумент;
		
КонецФункции // ПечатьДокумента()


мВалютаРегламентированногоУчета   = Константы.ВалютаРегламентированногоУчета.Получить();
ПутьФайлаСкрипта="C:\\Windows\\System32\\vbscript.dll";
ФайлСкрипта = Новый Файл(ПутьФайлаСкрипта);


мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Товары", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));
мПараметрыСвязиСтрокТЧ.Вставить("СоставНабора", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));

мЕстьКолонкаСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();

мСтруктураПараметровВзаиморасчетов = Новый Структура;
мСтруктураПараметровВзаиморасчетов.Вставить("СтруктураТабличныхЧастей", Новый Структура("Товары, Услуги"));
мСтруктураПараметровВзаиморасчетов.Вставить("Направление", "Реализация");
мСтруктураПараметровВзаиморасчетов.Вставить("ЕстьЗаказыВТабличныхЧастях", Истина);
мСтруктураПараметровВзаиморасчетов.Вставить("ИмяЗаказаВТабличныхЧастях", "ЗаказПокупателя");

мУказаниеСкладов = Константы.УказаниеСкладовВТабличнойЧастиДокументов.Получить();
мУказаниеСкладовВТЧ = (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации)
                  Или (мУказаниеСкладов = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовРеализации);

мИспользоватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();

// Перечень колбас для списания веса с упаковкой 
// служебка Власенко Т.А. 131212
СП_ТЗ = новый ТаблицаЗначений;
СП_ТЗ.Колонки.Добавить("Номенклатура");
СП_ТЗ.Колонки.Добавить("ХарактеристикаНоменклатуры");
СП_ТЗ.Колонки.Добавить("Порции");

НовСтрока = СП_ТЗ.Добавить();//Банкетная Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003406");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000003406"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Банкетная Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003406");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000003406"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Брауншвейгська  с/к в/с  Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000677");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000677"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Брауншвейгська  с/к в/с  Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000677");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000677"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Венеція с/к в/с  Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001533");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001533"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Венеція с/к в/с  Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001533");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001533"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.НайтиПоКоду("000000009"); //по 1/2 шт.

НовСтрока = СП_ТЗ.Добавить();//Венеція с/к в/с  Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001533");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000001533"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Єврейська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000671");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000671"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Зерниста с/к в/с ДСТУ  Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000675");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000675"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Зерниста с/к в/с ДСТУ  Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000675");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000675"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Золота с/к в/с  Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000669");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000669"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Золота с/к в/с  Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000669");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000669"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Італія с/к 1/с  Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000854");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000854"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Карпатська с/к 1/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003405");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000003405"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Карпатська с/к 1/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003405");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000003405"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Ковбаса "Мінісалямі" с/в 1/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003039");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000003039"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Ковбаса "Мінісалямі" с/в 1/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003039");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000003039"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Міланська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003407");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000003407"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Міланська с/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003407");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000003407"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Московська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000676");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000676"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Московська с/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000676");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000676"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Невська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001536");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001536"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Палермо с/к 1/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003408");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000003408"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Радянська з коньяком с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000670");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000670"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Радянська з коньяком с/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000670");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000670"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Салямі Золотиста с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003404");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000003404"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Салямі Золотиста с/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000003404");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000003404"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Салямі Іспанська с/к 1/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001531");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001531"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Салямі Парманелло с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001538");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001538"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Старокиївська с/к 1/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001530");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001530"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Старокиївська с/к 1/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001530");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000001530"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Фінська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000855");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000855"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Фінська с/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000855");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000855"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Царська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001241");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001241"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Царська с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001241");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001241"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.НайтиПоКоду("000000009"); //по 1/2 шт.

НовСтрока = СП_ТЗ.Добавить();//Царська с/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001241");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000001241"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Чорізо с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000001534");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000001534"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Шварцвальдська н/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000824");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000000824"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();

НовСтрока = СП_ТЗ.Добавить();//Шварцвальдська н/к в/с Газ
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000000824");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Газ",,,Справочники.Номенклатура.НайтиПоКоду("00000000824"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();


НовСтрока = СП_ТЗ.Добавить();//Французька с/к в/с Вакуум
НовСтрока.Номенклатура				= Справочники.Номенклатура.НайтиПоКоду("00000004488");
НовСтрока.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Вакуум",,,Справочники.Номенклатура.НайтиПоКоду("00000004488"));
НовСтрока.Порции=Справочники.ПорцииТовараОтгрузки.ПустаяСсылка();
